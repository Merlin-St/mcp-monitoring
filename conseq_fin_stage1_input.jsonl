{"input": "{\"server_name\": \"n8n-workflow-builder\", \"server_id\": \"makafeli/n8n-workflow-builder\", \"description\": \"MCP server for programmatically creating and managing n8n workflows\", \"readme\": \"[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/makafeli-n8n-workflow-builder-badge.png)](https://mseep.ai/app/makafeli-n8n-workflow-builder)\\n\\n# n8n Workflow Builder MCP Server\\n\\nThis project provides an MCP server for managing n8n workflows. It offers functionality to list, create, update, delete, activate, and deactivate workflows through a set of defined tools.\\n\\n**Important:**  \\nThis version exclusively supports **npm** for package management and running the server. (npx support will be reintroduced in a future update.)\\n\\n## Requirements\\n\\n- Node.js (v14+ recommended)\\n- npm\\n\\n## Extensive Installation Guide\\n\\n### 1. Clone the Repository\\n\\nClone the repository from your preferred source. For example:\\n\\n```bash\\ngit clone https://github.com/makafeli/n8n-workflow-builder.git\\n```\\n\\nThen, navigate to the project directory:\\n\\n```bash\\ncd /root/n8n-workflow-builder\\n```\\n\\n### 2. Install Dependencies\\n\\nInstall the necessary dependencies using npm:\\n\\n```bash\\nnpm install\\n```\\n\\nThis command will download and install all required packages as defined in the `package.json` file.\\n\\n### 3. Build and Test\\n\\nFor testing and getting the server online, use the following commands:\\n\\n- **Build the project:**  \\n  This compiles the TypeScript files and produces the executable JavaScript in the `build` directory.\\n  \\n  ```bash\\n  npm run build\\n  ```\\n\\n- **Start the MCP Server:**  \\n  Launch the server using:\\n  \\n  ```bash\\n  npm start\\n  ```\\n\\nThe server will start and connect via stdio. You can check the console to see messages confirming that the server has started correctly.\\n\\n### 4. Deployment\\n\\nFor testing purposes and to get the server online, use the build and start commands mentioned above. This basic workflow (install, build, start) is currently the recommended method.\\n\\n### 5. Additional Configuration\\n\\nServer configuration for [Cline](https://cline.bot) is managed via the `cline_mcp_settings.json` file. Ensure that the following environment variables are correctly set:\\n\\n- `N8N_HOST`: Your n8n API host URL.\\n- `N8N_API_KEY`: Your n8n API key.\\n\\nExample configuration in `cline_mcp_settings.json`:\\n\\n```json\\n{\\n  \\\"n8n-workflow-builder\\\": {\\n    \\\"command\\\": \\\"node\\\",\\n    \\\"args\\\": [\\\"/root/n8n-workflow-builder/build/index.js\\\"],\\n    \\\"env\\\": {\\n      \\\"N8N_HOST\\\": \\\"https://n8n.io/api/v1/\\\",\\n      \\\"N8N_API_KEY\\\": \\\"YOUR_N8N_API_KEY_HERE\\\"\\n    },\\n    \\\"disabled\\\": false,\\n    \\\"alwaysAllow\\\": [\\n      \\\"create_workflow\\\",\\n      \\\"create_workflow_and_activate\\\",\\n      \\\"update_workflow\\\",\\n      \\\"activate_workflow\\\",\\n      \\\"deactivate_workflow\\\",\\n      \\\"get_workflow\\\",\\n      \\\"delete_workflow\\\"\\n    ],\\n    \\\"autoApprove\\\": []\\n  }\\n}\\n```\\n\\n## Available Features\\n\\n### MCP Tools\\n\\nThe following tools are defined in the server and can be accessed through your MCP client:\\n\\n#### Workflow Management\\n- **list_workflows**: Lists all workflows from n8n.\\n- **create_workflow**: Creates a new workflow in n8n.\\n- **get_workflow**: Retrieves a workflow by its ID.\\n- **update_workflow**: Updates an existing workflow.\\n- **delete_workflow**: Deletes a workflow by its ID.\\n- **activate_workflow**: Activates a workflow by its ID.\\n- **deactivate_workflow**: Deactivates a workflow by its ID.\\n\\n#### Execution Management\\n- **list_executions**: Lists all workflow executions with optional filters.\\n- **get_execution**: Retrieves details of a specific execution by its ID.\\n- **delete_execution**: Deletes an execution by its ID.\\n\\n### MCP Resources\\n\\nThe server also provides the following resources for more efficient context access:\\n\\n#### Static Resources\\n- **/workflows**: List of all available workflows in the n8n instance\\n- **/execution-stats**: Summary statistics about workflow executions\\n\\n#### Dynamic Resource Templates\\n- **/workflows/{id}**: Detailed information about a specific workflow\\n- **/executions/{id}**: Detailed information about a specific execution\\n\\n## Troubleshooting\\n\\n- Ensure you are using npm (this version does not support npx).\\n- If you encounter any issues, try cleaning the build directory and rebuilding:\\n  ```bash\\n  npm run clean && npm run build\\n  ```\\n- Verify that your environment variables in `cline_mcp_settings.json` are correct.\\n\\n## Future Enhancements\\n\\n- Reintroduction of npx support.\\n- Additional tools and workflow features.\\n- Further enhancements to deployment and scaling.\\n\\n## License\\n\\nThis project is licensed under the MIT License.\\n\", \"tools\": [{\"name\": \"build\", \"description\": \"directory.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for build\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"N8N_HOST\", \"description\": \"Your n8n API host URL.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"URL or link to process\"}}, \"required\": [\"url\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"N8N_API_KEY\", \"description\": \"Your n8n API key.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for N8N_API_KEY\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 3, \"homepage\": \"\", \"url\": \"https://github.com/makafeli/n8n-workflow-builder\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "makafeli/n8n-workflow-builder", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"codex\", \"server_id\": \"mdashley/codex\", \"description\": \"A simple MCP server that provides a LLM with tools for accessing legislative data from the Congress.gov API\", \"readme\": \"# Codex\\n\\nA simple MCP server that provides a LLM with tools for accessing legislative data from the [Congress.gov API](https://github.com/LibraryOfCongress/api.congress.gov).\\n\\n## Features\\n\\nOver 40 tools organized into categories:\\n\\n- **Amendments**: List amendments, get details, actions, cosponsors, and text\\n- **Bills**: Search and retrieve bill information, actions, amendments, committees, cosponsors, subjects, summaries, and text\\n- **Committees**: List committees and get committee details and bills\\n- **Members**: Access member information, sponsored and cosponsored legislation\\n- **Nominations**: List and get details about presidential nominations\\n- **Treaties**: Access treaty information and actions\\n- **Congressional Record**: Browse congressional record entries\\n- **Hearings**: Search and get details about congressional hearings\\n- **Communications**: Access House and Senate communications\\n\\n## Requirements\\n\\n- Python 3.10+\\n- [uv](https://astral.sh/uv) package manager\\n- Congress.gov API key (set as `CONGRESS_API_KEY` environment variable)\\n\\n## Setup\\n\\n```bash\\n# Clone the repository\\ngit clone https://github.com/mdashley/codex.git\\ncd codex\\n\\n# Set up virtual environment\\nuv venv\\nsource .venv/bin/activate  # On Windows: .venv\\\\Scripts\\\\activate\\n\\n# Install dependencies\\nuv sync\\n```\\n\\n## Connecting to Claude for Desktop\\n\\n1. Install [Claude for Desktop](https://claude.ai/desktop)\\n2. Configure Claude to use the server by editing `~/Library/Application Support/Claude/claude_desktop_config.json`:\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"codex\\\": {\\n      \\\"command\\\": \\\"uv\\\",\\n      \\\"args\\\": [\\n        \\\"--directory\\\",\\n        \\\"/ABSOLUTE/PATH/TO/PARENT/FOLDER/codex\\\",\\n        \\\"run\\\",\\n        \\\"codex.py\\\"\\n      ],\\n      \\\"env\\\": {\\n        \\\"CONGRESS_API_KEY\\\": \\\"your-api-key-here\\\"\\n      }\\n    }\\n  }\\n}\\n```\\n\\n3. Restart Claude for Desktop\\n4. Look for the hammer icon to confirm tools are available\\n\\n## Getting a Congress.gov API Key\\n\\nTo fetch data from the Congress.gov API, you need to [request an API key](https://api.congress.gov/sign-up/).\\n\\n## Troubleshooting\\n\\n- Check logs at `~/Library/Logs/Claude/mcp*.log`\\n- Update the uv path in claude_desktop_config.json to be absolute (run `which uv` to find your uv installation path)\\n\\n## Learn More\\n\\n- [MCP documentation](https://modelcontextprotocol.io/introduction)\\n- [Congress.gov API documentation](https://api.congress.gov/)\\n\", \"tools\": [{\"name\": \"CONGRESS_API_KEY\", \"description\": \"environment variable)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for CONGRESS_API_KEY\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 1, \"homepage\": \"\", \"url\": \"https://github.com/mdashley/codex\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "mdashley/codex", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"altium-mcp\", \"server_id\": \"coffeenmusic/altium-mcp\", \"description\": \"Altium Model Context Protocol server and Altium API script\", \"readme\": \"# Altium MCP Server\\n\\nTLDR: Use Claude to control or ask questions about your Altium project.\\nThis is a Model Context Protocol (MCP) server that provides an interface to interact with Altium Designer through Python. The server allows for querying and manipulation of PCB designs programmatically.\\n\\nNote: Having Claude place components on the PCB currently fails hard.\\n\\n## Example commands\\n- Run all output jobs\\n- Create a symbol for the part in the attached datasheet and use the currently open symbol as a reference example.\\n- Create a schematic symbol from the attached MPM3650 switching regulator datasheet and make sure to strictly follow the symbol placement rules. (Note: Need to open a schematic library. Uses `C:\\\\AltiumMCP\\\\symbol_placement_rules.txt` description as pin placement rules. Please modify for your own preferences.)\\n- Duplicate my selected layout. (Will prompt user to now select destination components. Supports Component, Track, Arc, Via, Polygon, & Region)\\n- Show all my inner layers. Show the top and bottom layer. Turn off solder paste.\\n- Get me all parts on my design made by Molex\\n- Give me the description and part number of U4\\n- Place the selected parts on my pcb with best practices for a switching regulator. Note: It tries, but does terrible placement. Hopefully I can find a way to improve this.\\n- Give me a list of all IC designators in my design\\n- Get me all length matching rules\\n\\n## Setup\\nCurrently only tested on Windows & the Altium scripts have hard coded `C:\\\\AltiumMCP` paths for now. That's probably a good TODO item.\\n\\n1. Clone the repo to `C:\\\\` so you end up with a `C:\\\\AltiumMCP\\\\` directory\\n2. Install uv\\n\\n**On Windows**\\n```bash\\npowershell -c \\\"irm https://astral.sh/uv/install.ps1 | iex\\\" \\n```\\nand then\\n```bash\\nset Path=C:\\\\Users\\\\nntra\\\\.local\\\\bin;%Path%\\n```\\n\\n3. Open cmd in `C:\\\\AltiumMCP\\\\` directory and run `uv sync` to add packages from pyproject.toml file. \\n\\n### Claude for Desktop Integration\\nEnable Developer Mode under Claude > Help > Enable Developer Mode\\n\\nGo to Claude > Settings > Developer > Edit Config > claude_desktop_config.json to include the following:\\nBelow is specific to Windows, TODO: find out how to run on both without a hard coded path\\n```json\\n{\\n    \\\"mcpServers\\\": {\\n        \\\"altium\\\": {\\n            \\\"command\\\": \\\"uv\\\",\\n            \\\"args\\\": [\\n                \\\"--directory\\\",\\n                \\\"C:\\\\\\\\AltiumMCP\\\",\\n                \\\"run\\\",\\n                \\\"server.py\\\"\\n            ]\\n        }\\n    }\\n}\\n```\\n\\n### Using with Claude\\nRestart Claude: Right click on the Claude icon in the System Tray > Quit. Then re-open Claude desktop. \\n\\nOnce the config file has been set on Claude, and the addon is running on Altium, you will see a hammer icon with tools for the Altium MCP.\\n\\n![AltiumMCP in the sidebar](assets/hammer-icon.png)\\n\\n## Configuration\\n\\nWhen launching claude for the first time, the server will automatically try to locate your Altium Designer installation. It will search for all directories that start with `C:\\\\Program Files\\\\Altium\\\\AD*` and use the one with the largest revision number. If it cannot find any, you will be prompted to select the Altium executable (X2.EXE) manually when you first run the server. Altium's DelphiScript scripting is used to create an API between the mcp server and Altium. It expects to find this script project in `C:\\\\AltiumMCP\\\\AltiumScript\\\\`.\\n\\n## Available Tools\\n\\nThe server provides several tools to interact with Altium Designer:\\n\\n### Output Jobs\\n- `get_output_job_containers`: Using currently open .OutJob file, reads all available output containers\\n- `run_output_jobs`: Pass a list of output job container names from the currently open .OutJob to run any number of them. `.OutJob` must be the currently focused document.\\n\\n### Component Information\\n- `get_all_designators`: Get a list of all component designators in the current board\\n- `get_all_component_property_names`: Get a list of all available component property names\\n- `get_component_property_values`: Get the values of a specific property for all components\\n- `get_component_data`: Get detailed data for specific components by designator\\n- `get_component_pins`: Get pin information for specified components\\n\\n### Schematic/Symbol\\n- `get_schematic_data`: Get schematic data for specified components\\n- `create_schematic_symbol` ([YouTube](https://youtu.be/MMP7ZfmbCMI)): Passes pin list with pin type & coordinates to Altium script\\n- `get_symbol_placement_rules`: Create symbol's helper tool that reads `C:\\\\AltiumMCP\\\\symbol_placement_rules.txt` to get pin placement rules for symbol creation.\\n- `get_library_symbol_reference`: Create symbol's helper tool to use an open library symbol as an example to create the symbol\\n\\n![Symbol Creator](assets/symbol_creator.gif)\\n\\n### Layout Operations\\n- `get_all_nets`: Returns a list of unique nets from the pcb\\n- `create_net_class` ([YouTube](https://youtu.be/89booqRbnzQ)): Create a net class from a list of nets\\n- `get_pcb_layers`: Get detailed layer information including electrical, mechanical, layer pairs, \\n[...truncated for length...]\", \"tools\": [{\"name\": \"get_output_job_containers\", \"description\": \"Using currently open .OutJob file, reads all available output containers\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"run_output_jobs\", \"description\": \"Pass a list of output job container names from the currently open .OutJob to run any number of them. `.OutJob` must be the currently focused document.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for run_output_jobs\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"get_all_designators\", \"description\": \"Get a list of all component designators in the current board\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_all_designators\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_all_component_property_names\", \"description\": \"Get a list of all available component property names\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_all_component_property_names\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_component_property_values\", \"description\": \"Get the values of a specific property for all components\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"amount\": {\"type\": \"number\", \"description\": \"Numeric amount or value\"}}, \"required\": [\"amount\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_component_data\", \"description\": \"Get detailed data for specific components by designator\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_component_data\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_component_pins\", \"description\": \"Get pin information for specified components\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_component_pins\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_schematic_data\", \"description\": \"Get schematic data for specified components\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_schematic_data\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"create_schematic_symbol\", \"description\": \"([YouTube](https://youtu.be/MMP7ZfmbCMI)): Passes pin list with pin type & coordinates to Altium script\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for create_schematic_symbol\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"get_symbol_placement_rules\", \"description\": \"Create symbol's helper tool that reads `C:\\\\AltiumMCP\\\\symbol_placement_rules.txt` to get pin placement rules for symbol creation.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_symbol_placement_rules\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"get_library_symbol_reference\", \"description\": \"Create symbol's helper tool to use an open library symbol as an example to create the symbol\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_library_symbol_reference\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"get_all_nets\", \"description\": \"Returns a list of unique nets from the pcb\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_all_nets\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"create_net_class\", \"description\": \"([YouTube](https://youtu.be/89booqRbnzQ)): Create a net class from a list of nets\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for create_net_class\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"get_pcb_layers\", \"description\": \"Get detailed layer information including electrical, mechanical, layer pairs, etc.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_pcb_layers\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_pcb_layer_stackup\", \"description\": \"Gets stackup info like dielectric, layer thickness, etc.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_pcb_layer_stackup\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"set_pcb_layer_visibility\", \"description\": \"([YouTube](https://youtu.be/XaWs5A6-h30)): Turn on or off any group of layers. For example turn on inner layers. Turn off silk.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for set_pcb_layer_visibility\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"get_pcb_rules\", \"description\": \"Gets the rule descriptions for all pcb rules in layout.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_pcb_rules\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_selected_components_coordinates\", \"description\": \"Get position and rotation information for currently selected components\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_selected_components_coordinates\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"move_components\", \"description\": \"Move specified components by X and Y offsets\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for move_components\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"layout_duplicator\", \"description\": \"([YouTube](https://youtu.be/HD-A_8iVV70)): Starts layout duplication assuming you have already selected the source components on the PCB.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for layout_duplicator\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"layout_duplicator_apply\", \"description\": \"Action #2 of `layout_duplicator`. Agent will use part info automatically to predict the match between source and destination components, then will send those matches to the place script.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for layout_duplicator_apply\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"get_screenshot\", \"description\": \"Take a screenshot of the Altium PCB window or Schematic Window that is the current view. It should auto focus either of these if it is open but a different document type is focused. Note: Claude is not very good at analyzing images like circuits or layout screenshots. ChatGPT is very good at it, but they haven't released MCP yet, so this functionality will be more useful in the future.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_screenshot\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_server_status\", \"description\": \"Check the status of the MCP server, including paths to Altium and script files\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 23, \"homepage\": \"\", \"url\": \"https://github.com/coffeenmusic/altium-mcp\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "coffeenmusic/altium-mcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"remote-mcp-server-demo\", \"server_id\": \"elithrar/remote-mcp-server-demo\", \"description\": \"\", \"readme\": \"# Remote MCP Server on Cloudflare\\n\\nLet's get a remote MCP server up-and-running on Cloudflare Workers complete with OAuth login!\\n\\n## Develop locally\\n\\n```bash\\n# clone the repository\\ngit clone git@github.com:cloudflare/ai.git\\n\\n# install dependencies\\ncd ai\\nnpm install\\n\\n# run locally\\nnpx nx dev remote-mcp-server\\n```\\n\\nYou should be able to open [`http://localhost:8787/`](http://localhost:8787/) in your browser\\n\\n## Connect the MCP inspector to your server\\n\\nTo explore your new MCP api, you can use the [MCP Inspector](https://modelcontextprotocol.io/docs/tools/inspector).\\n\\n- Start it with `npx @modelcontextprotocol/inspector`\\n- [Within the inspector](http://localhost:5173), switch the Transport Type to `SSE` and enter `http://localhost:8787/sse` as the URL of the MCP server to connect to, and click \\\"Connect\\\"\\n- You will navigate to a (mock) user/password login screen. Input any email and pass to login.\\n- You should be redirected back to the MCP Inspector and you can now list and call any defined tools!\\n\\n<div align=\\\"center\\\">\\n  <img src=\\\"img/mcp-inspector-sse-config.png\\\" alt=\\\"MCP Inspector with the above config\\\" width=\\\"600\\\"/>\\n</div>\\n\\n<div align=\\\"center\\\">\\n  <img src=\\\"img/mcp-inspector-successful-tool-call.png\\\" alt=\\\"MCP Inspector with after a tool call\\\" width=\\\"600\\\"/>\\n</div>\\n\\n## Connect Claude Desktop to your local MCP server\\n\\nThe MCP inspector is great, but we really want to connect this to Claude! Follow [Anthropic's Quickstart](https://modelcontextprotocol.io/quickstart/user) and within Claude Desktop go to Settings > Developer > Edit Config to find your configuration file.\\n\\nOpen the file in your text editor and replace it with this configuration:\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"math\\\": {\\n      \\\"command\\\": \\\"npx\\\",\\n      \\\"args\\\": [\\n        \\\"mcp-remote\\\",\\n        \\\"http://localhost:8787/sse\\\"\\n      ]\\n    }\\n  }\\n}\\n```\\n\\nThis will run a local proxy and let Claude talk to your MCP server over HTTP\\n\\nWhen you open Claude a browser window should open and allow you to login. You should see the tools available in the bottom right. Given the right prompt Claude should ask to call the tool.\\n\\n<div align=\\\"center\\\">\\n  <img src=\\\"img/available-tools.png\\\" alt=\\\"Clicking on the hammer icon shows a list of available tools\\\" width=\\\"600\\\"/>\\n</div>\\n\\n<div align=\\\"center\\\">\\n  <img src=\\\"img/claude-does-math-the-fancy-way.png\\\" alt=\\\"Claude answers the prompt 'I seem to have lost my calculator and have run out of fingers. Could you use the math tool to add 23 and 19?' by invoking the MCP add tool\\\" width=\\\"600\\\"/>\\n</div>\\n\\n## Deploy to Cloudflare\\n\\n1. `npx wrangler kv namespace create OAUTH_KV`\\n2. Follow the guidance to add the kv namespace ID to `wrangler.jsonc`\\n3. `npm run deploy`\\n\\n## Call your newly deployed remote MCP server from a remote MCP client\\n\\nJust like you did above in \\\"Develop locally\\\", run the MCP inspector:\\n\\n`npx @modelcontextprotocol/inspector@latest`\\n\\nThen enter the `workers.dev` URL (ex: `worker-name.account-name.workers.dev/sse`) of your Worker in the inspector as the URL of the MCP server to connect to, and click \\\"Connect\\\".\\n\\nYou've now connected to your MCP server from a remote MCP client.\\n\\n## Connect Claude Desktop to your remote MCP server\\n\\nUpdate the Claude configuration file to point to your `workers.dev` URL (ex: `worker-name.account-name.workers.dev/sse`) and restart Claude \\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"math\\\": {\\n      \\\"command\\\": \\\"npx\\\",\\n      \\\"args\\\": [\\n        \\\"mcp-remote\\\",\\n        \\\"https://worker-name.account-name.workers.dev/sse\\\"\\n      ]\\n    }\\n  }\\n}\\n```\\n\\n## Debugging\\n\\nShould anything go wrong it can be helpful to restart Claude, or to try connecting directly to your\\nMCP server on the command line with the following command.\\n\\n```bash\\nnpx mcp-remote http://localhost:8787/sse\\n```\\n\\nIn some rare cases it may help to clear the files added to `~/.mcp-auth`\\n\\n```bash\\nrm -rf ~/.mcp-auth\\n```\\n\", \"tools\": [{\"name\": \"SSE\", \"description\": \"and enter `http://localhost:8787/sse` as the URL of the MCP server to connect to, and click \\\"Connect\\\"\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"URL or link to process\"}}, \"required\": [\"url\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 1, \"homepage\": \"\", \"url\": \"https://github.com/elithrar/remote-mcp-server-demo\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "elithrar/remote-mcp-server-demo", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"jira-mcp-server\", \"server_id\": \"kornbed/jira-mcp-server\", \"description\": \"A TypeScript-based MCP server for Jira integration with Cursor\", \"readme\": \"<!-- markdownlint-disable MD029 -->\\n# Jira MCP Server for Cursor\\n\\n[![smithery badge](https://smithery.ai/badge/@kornbed/jira-mcp-server)](https://smithery.ai/server/@kornbed/jira-mcp-server)\\nA TypeScript-based MCP server that integrates with Jira, allowing Cursor to interact with Jira tickets.\\n\\n<a href=\\\"https://glama.ai/mcp/servers/@kornbed/jira-mcp-server\\\">\\n  <img width=\\\"380\\\" height=\\\"200\\\" src=\\\"https://glama.ai/mcp/servers/@kornbed/jira-mcp-server/badge\\\" alt=\\\"Jira Server for Cursor MCP server\\\" />\\n</a>\\n\\n## Features\\n\\n- List Jira tickets\\n- Get ticket details\\n- Get ticket comments\\n- Create new tickets\\n- Add comments to tickets\\n- Update ticket status\\n- Full MCP protocol support for Cursor integration\\n\\n## Setup\\n\\n### Installing via Smithery\\n\\nTo install Jira MCP Server for Cursor for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@kornbed/jira-mcp-server):\\n\\n```bash\\nnpx -y @smithery/cli install @kornbed/jira-mcp-server --client claude\\n```\\n\\n1. Install dependencies:\\n\\n```bash\\nnpm install\\n```\\n\\n2. Create a `.env` file based on `.env.example` and fill in your Jira credentials:\\n\\n```env\\nJIRA_HOST=https://your-domain.atlassian.net\\nJIRA_EMAIL=your-email@example.com\\nJIRA_API_TOKEN=your-api-token\\nPORT=3000\\n```\\n\\nTo get your Jira API token:\\n\\n1. Log in to <https://id.atlassian.com/manage/api-tokens>\\n2. Click \\\"Create API token\\\"\\n3. Copy the token and paste it in your `.env` file\\n\\n## Development\\n\\nRun the development server:\\n\\n```bash\\nnpm run dev\\n```\\n\\n## Build and Run\\n\\nBuild the project:\\n\\n```bash\\nnpm run build\\n```\\n\\nStart the server:\\n\\n```bash\\nnpm start\\n```\\n\\n## Cursor Integration\\n\\nTo use this MCP server with Cursor, you have two options:\\n\\n### Option 1: Command-based Integration (Recommended)\\n\\n1. Build the project:\\n\\n```bash\\nnpm run build\\n```\\n\\n2. Open Cursor's settings:\\n   - Click on the Cursor menu\\n   - Select \\\"Settings\\\" (or use the keyboard shortcut)\\n   - Navigate to the \\\"Extensions\\\" or \\\"Integrations\\\" section\\n\\n3. Add the MCP configuration:\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"jira\\\": {\\n      \\\"command\\\": \\\"node\\\",\\n      \\\"args\\\": [\\\"/path/to/jira-mcp-cursor/dist/server.js\\\"]\\n    }\\n  }\\n}\\n```\\n\\nReplace `/path/to/jira-mcp-cursor` with the absolute path to your project.\\n\\n### Option 2: HTTP-based Integration (Alternative)\\n\\n1. Start the MCP server (if not already running):\\n\\n```bash\\nnpm start\\n```\\n\\n2. Open Cursor's settings:\\n   * Click on the Cursor menu\\n   * Select \\\"Settings\\\" (or use the keyboard shortcut)\\n   * Navigate to the \\\"Extensions\\\" or \\\"Integrations\\\" section\\n\\n3. Add the MCP configuration:\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"jira\\\": {\\n      \\\"url\\\": \\\"http://localhost:3000\\\",\\n      \\\"capabilities\\\": [\\n        \\\"list_tickets\\\",\\n        \\\"get_ticket\\\",\\n        \\\"get_comments\\\",\\n        \\\"create_ticket\\\",\\n        \\\"update_status\\\",\\n        \\\"add_comment\\\"\\n      ]\\n    }\\n  }\\n}\\n}\\n```\\n\\n## Using Jira in Cursor\\n\\nAfter configuring the MCP server, you can use Jira commands directly in Cursor:\\n\\n- `/jira list` - List your tickets\\n- `/jira view TICKET-123` - View ticket details\\n- `/jira comments TICKET-123` - Get ticket comments\\n- `/jira create` - Create a new ticket\\n- `/jira comment TICKET-123` - Add a comment\\n- `/jira status TICKET-123` - Update ticket status\\n\\n## MCP Protocol Support\\n\\nThe server implements the Model-Client-Protocol (MCP) required by Cursor:\\n\\n- Stdio communication for command-based integration\\n- Tool registration for Jira operations\\n\\n## API Endpoints\\n\\n### List Tickets\\n\\nRetrieves a list of Jira tickets, optionally filtered by a JQL query.\\n\\n**Endpoint:** `GET /api/tickets`\\n\\n**Query Parameters:**\\n\\n| Parameter | Type | Required | Description |\\n|-----------|------|----------|-------------|\\n| jql | string | No | Jira Query Language (JQL) string to filter tickets |\\n\\n**Example Request:**\\n\\n```http\\nGET /api/tickets?jql=project=TEST+AND+status=Open\\n```\\n\\n**Example Response:**\\n\\n```text\\nTEST-123: Example ticket (Open)\\nTEST-124: Another ticket (In Progress)\\n```\\n\\n### Get Ticket\\n\\nRetrieves detailed information about a specific ticket.\\n\\n**Endpoint:** `GET /api/tickets/:id`\\n\\n**Path Parameters:**\\n\\n| Parameter | Type | Required | Description |\\n|-----------|------|----------|-------------|\\n| id | string | Yes | The Jira ticket ID (e.g., TEST-123) |\\n\\n**Example Request:**\\n\\n```http\\nGET /api/tickets/TEST-123\\n```\\n\\n**Example Response:**\\n\\n```text\\nKey: TEST-123\\nSummary: Example ticket\\nStatus: Open\\nType: Task\\nDescription:\\nDetailed ticket description\\n```\\n\\n### Get Ticket Comments\\n\\nRetrieves all comments for a specific ticket.\\n\\n**Endpoint:** `GET /api/tickets/:id/comments`\\n\\n**Path Parameters:**\\n\\n| Parameter | Type | Required | Description |\\n|-----------|------|----------|-------------|\\n| id | string | Yes | The Jira ticket ID (e.g., TEST-123) |\\n\\n**Example Request:**\\n\\n```http\\nGET /api/tickets/TEST-123/comments\\n```\\n\\n**Example Response:**\\n\\n```text\\n[3/20/2024, 10:00:00 AM] John Doe:\\nComment text\\n---\\n\\n[3/20/2024, 9:30:00 AM] Jane Smith:\\nAnother comment\\n---\\n```\\n\\n### Create Ticket\\n\\nCreates a new Jira ticket.\\n\\n**Endpoint:** `POST /api/tickets`\\n\\n**Request Body:**\\n\\n| Parameter | Type | R\\n[...truncated for length...]\", \"tools\": [], \"tools_count\": 0, \"homepage\": \"\", \"url\": \"https://github.com/kornbed/jira-mcp-server\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "kornbed/jira-mcp-server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"hass-mcp\", \"server_id\": \"voska/hass-mcp\", \"description\": \"Docker-ready MCP server for Home Assistant with entity management, domain summaries, automation support, and guided conversations. Includes pre-built container images for easy installation.\", \"readme\": \"# Hass-MCP\\n\\nA Model Context Protocol (MCP) server for Home Assistant integration with Claude and other LLMs.\\n\\n## Overview\\n\\nHass-MCP enables AI assistants like Claude to interact directly with your Home Assistant instance, allowing them to:\\n\\n- Query the state of devices and sensors\\n- Control lights, switches, and other entities\\n- Get summaries of your smart home\\n- Troubleshoot automations and entities\\n- Search for specific entities\\n- Create guided conversations for common tasks\\n\\n## Screenshots\\n\\n<img width=\\\"700\\\" alt=\\\"Screenshot 2025-03-16 at 15 48 01\\\" src=\\\"https://github.com/user-attachments/assets/5f9773b4-6aef-4139-a978-8ec2cc8c0aea\\\" />\\n<img width=\\\"400\\\" alt=\\\"Screenshot 2025-03-16 at 15 50 59\\\" src=\\\"https://github.com/user-attachments/assets/17e1854a-9399-4e6d-92cf-cf223a93466e\\\" />\\n<img width=\\\"400\\\" alt=\\\"Screenshot 2025-03-16 at 15 49 26\\\" src=\\\"https://github.com/user-attachments/assets/4565f3cd-7e75-4472-985c-7841e1ad6ba8\\\" />\\n\\n## Features\\n\\n- **Entity Management**: Get states, control devices, and search for entities\\n- **Domain Summaries**: Get high-level information about entity types\\n- **Automation Support**: List and control automations\\n- **Guided Conversations**: Use prompts for common tasks like creating automations\\n- **Smart Search**: Find entities by name, type, or state\\n- **Token Efficiency**: Lean JSON responses to minimize token usage\\n\\n## Installation\\n\\n### Prerequisites\\n\\n- Home Assistant instance with Long-Lived Access Token\\n- One of the following:\\n  - Docker (recommended)\\n  - Python 3.13+ and [uv](https://github.com/astral-sh/uv)\\n\\n## Setting Up With Claude Desktop\\n\\n### Docker Installation (Recommended)\\n\\n1. Pull the Docker image:\\n\\n   ```bash\\n   docker pull voska/hass-mcp:latest\\n   ```\\n\\n2. Add the MCP server to Claude Desktop:\\n\\n   a. Open Claude Desktop and go to Settings\\n   b. Navigate to Developer > Edit Config\\n   c. Add the following configuration to your `claude_desktop_config.json` file:\\n\\n   ```json\\n   {\\n     \\\"mcpServers\\\": {\\n       \\\"hass-mcp\\\": {\\n         \\\"command\\\": \\\"docker\\\",\\n         \\\"args\\\": [\\n           \\\"run\\\",\\n           \\\"-i\\\",\\n           \\\"--rm\\\",\\n           \\\"-e\\\",\\n           \\\"HA_URL\\\",\\n           \\\"-e\\\",\\n           \\\"HA_TOKEN\\\",\\n           \\\"voska/hass-mcp\\\"\\n         ],\\n         \\\"env\\\": {\\n           \\\"HA_URL\\\": \\\"http://homeassistant.local:8123\\\",\\n           \\\"HA_TOKEN\\\": \\\"YOUR_LONG_LIVED_TOKEN\\\"\\n         }\\n       }\\n     }\\n   }\\n   ```\\n\\n   d. Replace `YOUR_LONG_LIVED_TOKEN` with your actual Home Assistant long-lived access token\\n   e. Update the `HA_URL`:\\n\\n   - If running Home Assistant on the same machine: use `http://host.docker.internal:8123` (Docker Desktop on Mac/Windows)\\n   - If running Home Assistant on another machine: use the actual IP or hostname\\n\\n   f. Save the file and restart Claude Desktop\\n\\n3. The \\\"Hass-MCP\\\" tool should now appear in your Claude Desktop tools menu\\n\\n> **Note**: If you're running Home Assistant in Docker on the same machine, you may need to add `--network host` to the Docker args for the container to access Home Assistant. Alternatively, use the IP address of your machine instead of `host.docker.internal`.\\n\\n## Other MCP Clients\\n\\n### Cursor\\n\\n1. Go to Cursor Settings > MCP > Add New MCP Server\\n2. Fill in the form:\\n   - Name: `Hass-MCP`\\n   - Type: `command`\\n   - Command:\\n     ```\\n     docker run -i --rm -e HA_URL=http://homeassistant.local:8123 -e HA_TOKEN=YOUR_LONG_LIVED_TOKEN voska/hass-mcp\\n     ```\\n   - Replace `YOUR_LONG_LIVED_TOKEN` with your actual Home Assistant token\\n   - Update the HA_URL to match your Home Assistant instance address\\n3. Click \\\"Add\\\" to save\\n\\n### Claude Code (CLI)\\n\\nTo use with Claude Code CLI, you can add the MCP server directly using the `mcp add` command:\\n\\n**Using Docker (recommended):**\\n\\n```bash\\nclaude mcp add hass-mcp -e HA_URL=http://homeassistant.local:8123 -e HA_TOKEN=YOUR_LONG_LIVED_TOKEN -- docker run -i --rm -e HA_URL -e HA_TOKEN voska/hass-mcp\\n```\\n\\nReplace `YOUR_LONG_LIVED_TOKEN` with your actual Home Assistant token and update the HA_URL to match your Home Assistant instance address.\\n\\n## Usage Examples\\n\\nHere are some examples of prompts you can use with Claude once Hass-MCP is set up:\\n\\n- \\\"What's the current state of my living room lights?\\\"\\n- \\\"Turn off all the lights in the kitchen\\\"\\n- \\\"List all my sensors that contain temperature data\\\"\\n- \\\"Give me a summary of my climate entities\\\"\\n- \\\"Create an automation that turns on the lights at sunset\\\"\\n- \\\"Help me troubleshoot why my bedroom motion sensor automation isn't working\\\"\\n- \\\"Search for entities related to my living room\\\"\\n\\n## Available Tools\\n\\nHass-MCP provides several tools for interacting with Home Assistant:\\n\\n- `get_version`: Get the Home Assistant version\\n- `get_entity`: Get the state of a specific entity with optional field filtering\\n- `entity_action`: Perform actions on entities (turn on, off, toggle)\\n- `list_entities`: Get a list of entities with optional domain filtering and search\\n- `search_entities_tool`: Search for entities matching a query\\n- `domain_summary_tool`: Get a summary of a domain's entities\\n[...truncated for length...]\", \"tools\": [{\"name\": \"YOUR_LONG_LIVED_TOKEN\", \"description\": \"with your actual Home Assistant long-lived access token\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for YOUR_LONG_LIVED_TOKEN\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"HA_URL\", \"description\": \"- If running Home Assistant on the same machine: use `http://host.docker.internal:8123` (Docker Desktop on Mac/Windows)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"URL or link to process\"}}, \"required\": [\"url\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"command\", \"description\": \"- Command:\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for command\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_version\", \"description\": \"Get the Home Assistant version\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_version\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_entity\", \"description\": \"Get the state of a specific entity with optional field filtering\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_entity\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"entity_action\", \"description\": \"Perform actions on entities (turn on, off, toggle)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for entity_action\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"list_entities\", \"description\": \"Get a list of entities with optional domain filtering and search\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}}, \"required\": [\"query\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"search_entities_tool\", \"description\": \"Search for entities matching a query\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}}, \"required\": [\"query\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"domain_summary_tool\", \"description\": \"Get a summary of a domain's entities\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for domain_summary_tool\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"list_automations\", \"description\": \"Get a list of all automations\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for list_automations\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"call_service_tool\", \"description\": \"Call any Home Assistant service\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for call_service_tool\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"restart_ha\", \"description\": \"Restart Home Assistant\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for restart_ha\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"get_history\", \"description\": \"Get the state history of an entity\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_history\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_error_log\", \"description\": \"Get the Home Assistant error log\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_error_log\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"create_automation\", \"description\": \"Guide for creating Home Assistant automations based on trigger type\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for create_automation\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"debug_automation\", \"description\": \"Troubleshooting help for automations that aren't working\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for debug_automation\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"troubleshoot_entity\", \"description\": \"Diagnose issues with entities\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for troubleshoot_entity\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"routine_optimizer\", \"description\": \"Analyze usage patterns and suggest optimized routines based on actual behavior\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for routine_optimizer\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"automation_health_check\", \"description\": \"Review all automations, find conflicts, redundancies, or improvement opportunities\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}}, \"required\": [\"query\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"entity_naming_consistency\", \"description\": \"Audit entity names and suggest standardization improvements\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for entity_naming_consistency\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"dashboard_layout_generator\", \"description\": \"Create optimized dashboards based on user preferences and usage patterns\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for dashboard_layout_generator\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}], \"tools_count\": 21, \"homepage\": \"\", \"url\": \"https://github.com/voska/hass-mcp\", \"topics\": [\"home-assistant\", \"home-automation\", \"mcp\", \"mcp-server\"], \"data_sources\": [\"github\", \"official\"]}", "target": "", "id": "voska/hass-mcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"GlutamateMCPServers\", \"server_id\": \"shadowclonelabs/glutamatemcpservers\", \"description\": \"Glutamate is a powerful desktop platform that simplifies the deployment and management of Model Context Protocol servers. It provides a user-friendly interface and robust tools for server administration, making it easier than ever to run and customize your MCP servers.\", \"readme\": \"<div align=\\\"center\\\">\\n  <a href=\\\"https://discord.gg/6fXp2yTbMd\\\" style=\\\"display: inline-block; border-radius: 10px; overflow: hidden;\\\">\\n    <img src=\\\"https://img.shields.io/badge/Join%20Our%20Discord-7289DA?style=for-the-badge&logo=discord&logoColor=white&rounded=true\\\" alt=\\\"Join Our Discord\\\" width=\\\"200\\\"/>\\n  </a>\\n</div>\\n\\n# Glutamate MCP Servers\\n\\nWelcome to the Glutamate MCP Servers repository! This project contains a collection of MCPs (Model Context Protocol) servers that are made by gluamate team can be easily deployed and managed through the Glutamate platform. We support all stdio and sse servers by any creators.\\n\\n## \\ud83c\\udfa5 Introduction Video\\n\\n<div align=\\\"center\\\">\\n  <img src=\\\"./assets\\\\GlutamateIntro__.gif\\\" alt=\\\"Glutamate Intro GIF\\\" width=\\\"600\\\" style=\\\"max-width: 100%; height: auto; display: block; margin: 0 auto;\\\"/>\\n  \\n  <p align=\\\"center\\\">\\n    <a href=\\\"https://youtu.be/yZtfWB56ACE\\\" style=\\\"display: inline-block; border-radius: 10px; overflow: hidden;\\\">\\n      <img src=\\\"https://img.shields.io/badge/Watch%20on%20YouTube-FF0000?style=for-the-badge&logo=youtube&logoColor=white&rounded=true\\\" alt=\\\"Watch on YouTube\\\" width=\\\"180\\\"/>\\n    </a>\\n  </p>\\n</div>\\n\\n## About Glutamate\\n\\n[Glutamate](https://glutamateapp.com) is a powerful desktop platform that simplifies the deployment and management of Model Context Protocol servers. It provides a user-friendly interface and robust tools for server administration, making it easier than ever to run and customize your MCP servers.\\n\\nKey Features:\\n\\n- \\ud83d\\udd12 All keys are securely stored locally\\n- \\u26a1 Install & Start/Stop MCP servers on your local machine\\n- \\ud83d\\udcbb Full support for both stdio & SSE protocols\\n- \\ud83d\\udce6 No Node.js installation required on your system\\n- \\ud83c\\udf81 100% free to use , now and forever\\n- Avaible on Windows , Linux and Mac (coming soon)\\n\\n## Road Map:\\n\\n- [x] Auto Sync (server config and port) with any client (cursor , windsurf , cline , roocode etc..) (Added in v0.0.5)\\n- [ ] Auto start of mcp severs on start of glutamate (based on user settings)\\n- [ ] Oath login for mcps to fetch api keys\\n- [ ] Versioning of MCP servers for easier management and updates\\n- [ ] User submission of servers\\n- [ ] Direct Updater of Glutamate\\n\\n## Custom Made Servers\\n\\nOur repository includes several custom MCP servers that are created by Glutamate Team , We support all stdio and sse server that are node based on our glutamate app\\n\\n### UI Assist\\n\\nLocated in the `src/uiassist` directory, UI Assist is a specialized server that provides enhanced user interface capabilities for MCP servers. It offers:\\n\\n- Custom UI components\\n- Improved user experience\\n- Streamlined navigation\\n- Modern interface design\\n\\nMore servers will be added to this repository in the future, expanding the available options for MCP administrators.\\n\\n## Getting Started\\n\\n1. Visit [glutamateapp.com](https://glutamateapp.com)\\n2. Download the app\\n3. Choose your desired MCP server from the available options\\n4. Click to install and just connect\\n\\n## Available MCP Servers (adding more everyday )\\n\\nFor a comprehensive list of available MCP servers and their descriptions, please see our [SERVERS.md](SERVERS.md) file.\\n\\n## Contributing\\n\\nWe welcome contributions to improve our MCP servers. Please feel free to submit pull requests, report issues, or suggest new features.\\n\\n## Glutamate App Integration\\n\\nTo integrate your MCP server with the Glutamate app, you need to create a metadata file that describes your server's capabilities. This helps the Glutamate app understand and properly integrate with your MCP server.\\n\\n### Important Note for SSE Servers\\n\\nAll SSE-type MCP servers must accept the `--port` command line argument to be supported in the Glutamate app. This allows the Glutamate app to dynamically assign ports and manage multiple server instances. Make sure your server implementation includes this functionality.\\n\\n### Important Note for Connection Type\\n\\nThe `connectionType` field in the metadata file must be specified in lowercase. Only two values are supported:\\n\\n- `\\\"sse\\\"` for Server-Sent Events\\n- `\\\"stdio\\\"` for Standard Input/Output\\n\\nAny other value or capitalization will not be recognized by the Glutamate app.\\n\\n### Creating Metadata File\\n\\nCreate a file named `glutamate.json` in your project root with the following structure:\\n\\n```json\\n{\\n  \\\"name\\\": \\\"UI Assist MCP Server\\\",\\n  \\\"description\\\": \\\"A Model Context Protocol (MCP) server that connects with the UI Assist Chrome extension to help with UI-based input in web development\\\",\\n  \\\"version\\\": \\\"0.1.0\\\",\\n  \\\"releaseDate\\\": \\\"YYYY-MM-DD\\\",\\n  \\\"author\\\": \\\"Your Name or Organization\\\",\\n  \\\"license\\\": \\\"MIT\\\",\\n  \\\"repositoryUrl\\\": \\\"https://github.com/username/repository\\\",\\n  \\\"implementationLanguage\\\": \\\"JavaScript\\\",\\n  \\\"connectionType\\\": \\\"sse\\\",\\n  \\\"runtimeRequirements\\\": \\\"Node.js\\\",\\n  \\\"packageName\\\": \\\"@glutamateapp/ui-assist\\\",\\n  \\\"color\\\": \\\"#HEXCOLOR\\\",\\n  \\\"tools\\\": [\\n    {\\n      \\\"name\\\": \\\"get_selected_elements\\\",\\n      \\\"description\\\": \\\"Retrieves HTML elements that have been selected in the browser\\\"\\n    },\\n    {\\n      \\\"name\\\": \\\"clear_selected_elements\\\",\\n      \\\"de\\n[...truncated for length...]\", \"tools\": [{\"name\": \"connectionType\", \"description\": \"field in the metadata file must be specified in lowercase. Only two values are supported:\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}, \"amount\": {\"type\": \"number\", \"description\": \"Numeric amount or value\"}}, \"required\": [\"file_path\", \"amount\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 1, \"homepage\": \"https://glutamateapp.com/\", \"url\": \"https://github.com/ShadowCloneLabs/GlutamateMCPServers\", \"topics\": [\"desktop-app\", \"free\", \"linux\", \"macos\", \"mcp\", \"mcpservers\", \"windows\"], \"data_sources\": [\"github\"]}", "target": "", "id": "shadowclonelabs/glutamatemcpservers", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"dbhub\", \"server_id\": \"bytebase/dbhub\", \"description\": \"Universal database MCP server connecting to MySQL, PostgreSQL, SQLite, DuckDB and etc.\", \"readme\": \"<p align=\\\"center\\\">\\n<a href=\\\"https://dbhub.ai/\\\" target=\\\"_blank\\\">\\n<picture>\\n  <img src=\\\"https://raw.githubusercontent.com/bytebase/dbhub/main/resources/images/logo-full.webp\\\" width=\\\"50%\\\">\\n</picture>\\n</a>\\n</p>\\n\\n<p align=\\\"center\\\">\\n  <a href=\\\"https://cursor.com/install-mcp?name=dbhub&config=eyJjb21tYW5kIjoibnB4IEBieXRlYmFzZS9kYmh1YiIsImVudiI6eyJUUkFOU1BPUlQiOiJzdGRpbyIsIkRTTiI6InBvc3RncmVzOi8vdXNlcjpwYXNzd29yZEBsb2NhbGhvc3Q6NTQzMi9kYm5hbWU%2Fc3NsbW9kZT1kaXNhYmxlIiwiUkVBRE9OTFkiOiJ0cnVlIn19\\\"><img src=\\\"https://cursor.com/deeplink/mcp-install-dark.svg\\\" alt=\\\"Add dbhub MCP server to Cursor\\\" height=\\\"32\\\" /></a>\\n  <a href=\\\"https://discord.gg/BjEkZpsJzn\\\"><img src=\\\"https://img.shields.io/badge/%20-Hang%20out%20on%20Discord-5865F2?style=for-the-badge&logo=discord&labelColor=EEEEEE\\\" alt=\\\"Join our Discord\\\" height=\\\"32\\\" /></a>\\n</p>\\n\\nDBHub is a universal database gateway implementing the Model Context Protocol (MCP) server interface. This gateway allows MCP-compatible clients to connect to and explore different databases.\\n\\n```bash\\n +------------------+    +--------------+    +------------------+\\n |                  |    |              |    |                  |\\n |                  |    |              |    |                  |\\n |  Claude Desktop  +--->+              +--->+    PostgreSQL    |\\n |                  |    |              |    |                  |\\n |  Cursor          +--->+    DBHub     +--->+    SQL Server    |\\n |                  |    |              |    |                  |\\n |  Other Clients   +--->+              +--->+    SQLite        |\\n |                  |    |              |    |                  |\\n |                  |    |              +--->+    MySQL         |\\n |                  |    |              |    |                  |\\n |                  |    |              +--->+    MariaDB       |\\n |                  |    |              |    |                  |\\n |                  |    |              +--->+    Oracle        |\\n |                  |    |              |    |                  |\\n +------------------+    +--------------+    +------------------+\\n      MCP Clients           MCP Server             Databases\\n```\\n\\n## Demo HTTP Endpoint\\n\\nhttps://demo.dbhub.ai/message connects a [sample employee database](https://github.com/bytebase/employee-sample-database). You can point Cursor or MCP Inspector to it to see it in action.\\n\\n![mcp-inspector](https://raw.githubusercontent.com/bytebase/dbhub/main/resources/images/mcp-inspector.webp)\\n\\n## Supported Matrix\\n\\n### Database Resources\\n\\n| Resource Name               | URI Format                                             | PostgreSQL | MySQL | MariaDB | SQL Server | SQLite | Oracle |\\n| --------------------------- | ------------------------------------------------------ | :--------: | :---: | :-----: | :--------: | :----: | :----: |\\n| schemas                     | `db://schemas`                                         |     \\u2705     |  \\u2705   |   \\u2705    |     \\u2705     |   \\u2705   |   \\u2705   |\\n| tables_in_schema            | `db://schemas/{schemaName}/tables`                     |     \\u2705     |  \\u2705   |   \\u2705    |     \\u2705     |   \\u2705   |   \\u2705   |\\n| table_structure_in_schema   | `db://schemas/{schemaName}/tables/{tableName}`         |     \\u2705     |  \\u2705   |   \\u2705    |     \\u2705     |   \\u2705   |   \\u2705   |\\n| indexes_in_table            | `db://schemas/{schemaName}/tables/{tableName}/indexes` |     \\u2705     |  \\u2705   |   \\u2705    |     \\u2705     |   \\u2705   |   \\u2705   |\\n| procedures_in_schema        | `db://schemas/{schemaName}/procedures`                 |     \\u2705     |  \\u2705   |   \\u2705    |     \\u2705     |   \\u274c   |   \\u2705   |\\n| procedure_details_in_schema | `db://schemas/{schemaName}/procedures/{procedureName}` |     \\u2705     |  \\u2705   |   \\u2705    |     \\u2705     |   \\u274c   |   \\u2705   |\\n\\n### Database Tools\\n\\n| Tool            | Command Name      | Description                                                         | PostgreSQL | MySQL | MariaDB | SQL Server | SQLite | Oracle |\\n| --------------- | ----------------- | ------------------------------------------------------------------- | :--------: | :---: | :-----: | :--------: | ------ | :----: |\\n| Execute SQL     | `execute_sql`     | Execute single or multiple SQL statements (separated by semicolons) |     \\u2705     |  \\u2705   |   \\u2705    |     \\u2705     | \\u2705     |   \\u2705   |\\n\\n### Prompt Capabilities\\n\\n| Prompt              | Command Name   | PostgreSQL | MySQL | MariaDB | SQL Server | SQLite | Oracle |\\n| ------------------- | -------------- | :--------: | :---: | :-----: | :--------: | ------ | :----: |\\n| Generate SQL        | `generate_sql` |     \\u2705     |  \\u2705   |   \\u2705    |     \\u2705     | \\u2705     |   \\u2705   |\\n| Explain DB Elements | `explain_db`   |     \\u2705     |  \\u2705   |   \\u2705    |     \\u2705     | \\u2705     |   \\u2705   |\\n\\n## Installation\\n\\n### Docker\\n\\n```bash\\n# PostgreSQL example\\ndocker run --rm --init \\\\\\n   --name dbhub \\\\\\n   --publish 8080:8080 \\\\\\n   bytebase/dbhub \\\\\\n   --transport http \\\\\\n   --port 8080 \\\\\\n   --dsn \\\"postgres://user:password@localhost:5432/dbname?sslmode=disable\\\"\\n```\\n\\n```bash\\n# Demo mode with sample employee database\\ndocker run --rm --init \\\\\\n   --name dbhub \\\\\\n[...truncated for length...]\", \"tools\": [{\"name\": \"execute_sql\", \"description\": \"| Execute single or multiple SQL statements (separated by semicolons) |     \\u2705     |  \\u2705   |   \\u2705    |     \\u2705     | \\u2705     |   \\u2705   |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for execute_sql\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"generate_sql\", \"description\": \"|     \\u2705     |  \\u2705   |   \\u2705    |     \\u2705     | \\u2705     |   \\u2705   |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for generate_sql\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"explain_db\", \"description\": \"|     \\u2705     |  \\u2705   |   \\u2705    |     \\u2705     | \\u2705     |   \\u2705   |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for explain_db\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"stdio\", \"description\": \"transport https://github.com/orgs/modelcontextprotocol/discussions/16\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"message\": {\"type\": \"string\", \"description\": \"Text content or message\"}}, \"required\": [\"message\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"sslmode\", \"description\": \"parameter in your DSN string:\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for sslmode\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"localhost\", \"description\": \"to connect to databases running on your host machine. For example: `mysql://user:password@host.docker.internal:3306/dbname`\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for localhost\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"ORACLE_LIB_DIR\", \"description\": \"environment variable to the path of your Oracle Instant Client:\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"DSN\", \"description\": \"| Database connection string                                      | Required if not in demo mode |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for DSN\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"TRANSPORT\", \"description\": \"| Transport mode: `stdio` or `http`                               | `stdio`                      |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for TRANSPORT\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"PORT\", \"description\": \"| HTTP server port (only applicable when using `--transport=http`) | `8080`                       |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for PORT\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"READONLY\", \"description\": \"| Restrict SQL execution to read-only operations                  | `false`                      |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for READONLY\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"false\", \"description\": \"|\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for false\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 12, \"homepage\": \"\", \"url\": \"https://github.com/bytebase/dbhub\", \"topics\": [\"ai\", \"anthropic\", \"claude\", \"claude-ai\", \"cursor\", \"cursorai\", \"database\", \"dify\", \"dify-plugins\", \"mariadb\", \"mcp\", \"mcp-server\", \"mysql\", \"oracle\", \"postgres\", \"sqlite\", \"sqlserver\"], \"data_sources\": [\"github\", \"official\"]}", "target": "", "id": "bytebase/dbhub", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"REDIS-MCP-Server\", \"server_id\": \"gongrzhe/redis-mcp-server\", \"description\": \"Redis database operations and caching microservice server with support for key-value operations, expiration management, and pattern-based key listing.\", \"readme\": \"# Redis MCP Server (@gongrzhe/server-redis-mcp@1.0.0)\\n\\n![](https://badge.mcpx.dev?type=server 'MCP Server')\\n[![smithery badge](https://smithery.ai/badge/@gongrzhe/server-redis-mcp)](https://smithery.ai/server/@gongrzhe/server-redis-mcp)\\n\\nA Redis Model Context Protocol (MCP) server implementation for interacting with Redis databases. This server enables LLMs to interact with Redis key-value stores through a set of standardized tools.\\n\\n## Update\\n62 Redis MCP tools in https://github.com/GongRzhe/REDIS-MCP-Server/tree/redis-plus\\n\\n## Installation & Usage\\n\\n### Installing via Smithery\\n\\nTo install Redis MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@gongrzhe/server-redis-mcp):\\n\\n```bash\\nnpx -y @smithery/cli install @gongrzhe/server-redis-mcp --client claude\\n```\\n\\n### Installing Manually\\n```bash\\n# Using npx with specific version (recommended)\\nnpx @gongrzhe/server-redis-mcp@1.0.0 redis://your-redis-host:port\\n\\n# Example:\\nnpx @gongrzhe/server-redis-mcp@1.0.0 redis://localhost:6379\\n```\\n\\nOr install globally:\\n\\n```bash\\n# Install specific version globally\\nnpm install -g @gongrzhe/server-redis-mcp@1.0.0\\n\\n# Run after global installation\\n@gongrzhe/server-redis-mcp redis://your-redis-host:port\\n```\\n\\n## Components\\n\\n### Tools\\n\\n- **set**\\n  - Set a Redis key-value pair with optional expiration\\n  - Input:\\n    - `key` (string): Redis key\\n    - `value` (string): Value to store\\n    - `expireSeconds` (number, optional): Expiration time in seconds\\n\\n- **get**\\n  - Get value by key from Redis\\n  - Input: `key` (string): Redis key to retrieve\\n\\n- **delete**\\n  - Delete one or more keys from Redis\\n  - Input: `key` (string | string[]): Key or array of keys to delete\\n\\n- **list**\\n  - List Redis keys matching a pattern\\n  - Input: `pattern` (string, optional): Pattern to match keys (default: *)\\n\\n## Configuration\\n\\n### Usage with Claude Desktop\\n\\nTo use this server with the Claude Desktop app, add the following configuration to the \\\"mcpServers\\\" section of your `claude_desktop_config.json`:\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"redis\\\": {\\n      \\\"command\\\": \\\"npx\\\",\\n      \\\"args\\\": [\\n        \\\"@gongrzhe/server-redis-mcp@1.0.0\\\",\\n        \\\"redis://localhost:6379\\\"\\n      ]\\n    }\\n  }\\n}\\n```\\n\\nAlternatively, you can use the node command directly if you have the package installed:\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"redis\\\": {\\n      \\\"command\\\": \\\"node\\\",\\n      \\\"args\\\": [\\n        \\\"path/to/build/index.js\\\",\\n        \\\"redis://10.1.210.223:6379\\\"\\n      ]\\n    }\\n  }\\n}\\n```\\n\\n### Docker Usage\\n\\nWhen using Docker:\\n* For macOS, use `host.docker.internal` if the Redis server is running on the host network\\n* Redis URL can be specified as an argument, defaults to \\\"redis://localhost:6379\\\"\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"redis\\\": {\\n      \\\"command\\\": \\\"docker\\\",\\n      \\\"args\\\": [\\n        \\\"run\\\", \\n        \\\"-i\\\", \\n        \\\"--rm\\\", \\n        \\\"mcp/redis\\\", \\n        \\\"redis://host.docker.internal:6379\\\"\\n      ]\\n    }\\n  }\\n}\\n```\\n\\n## Development\\n\\n### Building from Source\\n\\n1. Clone the repository\\n2. Install dependencies:\\n   ```bash\\n   npm install\\n   ```\\n3. Build the project:\\n   ```bash\\n   npm run build\\n   ```\\n\\n### Docker Build\\n\\n```bash\\ndocker build -t mcp/redis .\\n```\\n\\n## License\\n\\nThis MCP server is licensed under the ISC License. For more details, please see the LICENSE file in the project repository.\\n\", \"tools\": [{\"name\": \"key\", \"description\": \"(string): Redis key\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for key\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"value\", \"description\": \"(string): Value to store\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"amount\": {\"type\": \"number\", \"description\": \"Numeric amount or value\"}}, \"required\": [\"amount\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"expireSeconds\", \"description\": \"(number, optional): Expiration time in seconds\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for expireSeconds\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"pattern\", \"description\": \"(string, optional): Pattern to match keys (default: *)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for pattern\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 4, \"homepage\": \"\", \"url\": \"https://github.com/GongRzhe/REDIS-MCP-Server\", \"topics\": [], \"data_sources\": [\"github\", \"official\"]}", "target": "", "id": "gongrzhe/redis-mcp-server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"click-mcp\", \"server_id\": \"crowecawcaw/click-mcp\", \"description\": \"Turn click CLIs into MCP servers with one line of code\", \"readme\": \"# click-mcp\\n\\n[![PyPI version](https://badge.fury.io/py/click-mcp.svg)](https://badge.fury.io/py/click-mcp)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n\\nA Python library that extends Click applications with Model Context Protocol (MCP) support, allowing AI agents to interact with CLI tools.\\n\\n## Overview\\n\\n`click-mcp` provides a simple decorator that converts Click commands into MCP tools. This enables AI agents to discover and interact with your CLI applications programmatically.\\n\\nThe [Model Context Protocol (MCP)](https://github.com/model-context-protocol/mcp) is an open standard for AI agents to interact with tools and applications in a structured way.\\n\\n## Key Features\\n\\n- Simple `@click_mcp` decorator syntax\\n- Automatic conversion of Click commands to MCP tools\\n- Support for nested command groups\\n- Support for positional arguments\\n- Stdio-based MCP server for easy integration\\n\\n## Installation\\n\\n```bash\\npip install click-mcp\\n```\\n\\n## Basic Usage\\n\\n```python\\nimport click\\nfrom click_mcp import click_mcp\\n\\n@click_mcp(server_name=\\\"my-cli-app\\\")\\n@click.group()\\ndef cli():\\n    \\\"\\\"\\\"Sample CLI application.\\\"\\\"\\\"\\n    pass\\n\\n@cli.command()\\n@click.option('--name', required=True, help='Name to greet')\\ndef greet(name):\\n    \\\"\\\"\\\"Greet someone.\\\"\\\"\\\"\\n    click.echo(f\\\"Hello, {name}!\\\")\\n\\nif __name__ == '__main__':\\n    cli()\\n```\\n\\nWhen you run the MCP server, Click commands are converted into MCP tools:\\n- Command `greet` becomes MCP tool `greet`\\n- Nested commands use dot notation (e.g., `users.create`)\\n\\nTo invoke a command via MCP, send a request like:\\n\\n```json\\n{\\n  \\\"type\\\": \\\"invoke\\\",\\n  \\\"tool\\\": \\\"greet\\\",\\n  \\\"parameters\\\": {\\n    \\\"name\\\": \\\"World\\\"\\n  }\\n}\\n```\\n\\nTo start the MCP server:\\n\\n```bash\\n$ python my_app.py mcp\\n```\\n\\n## Advanced Usage\\n\\n### Customizing the MCP Command Name\\n\\nBy default, `click-mcp` adds an `mcp` command to your CLI application. You can customize this name using the `command_name` parameter:\\n\\n```python\\n@click_mcp(command_name=\\\"start-mcp\\\")\\n@click.group()\\ndef cli():\\n    \\\"\\\"\\\"Sample CLI application with custom MCP command name.\\\"\\\"\\\"\\n    pass\\n```\\n\\nWith this configuration, you would start the MCP server using:\\n\\n```bash\\n$ python my_app.py start-mcp\\n```\\n\\nThis can be useful when:\\n- The name \\\"mcp\\\" conflicts with an existing command\\n- You want a more descriptive command name\\n- You're integrating with a specific AI agent that expects a certain command name\\n\\n### Customizing the MCP Server Name\\n\\nYou can also customize the name of the MCP server that's reported to clients:\\n\\n```python\\n@click_mcp(server_name=\\\"my-custom-tool\\\")\\n@click.group()\\ndef cli():\\n    \\\"\\\"\\\"Sample CLI application with custom server name.\\\"\\\"\\\"\\n    pass\\n```\\n\\nThis can be useful when:\\n- You want to provide a more descriptive name for your tool\\n- You're integrating with systems that use the server name for identification\\n- You want to distinguish between different MCP-enabled applications\\n\\n### Working with Nested Command Groups\\n\\n`click-mcp` supports nested command groups. When you have a complex CLI structure with subcommands, all commands are exposed as MCP tools:\\n\\n```python\\n@click_mcp\\n@click.group()\\ndef cli():\\n    \\\"\\\"\\\"Main CLI application.\\\"\\\"\\\"\\n    pass\\n\\n@cli.group()\\ndef users():\\n    \\\"\\\"\\\"User management commands.\\\"\\\"\\\"\\n    pass\\n\\n@users.command()\\n@click.option('--username', required=True)\\ndef create(username):\\n    \\\"\\\"\\\"Create a new user.\\\"\\\"\\\"\\n    click.echo(f\\\"Creating user: {username}\\\")\\n\\n@users.command()\\n@click.argument('username')\\ndef delete(username):\\n    \\\"\\\"\\\"Delete a user.\\\"\\\"\\\"\\n    click.echo(f\\\"Deleting user: {username}\\\")\\n```\\n\\nWhen exposed as MCP tools, the nested commands will be available with their full path using dot notation (e.g., \\\"users.create\\\" and \\\"users.delete\\\").\\n\\n### Working with Positional Arguments\\n\\nClick supports positional arguments using `@click.argument()`. When these are converted to MCP tools, they are represented as named parameters in the schema:\\n\\n```python\\n@cli.command()\\n@click.argument('source')\\n@click.argument('destination')\\n@click.option('--overwrite', is_flag=True, help='Overwrite destination if it exists')\\ndef copy(source, destination, overwrite):\\n    \\\"\\\"\\\"Copy a file from source to destination.\\\"\\\"\\\"\\n    click.echo(f\\\"Copying {source} to {destination}\\\")\\n```\\n\\nThis command is converted to an MCP tool with the following schema:\\n\\n```json\\n{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"properties\\\": {\\n    \\\"source\\\": {\\n      \\\"description\\\": \\\"\\\",\\n      \\\"schema\\\": { \\\"type\\\": \\\"string\\\" },\\n      \\\"required\\\": true\\n    },\\n    \\\"destination\\\": {\\n      \\\"description\\\": \\\"\\\",\\n      \\\"schema\\\": { \\\"type\\\": \\\"string\\\" },\\n      \\\"required\\\": true\\n    },\\n    \\\"overwrite\\\": {\\n      \\\"description\\\": \\\"Overwrite destination if it exists\\\",\\n      \\\"schema\\\": { \\\"type\\\": \\\"boolean\\\" }\\n    }\\n  },\\n  \\\"required\\\": [\\\"source\\\", \\\"destination\\\"]\\n}\\n```\\n\\nThe positional nature of arguments is handled internally by `click-mcp`. When invoking the command, you can use named parameters:\\n\\n```json\\n{\\n  \\\"type\\\": \\\"invoke\\\",\\n  \\\"tool\\\": \\\"copy\\\",\\n  \\\"parameters\\\": {\\n    \\\"source\\\": \\\"file.txt\\\",\\n    \\\"destination\\\": \\\"/tmp/file.txt\\\",\\n    \\\"\\n[...truncated for length...]\", \"tools\": [{\"name\": \"greet\", \"description\": \"becomes MCP tool `greet`\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for greet\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"mcp\", \"description\": \"command to your CLI application. You can customize this name using the `command_name` parameter:\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for mcp\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"cli\", \"description\": \"\\\"\\\"\\\"Sample CLI application.\\\"\\\"\\\"\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for cli\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"users\", \"description\": \"\\\"\\\"\\\"User management commands.\\\"\\\"\\\"\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for users\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 4, \"homepage\": \"\", \"url\": \"https://github.com/crowecawcaw/click-mcp\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "crowecawcaw/click-mcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"openmcp-tutorial\", \"server_id\": \"lstm-kirigaya/openmcp-tutorial\", \"description\": \"tutorial for mcp server development\", \"readme\": \"Demo for [OpenMCP](https://github.com/LSTM-Kirigaya/openmcp-client) Project.\\n\\nMaybe you can use the project structure to build the future ?\\n\\n- simple-mcp (python): A simple demo for `fastmcp`\\n- bing-images (python): A mcp server to get images by key words from bing\\n- my-browser (typescript): A mcp server that can use browser to search information\\n\\nHere come the methods to build mcp from different languages.\\n\\npython\\n\\n```bash\\ncd ~/project/your-mcp-project\\nuv init\\nuv add mcp \\\"mcp[cli]\\\"\\n```\\n\\ntypescript\\n\\n```bash\\n\\n```\", \"tools\": [{\"name\": \"fastmcp\", \"description\": \"- bing-images (python): A mcp server to get images by key words from bing\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for fastmcp\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 1, \"homepage\": \"\", \"url\": \"https://github.com/LSTM-Kirigaya/openmcp-tutorial\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "lstm-kirigaya/openmcp-tutorial", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"remote-mcp-server-authless\", \"server_id\": \"giobi/remote-mcp-server-authless\", \"description\": \"\", \"readme\": \"# Building a Remote MCP Server on Cloudflare (Without Auth)\\n\\nThis example allows you to deploy a remote MCP server that doesn't require authentication on Cloudflare Workers. \\n\\n## Get started: \\n\\n[![Deploy to Workers](https://deploy.workers.cloudflare.com/button)](https://deploy.workers.cloudflare.com/?url=https://github.com/cloudflare/ai/tree/main/demos/remote-mcp-authless)\\n\\nThis will deploy your MCP server to a URL like: `remote-mcp-server-authless.<your-account>.workers.dev/sse`\\n\\nAlternatively, you can use the command line below to get the remote MCP Server created on your local machine:\\n```bash\\nnpm create cloudflare@latest -- my-mcp-server --template=cloudflare/ai/demos/remote-mcp-authless\\n```\\n\\n## Customizing your MCP Server\\n\\nTo add your own [tools](https://developers.cloudflare.com/agents/model-context-protocol/tools/) to the MCP server, define each tool inside the `init()` method of `src/index.ts` using `this.server.tool(...)`. \\n\\n## Connect to Cloudflare AI Playground\\n\\nYou can connect to your MCP server from the Cloudflare AI Playground, which is a remote MCP client:\\n\\n1. Go to https://playground.ai.cloudflare.com/\\n2. Enter your deployed MCP server URL (`remote-mcp-server-authless.<your-account>.workers.dev/sse`)\\n3. You can now use your MCP tools directly from the playground!\\n\\n## Connect Claude Desktop to your MCP server\\n\\nYou can also connect to your remote MCP server from local MCP clients, by using the [mcp-remote proxy](https://www.npmjs.com/package/mcp-remote). \\n\\nTo connect to your MCP server from Claude Desktop, follow [Anthropic's Quickstart](https://modelcontextprotocol.io/quickstart/user) and within Claude Desktop go to Settings > Developer > Edit Config.\\n\\nUpdate with this configuration:\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"calculator\\\": {\\n      \\\"command\\\": \\\"npx\\\",\\n      \\\"args\\\": [\\n        \\\"mcp-remote\\\",\\n        \\\"http://localhost:8787/sse\\\"  // or remote-mcp-server-authless.your-account.workers.dev/sse\\n      ]\\n    }\\n  }\\n}\\n```\\n\\nRestart Claude and you should see the tools become available. \\n\", \"tools\": [], \"tools_count\": 0, \"homepage\": \"\", \"url\": \"https://github.com/giobi/remote-mcp-server-authless\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "giobi/remote-mcp-server-authless", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"zed-mcp-server-context7\", \"server_id\": \"akbxr/zed-mcp-server-context7\", \"description\": \"Context7 MCP Server for Zed\", \"readme\": \"# Context7 MCP Server for Zed\\n\\nThis extension integrates [Context7](https://context7.com/) as a Model Context Protocol (MCP) server for Zed's Assistant, providing up-to-date documentation for any prompt.\\n\\n## What is Context7?\\n\\nContext7 pulls up-to-date, version-specific documentation and code examples straight from the source and places them directly into your prompt context.\\n\\n### \\u274c Without Context7\\n\\nLLMs rely on outdated or generic information about the libraries you use. You get:\\n- \\u274c Code examples are outdated and based on year-old training data\\n- \\u274c Hallucinated APIs that don't even exist\\n- \\u274c Generic answers for old package versions\\n\\n### \\u2705 With Context7\\n\\nContext7 fetches up-to-date, version-specific documentation and code examples straight from the source \\u2014 and places them directly into your prompt.\\n\\nAdd `use context7` to your question in Zed Assistant:\\n\\n```\\nHow do I use the new Next.js `after` function? use context7\\n```\\n\\n```\\nHow do I invalidate a query in React Query? use context7\\n```\\n\\n```\\nHow do I protect a route with NextAuth? use context7\\n```\\n\\n## How It Works\\n\\n- 1\\ufe0f\\u20e3 Ask your question naturally\\n- 2\\ufe0f\\u20e3 Tell the LLM to `use context7`\\n- 3\\ufe0f\\u20e3 Get working code answers\\n\\nNo tab-switching, no hallucinated APIs that don't exist, no outdated code generations.\\n\\n## Installation\\n\\nThis extension can be installed from the Zed extension.\\n\\n## Agent Mode Configuration\\n\\nIf you're using Zed's agent mode, you need to enable this context server for your assistant:\\n\\n1. Open Zed's assistant settings\\n2. Enable the Context7 MCP server. If you see that the status of the tool is a red dot, make sure you toggle it so that becomes green.\\n3. Enable the Context7 MCP Server in the active assistant profile. In the chat section, click on the `Write | Ask` button, then click on `tools`, then enable the Context7 MCP Server.\\n\\n## Environment Variables (Optional)\\n\\n- `DEFAULT_MINIMUM_TOKENS`: Set the minimum token count for documentation retrieval (default: 10000).\\n\\nExamples:\\n\\n```json\\n{\\n  \\\"context_server\\\": {\\n    \\\"mcp-server-context7\\\": {\\n      \\\"settings\\\": {\\n        \\\"default_minimum_tokens\\\": \\\"10000\\\"\\n      }\\n    }\\n  }\\n}\\n```\\n\\n## Available Tools\\n\\nThe Context7 MCP Server provides these tools to the LLM:\\n\\n- `resolve-library-id`: Resolves a general library name into a Context7-compatible library ID.\\n  - `libraryName` (optional): Search and rerank results\\n\\n- `get-library-docs`: Fetches documentation for a library using a Context7-compatible library ID.\\n  - `context7CompatibleLibraryID` (required)\\n  - `topic` (optional): Focus the docs on a specific topic (e.g., \\\"routing\\\", \\\"hooks\\\")\\n  - `tokens` (optional, default 5000): Max number of tokens to return\\n\\n## Development\\n\\nClone the project and install dependencies:\\n\\n```\\ncargo build\\n```\\n\\n## License\\n\\nMIT\\n\", \"tools\": [{\"name\": \"after\", \"description\": \"function? use context7\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"message\": {\"type\": \"string\", \"description\": \"Text content or message\"}}, \"required\": [\"message\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"tools\", \"description\": \", then enable the Context7 MCP Server.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"message\": {\"type\": \"string\", \"description\": \"Text content or message\"}}, \"required\": [\"message\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"DEFAULT_MINIMUM_TOKENS\", \"description\": \"Set the minimum token count for documentation retrieval (default: 10000).\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for DEFAULT_MINIMUM_TOKENS\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"libraryName\", \"description\": \"(optional): Search and rerank results\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}}, \"required\": [\"query\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"context7CompatibleLibraryID\", \"description\": \"(required)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"message\": {\"type\": \"string\", \"description\": \"Text content or message\"}}, \"required\": [\"message\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"topic\", \"description\": \"(optional): Focus the docs on a specific topic (e.g., \\\"routing\\\", \\\"hooks\\\")\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for topic\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"tokens\", \"description\": \"(optional, default 5000): Max number of tokens to return\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for tokens\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 7, \"homepage\": \"https://zed.dev/extensions?query=Context7\", \"url\": \"https://github.com/akbxr/zed-mcp-server-context7\", \"topics\": [\"mcp\", \"mcp-server\"], \"data_sources\": [\"github\"]}", "target": "", "id": "akbxr/zed-mcp-server-context7", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"mcp-start-go\", \"server_id\": \"hassaku63/mcp-start-go\", \"description\": \"Example MCP Server implements by Go\", \"readme\": \"# README\\n\\nExample project for the MCP Server\\n\\n## Disclaimer\\n\\nWe strongly advise against downloading and testing the binary. This is a demonstration of implementation and is not intended for practical use.\\n\\nIf you choose to do so, please proceed at your own risk. We shall not be held liable for any issues arising from the use of this source code or its distributed binary.\\n\\n## Cline Configuration\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"mcp-server-start\\\": {\\n      \\\"name\\\": \\\"mcp-server-start\\\",\\n      \\\"description\\\": \\\"this is a test server\\\",\\n      \\\"command\\\": \\\"${ABSOLUTE_PATH_TO_YOUR_DOWNLOAD}\\\",\\n      \\\"args\\\": []\\n    }\\n  }\\n}\\n```\\n\\n# See also\\n\\n- Blog post: [StdioTransport \\u3092\\u4f7f\\u3063\\u305f\\u30af\\u30ed\\u30b9\\u30d7\\u30e9\\u30c3\\u30c8\\u30d5\\u30a9\\u30fc\\u30e0\\u306a MCP Server \\u3092 Go \\u3067\\u5b9f\\u88c5\\u3057\\u3066\\u3001Cline \\u304b\\u3089\\u547c\\u3073\\u51fa\\u3057\\u3066\\u307f\\u308b](https://blog.serverworks.co.jp/2025/04/07/121500)\\n\", \"tools\": [], \"tools_count\": 0, \"homepage\": \"\", \"url\": \"https://github.com/hassaku63/mcp-start-go\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "hassaku63/mcp-start-go", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"catalyst-center-mcp\", \"server_id\": \"richbibby/catalyst-center-mcp\", \"description\": \"A Python-based MCP (Model Context Protocol) server for Cisco Catalyst Center (formerly DNA Center) that provides tools for device management and monitoring.\", \"readme\": \"# Catalyst Center MCP Server\\n\\nA Python-based MCP (Model Context Protocol) server for Cisco Catalyst Center (formerly DNA Center) that provides tools for device management, client information retrieval, and network monitoring.\\n\\n## Features\\n\\n- Secure authentication with Cisco Catalyst Center.\\n- Device discovery, listing, and detailed information retrieval.\\n- Site information retrieval, including hierarchy and details.\\n- Network interface information for specific devices.\\n- Client listing with comprehensive filtering options.\\n- Detailed client information retrieval by MAC address.\\n- Client count retrieval with filtering.\\n- Helper tool for API-compatible time range conversion.\\n- Implemented using FastMCP for a robust and extensible MCP server.\\n- Configuration via `.env` file for easy setup.\\n\\n## Installation\\n\\n1. Clone the repository:\\n```bash\\ngit clone https://github.com/richbibby/catalyst-center-mcp.git\\ncd catalyst-center-mcp\\n```\\n\\n2. Create a virtual environment and activate it:\\n```bash\\npython -m venv venv\\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\\n```\\n\\n3. Install dependencies:\\n```bash\\npip install -r requirements.txt\\n```\\n\\n## Configuration\\n\\n1. Copy the example environment file:\\n```bash\\ncp .env.example .env\\n```\\n\\n2. Update the `.env` file with your Catalyst Center credentials:\\n```env\\nCCC_HOST=your-catalyst-center-host\\nCCC_USER=your-username\\nCCC_PWD=your-password\\n```\\n\\n## Usage With Claude Desktop Client\\n\\n1. Configure Claude Desktop to use this MCP server:\\n\\n- Open Claude Desktop\\n- Go to Settings > Developer > Edit Config\\n- Add the following configuration (adjust paths as needed, see `claude_desktop_config.json` for an example structure):\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"catalyst-center-mcp\\\": {\\n      \\\"command\\\": \\\"/path/to/your/venv/bin/fastmcp\\\",\\n      \\\"args\\\": [\\n        \\\"run\\\",\\n        \\\"/path/to/your/catalyst-center-mcp/catalyst-center-mcp.py\\\"\\n      ],\\n      \\\"env\\\": {\\n        \\\"PYTHONUNBUFFERED\\\": \\\"1\\\"\\n      }\\n    }\\n  }\\n}\\n```\\n- Replace `/path/to/your/...` with the absolute paths relevant to your local environment.\\n- The `PYTHONUNBUFFERED` environment variable is recommended for Stdio transport.\\n\\n2. Restart Claude Desktop\\n\\n3. Interact with Claude Desktop:\\n\\n- Ask Claude to perform actions like \\\"Show me the devices in my Cisco Catalyst Center\\\"\\n- Claude will use the MCP server to authenticate and fetch device information\\n\\n![Claude Desktop with Catalyst Center MCP](images/Claude_2.png)\\n\\n![Claude Desktop with Catalyst Center MCP](images/Claude_1.png)\\n\\n## Example Questions\\n\\nHere are some example questions you can ask Claude to interact with your Catalyst Center:\\n\\n### Device Information\\n- \\\"Show me all devices in my network\\\"\\n- \\\"List all switches in my network\\\"\\n- \\\"What devices are currently unreachable?\\\"\\n- \\\"Show me devices with hostname containing 'switch'\\\"\\n- \\\"What's the status of device with IP 10.1.1.1?\\\"\\n\\n### Interface Information\\n- \\\"Show me all interfaces for device X\\\"\\n- \\\"What interfaces are down on device Y?\\\"\\n- \\\"List all Gigabit interfaces on device Z\\\"\\n- \\\"Show me interfaces with IP addresses\\\"\\n- \\\"What's the status of interface GigabitEthernet1/0/1 on device X?\\\"\\n\\n### Site Information\\n- \\\"Show me all sites in my network\\\"\\n- \\\"What devices are in site X?\\\"\\n- \\\"List all buildings in my network\\\"\\n- \\\"Show me the site hierarchy\\\"\\n- \\\"What's the address of site Y?\\\"\\n\\n### Client Information\\n- \\\"How many clients are currently connected?\\\"\\n- \\\"List all wireless clients.\\\"\\n- \\\"Show me clients connected to SSID 'Corporate-WiFi'.\\\"\\n- \\\"What are the details for client with MAC address aa:bb:cc:dd:ee:ff?\\\"\\n- \\\"Are there any clients with an OS type of 'macOS'?\\\"\\n- \\\"List clients active in the last hour.\\\"\\n\\n### Combined Queries\\n- \\\"Show me all devices in site X and their interfaces\\\"\\n- \\\"List all down interfaces across all devices\\\"\\n- \\\"What devices in building Y have unreachable interfaces?\\\"\\n- \\\"Show me the network topology for site Z\\\"\\n- \\\"What's the status of all devices in area A?\\\"\\n\\n## Available Tools\\n\\n- `fetch_devices`: Fetches a list of devices from Cisco Catalyst Center, with filtering options.\\n- `fetch_sites`: Fetches a list of sites from Cisco Catalyst Center, returning a compact JSON structure.\\n- `fetch_interfaces`: Fetches interface information for a specific device ID.\\n- `get_api_compatible_time_range`: Converts natural language time inputs (e.g., \\\"last 24 hours\\\", \\\"yesterday\\\") or specific timestamps into API-compatible epoch millisecond start and end times.\\n- `get_clients_list`: Retrieves a list of clients from Cisco Catalyst Center with comprehensive filtering options (e.g., by client type, OS, site, MAC/IP address, SSID). Returns a maximum of 100 clients per call.\\n- `get_client_details_by_mac`: Fetches detailed information for a specific client by their MAC address.\\n- `get_clients_count`: Retrieves the total count of clients matching specified filters.\\n\\n## Contributing\\n\\n1. Fork the repository\\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\\n4. Push to t\\n[...truncated for length...]\", \"tools\": [{\"name\": \"PYTHONUNBUFFERED\", \"description\": \"environment variable is recommended for Stdio transport.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for PYTHONUNBUFFERED\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"fetch_devices\", \"description\": \"Fetches a list of devices from Cisco Catalyst Center, with filtering options.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for fetch_devices\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"fetch_sites\", \"description\": \"Fetches a list of sites from Cisco Catalyst Center, returning a compact JSON structure.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for fetch_sites\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"fetch_interfaces\", \"description\": \"Fetches interface information for a specific device ID.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for fetch_interfaces\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_api_compatible_time_range\", \"description\": \"Converts natural language time inputs (e.g., \\\"last 24 hours\\\", \\\"yesterday\\\") or specific timestamps into API-compatible epoch millisecond start and end times.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"message\": {\"type\": \"string\", \"description\": \"Text content or message\"}}, \"required\": [\"message\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_clients_list\", \"description\": \"Retrieves a list of clients from Cisco Catalyst Center with comprehensive filtering options (e.g., by client type, OS, site, MAC/IP address, SSID). Returns a maximum of 100 clients per call.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_clients_list\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"get_client_details_by_mac\", \"description\": \"Fetches detailed information for a specific client by their MAC address.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_client_details_by_mac\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"get_clients_count\", \"description\": \"Retrieves the total count of clients matching specified filters.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_clients_count\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 8, \"homepage\": \"\", \"url\": \"https://github.com/richbibby/catalyst-center-mcp\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "richbibby/catalyst-center-mcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"MCPBench\", \"server_id\": \"modelscope/mcpbench\", \"description\": \"The evaluation benchmark on MCP servers\", \"readme\": \"<h1 align=\\\"center\\\">\\n\\t\\ud83e\\udd8a MCPBench: A Benchmark for Evaluating MCP Servers\\n</h1>\\n\\n\\n\\n<div align=\\\"center\\\">\\n\\n[![Documentation][docs-image]][docs-url]\\n[![Package License][package-license-image]][package-license-url]\\n\\n</div>\\n\\n<div align=\\\"center\\\">\\n<h4 align=\\\"center\\\">\\n\\n[\\u4e2d\\u6587](https://github.com/modelscope/MCPBench/blob/main/README_zh.md) |\\n[English](https://github.com/modelscope/MCPBench/blob/main/README.md)\\n\\n</h4>\\n</div>\\n\\nMCPBench is an evaluation framework for MCP Servers. It supports the evaluation of three types of servers: Web Search, Database Query and GAIA, and is compatible with both local and remote MCP Servers. The framework primarily evaluates different MCP Servers (such as Brave Search, DuckDuckGo, etc.) in terms of task completion accuracy, latency, and token consumption under the same LLM and Agent configurations. Here is the [evaluation report](https://arxiv.org/abs/2504.11094).\\n\\n<img src=\\\"assets/figure1.png\\\" alt=\\\"MCPBench Overview\\\" width=\\\"600\\\"/>\\n\\n> The implementation refers to [LangProBe: a Language Programs Benchmark](https://arxiv.org/abs/2502.20315).\\\\\\n> Big thanks to Qingxu Fu for the initial implementation!\\n\\n<hr>\\n\\n\\n\\n# \\ud83d\\udccb Table of Contents\\n\\n- [\\ud83d\\udd25 News](#news)\\n- [\\ud83d\\udee0\\ufe0f Installation](#installation)\\n- [\\ud83d\\ude80 Quick Start](#quick-start)\\n  - [Launch MCP Server](#launch-mcp-server)\\n  - [Launch Evaluation](#launch-evaluation)\\n- [\\ud83e\\uddc2 Datasets and Experiments](#datasets-and-experiments)\\n- [\\ud83d\\udeb0 Cite](#cite)\\n\\n# \\ud83d\\udd25 News\\n+ `Apr. 29, 2025` \\ud83c\\udf1f Update the code for evaluating the MCP Server Package within GAIA.\\n+ `Apr. 14, 2025` \\ud83c\\udf1f We are proud to announce that MCPBench is now open-sourced.\\n\\n# \\ud83d\\udee0\\ufe0f Installation\\nThe framework requires Python version >= 3.11, nodejs and jq.\\n\\n```bash\\nconda create -n mcpbench python=3.11 -y\\nconda activate mcpbench\\npip install -r requirements.txt\\n```\\n# \\ud83d\\ude80 Quick Start\\nPlease first determine the type of MCP server you want to use:\\n- If it is a remote host (accessed via **SSE**, such as [ModelScope](https://modelscope.cn/mcp), [Smithery](https://smithery.ai), or localhost), you can directly conduct the [evaluation](#launch-evaluation).\\n- If it is started locally (accessed via npx using **STDIO**), you need to launch it.\\n\\n## Launch MCP Server (optional for stdio)\\nFirst, you need to write the following configuration:\\n```json\\n{\\n    \\\"mcp_pool\\\": [\\n        {\\n            \\\"name\\\": \\\"firecrawl\\\",\\n            \\\"run_config\\\": [\\n                {\\n                    \\\"command\\\": \\\"npx -y firecrawl-mcp\\\",\\n                    \\\"args\\\": \\\"FIRECRAWL_API_KEY=xxx\\\",\\n                    \\\"port\\\": 8005\\n                }\\n            ]\\n        }  \\n    ]\\n}\\n```\\nSave this config file in the `configs` folder and launch it using:\\n\\n```bash\\nsh launch_mcps_as_sse.sh YOUR_CONFIG_FILE\\n```\\n\\nFor example, save the above configuration in the `configs/firecrawl.json` file and launch it using:\\n\\n```bash\\nsh launch_mcps_as_sse.sh firecrawl.json\\n```\\n\\n## Launch Evaluation\\nTo evaluate the MCP Server's performance, you need to set up the necessary MCP Server information. the code will automatically detect the tools and parameters in the Server, so you don't need to configure them manually, like:\\n```json\\n{\\n    \\\"mcp_pool\\\": [\\n        {\\n            \\\"name\\\": \\\"Remote MCP example\\\",\\n            \\\"url\\\": \\\"url from https://modelscope.cn/mcp or https://smithery.ai\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"firecrawl (Local run example)\\\",\\n            \\\"run_config\\\": [\\n                {\\n                    \\\"command\\\": \\\"npx -y firecrawl-mcp\\\",\\n                    \\\"args\\\": \\\"FIRECRAWL_API_KEY=xxx\\\",\\n                    \\\"port\\\": 8005\\n                }\\n            ]\\n        }  \\n    ]\\n}\\n```\\n\\nTo evaluate the MCP Server's performance on WebSearch tasks:\\n```bash\\nsh evaluation_websearch.sh YOUR_CONFIG_FILE\\n```\\n\\nTo evaluate the MCP Server's performance on Database Query tasks:\\n```bash\\nsh evaluation_db.sh YOUR_CONFIG_FILE\\n```\\n\\nTo evaluate the MCP Server's performance on GAIA tasks:\\n```bash\\nsh evaluation_gaia.sh YOUR_CONFIG_FILE\\n```\\n\\nFor example, save the above configuration in the `configs/firecrawl.json` file and launch it using:\\n\\n```bash\\nsh evaluation_websearch.sh firecrawl.json\\n```\\n\\n# Datasets and Experimental Results\\nOur framework provides two datasets for evaluation. For the WebSearch task, the dataset is located at `MCPBench/langProBe/WebSearch/data/websearch_600.jsonl`, containing 200 QA pairs each from [Frames](https://arxiv.org/abs/2409.12941), news, and technology domains. Our framework for automatically constructing evaluation datasets will be open-sourced later.\\n\\nFor the Database Query task, the dataset is located at `MCPBench/langProBe/DB/data/car_bi.jsonl`. You can add your own dataset in the following format:\\n\\n```json\\n{\\n  \\\"unique_id\\\": \\\"\\\",\\n  \\\"Prompt\\\": \\\"\\\",\\n  \\\"Answer\\\": \\\"\\\"\\n}\\n```\\n\\nWe have evaluated mainstream MCP Servers on both tasks. For detailed experimental results, please refer to [Documentation](https://arxiv.org/abs/2504.11094)\\n\\n# \\ud83d\\udeb0 Cite\\nIf you find this work useful, please consider citing our project or giving us a \\ud83c\\udf1f:\\n\\n```bibtex\\n@misc{mcpbench,\\n  title={MCPBench: A Benchmark for Evaluat\\n[...truncated for length...]\", \"tools\": [{\"name\": \"configs\", \"description\": \"folder and launch it using:\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for configs\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}], \"tools_count\": 1, \"homepage\": \"\", \"url\": \"https://github.com/modelscope/MCPBench\", \"topics\": [\"benchmark\", \"database\", \"mcp\", \"mcp-server\", \"websearch\"], \"data_sources\": [\"github\"]}", "target": "", "id": "modelscope/mcpbench", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"mcp-notes\", \"server_id\": \"markacianfrani/mcp-notes\", \"description\": \"an MCP server for makin' notes\", \"readme\": \"# \\ud83d\\udcda MCP Notes\\n\\nA personal knowledge management system built on the Model Context Protocol (MCP) that transforms daily notes into organized, searchable knowledge.\\n\\n## \\ud83d\\ude80 Usage\\n\\n### \\ud83d\\udee0\\ufe0f Manual Setup\\n\\n1. **Clone the repository**\\n\\n   ```bash\\n   git clone git@github.com:markacianfrani/mcp-notes.git\\n   cd mcp-notes\\n   npm i\\n   npm run build\\n   ```\\n\\n2. **Setup MCP**\\n\\n### \\ud83d\\udda5\\ufe0f Claude Desktop\\n\\nAdd to your claude-desktop-config.json:\\n\\n```json\\n\\\"notes\\\": {\\n    \\\"command\\\": \\\"node\\\",\\n    \\\"args\\\": [\\n        \\\"path/to/this/repo/mcp-notes/dist/index.js\\\",\\n        \\\"path/to/your/notes\\\"\\n    ],\\n},\\n```\\n\\n## \\ud83c\\udf1f Project Vision\\n\\nMCP Notes aims to solve the problem of knowledge fragmentation by creating a system where daily thoughts, accomplishments, and insights can be:\\n\\n1. \\ud83d\\udce5 Captured quickly with minimal friction\\n2. \\ud83d\\uddc2\\ufe0f Organized automatically into meaningful structures\\n3. \\ud83e\\udde0 Synthesized into higher-level knowledge\\n4. \\ud83d\\udd0d Retrieved easily when needed\\n\\nThe goal is to build an external rubber duck that can dump your working memory in real-time from any tool and sort through the garbage.\\n\\n## \\ud83e\\udde9 Core Concepts\\n\\n### 1. \\ud83d\\udcc5 Daily Logs\\n\\nDaily logs are the atomic unit of capture in MCP Notes. Each day gets its own markdown file where you can record observations throughout the day. Think of daily logs like a running ledger.\\n\\n> \\ud83d\\udca1 TIP: Make use of Claude Desktop's Quick Entry Keyboard Shortcut\\n\\nMCP is tool-agnostic so you can /log across conversations but also tools as well--ask Copilot or Cursor to log a summary of lessons-learned after fixing a bug or make Claude Desktop save a new approach to an old problem.\\n\\n### 2. \\ud83d\\udcca Rollups\\n\\nRollups are automatically generated summaries that condense daily logs into higher-level insights and patterns. They help connect isolated pieces of information into a coherent narrative of your work and thinking.\\n\\n### 3. \\ud83d\\udcda Knowledge Categories\\n\\nAll notes in the system fall into one of four categories:\\n\\n- **\\ud83c\\udfc6 Accomplishment**: Solving problems, completing features, fixing bugs\\n- **\\ud83d\\udca1 Insight**: Patterns, architectural decisions, better ways of working\\n- **\\ud83d\\udcdd TODO**: Tasks connected to larger goals, meaningful improvements\\n- **\\ud83d\\udcd6 Knowledge**: Technical details, context, rationales, techniques\\n\\n## \\ud83c\\udfa8 Design Principles\\n\\nMCP Notes is built on several core design principles:\\n\\n### 1. \\ud83d\\udcc4 Plain Text First\\n\\nAll notes are stored as plain text Markdown files, ensuring:\\n\\n- Future-proof storage that won't be locked into proprietary formats\\n- Version control compatibility\\n- Easy editing with any text editor\\n- Transparent data structure\\n\\n### 2. \\u270d\\ufe0f Low Friction Capture\\n\\nThe primary interface is designed to minimize the friction of recording thoughts:\\n\\n- Simple text input\\n- Automatic categorization assistance\\n- No complex organization required at capture time\\n\\n### 3. \\ud83d\\udd04 Progressive Organization\\n\\nRather than requiring rigid organization upfront, MCP Notes employs a progressive approach:\\n\\n- Capture raw thoughts and activities\\n- Automatically categorize content\\n- Generate periodic summaries\\n- Connect related items over time\\n\\n### 4. \\ud83e\\udd16 AI Augmentation\\n\\nThe system leverages AI to enhance human thinking, not replace it:\\n\\n- Help categorize information\\n- Generate summaries and connections\\n- Surface relevant past notes\\n- Identify patterns across time\\n\\n\\n## \\ud83e\\uddf0 Available Tools\\n\\nMCP Notes provides a set of tools that can be invoked through Claude Desktop or other MCP-compatible clients. These tools allow you to capture, organize, and retrieve your notes.\\n\\n### \\ud83d\\udcdd Core Note Tools\\n\\n#### `/log`\\n\\nCreates or updates today's daily log file with your notes.\\n\\nInvoke with: \\\"log this to my daily log: ...\\\", \\\"add a summary of that to my log: ....\\\"\\n\\n#### `/rollup`\\n\\nSynthesizes daily notes into an organized summary with categories, connections, and action items.\\n\\nInvoke with: \\\"rollup my notes for today\\\"\\n\\n#### `write_note`\\n\\nCreates a new note or overwrites an existing note with content.\\n\\n#### `sticky`\\n\\nEvaluates the \\\"stickiness\\\" of a thought based on actionability, longevity, findability, and future reference value.\\n\\nInvoke with: \\\"Is this idea sticky?\\\"\\n\\n#### `evaluateInsight`\\n\\nEvaluates the long-term value and significance of an insight or thought.\\n\\nInvoke with: \\\"Is this insight valuable for the long term?\\\"\\n\\n### \\ud83d\\udcc2 File System Tools\\n\\n#### `search_files`\\n\\nRecursively searches for files and directories matching a pattern in your notes directory.\\n\\n#### `read_note`\\n\\nReads the complete contents of a note file from your notes directory.\\n\\n#### `read_multiple_notes`\\n\\nReads the contents of multiple note files simultaneously.\\n\\n#### `list_directory`\\n\\nLists the contents of a directory in your notes.\\n\\n#### `create_directory`\\n\\nCreates a new directory in your notes.\\n\\nSee the [CHANGELOG.md](CHANGELOG.md) file for version history and changes.\\n\\n## \\ud83d\\udca1 Available Prompts\\n\\n### Is this atomic?\\n\\nBreaks down ideas into their simplest standalone parts. Use this prompt to turn large ideas into smaller concepts. Smaller notes can be linked to other notes much more easily.\", \"tools\": [{\"name\": \"write_note\", \"description\": \"Creates a new note or overwrites an existing note with content.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"message\": {\"type\": \"string\", \"description\": \"Text content or message\"}}, \"required\": [\"message\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"sticky\", \"description\": \"Evaluates the \\\"stickiness\\\" of a thought based on actionability, longevity, findability, and future reference value.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}, \"amount\": {\"type\": \"number\", \"description\": \"Numeric amount or value\"}}, \"required\": [\"query\", \"amount\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"evaluateInsight\", \"description\": \"Evaluates the long-term value and significance of an insight or thought.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"amount\": {\"type\": \"number\", \"description\": \"Numeric amount or value\"}}, \"required\": [\"amount\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"search_files\", \"description\": \"Recursively searches for files and directories matching a pattern in your notes directory.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}, \"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}}, \"required\": [\"file_path\", \"query\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"read_note\", \"description\": \"Reads the complete contents of a note file from your notes directory.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}, \"message\": {\"type\": \"string\", \"description\": \"Text content or message\"}}, \"required\": [\"file_path\", \"message\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"read_multiple_notes\", \"description\": \"Reads the contents of multiple note files simultaneously.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}, \"message\": {\"type\": \"string\", \"description\": \"Text content or message\"}}, \"required\": [\"file_path\", \"message\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"list_directory\", \"description\": \"Lists the contents of a directory in your notes.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"message\": {\"type\": \"string\", \"description\": \"Text content or message\"}}, \"required\": [\"message\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"create_directory\", \"description\": \"Creates a new directory in your notes.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for create_directory\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}], \"tools_count\": 8, \"homepage\": \"\", \"url\": \"https://github.com/markacianfrani/mcp-notes\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "markacianfrani/mcp-notes", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"apimatic-validator-mcp\", \"server_id\": \"apimatic/apimatic-validator-mcp\", \"description\": \"APIMatic MCP Server is used to validate OpenAPI specifications using\", \"readme\": \"# APIMatic Validator MCP Server\\n\\nThis repository provides a Model Context Protocol (MCP) Server for validating OpenAPI specifications using [APIMatic](https://www.apimatic.io/). The server processes OpenAPI files and returns validation summaries by leveraging APIMatic\\u2019s API.\\n\\n## Features\\n\\n- Validates OpenAPI 2.0 and 3.0 files\\n- Uses APIMatic\\u2019s API for comprehensive validation\\n- Supports both JSON and YAML formats\\n- Implements Model Context Protocol (MCP) for seamless integration\\n\\n## Installation\\n\\nEnsure that **Node.js v18+** is installed.\\n\\n### Clone the Repository\\n```sh\\ngit clone https://github.com/apimatic/apimatic-validator-mcp.git\\ncd apimatic-validator-mcp\\n```\\n\\n### Install Dependencies\\n```sh\\nnpm install\\n```\\n\\n### Build the Project\\n```sh\\nnpm run build\\n```\\n\\n## Configuration\\n\\nTo use the server, an APIMatic API key is required. Sign up at [APIMatic](https://www.apimatic.io/) and obtain the API key.\\n\\n\\n![image](https://github.com/user-attachments/assets/1e2388dd-1330-4dab-a6e0-c6738a494ab9)\\n\\n\\n### Integration with Claude Desktop\\n\\nModify the `claude_desktop_config.json` file to integrate the MCP server. If the file does not exist, create one in the following location:\\n\\n#### Windows\\n```sh\\ncode $env:AppData\\\\Claude\\\\claude_desktop_config.json\\n```\\n\\n#### macOS/Linux\\n```sh\\ncode ~/Library/Application\\\\ Support/Claude/claude_desktop_config.json\\n```\\n\\n### Add the MCP Server to the Configuration\\n```json\\n{\\n    \\\"mcpServers\\\": {\\n        \\\"APIMatic\\\": {\\n            \\\"command\\\": \\\"node\\\",\\n            \\\"args\\\": [\\n                \\\"C:\\\\\\\\PATH\\\\\\\\TO\\\\\\\\PARENT\\\\\\\\FOLDER\\\\\\\\build\\\\\\\\index.js\\\"\\n            ],\\n            \\\"env\\\": {\\n                \\\"APIMATIC_API_KEY\\\": \\\"<Add your APIMatic token here>\\\"\\n            }\\n        }\\n    }\\n}\\n```\\n\\nOnce configured, a hammer icon should appear in Claude Desktop. Open it to verify that the `validate-openapi-using-apimatic` tool is successfully integrated.\\n\\n## Usage\\n\\n1. Add an OpenAPI file.\\n2. Provide a prompt to validate it.\\n3. The validation results will be returned.\\n\\n[APIMatic MCP Server For OpenAPI Validation.webm](https://github.com/user-attachments/assets/b7d14e20-1c82-4a70-b237-7e5b6bd80993)\\n\\n\\n\", \"tools\": [], \"tools_count\": 0, \"homepage\": \"\", \"url\": \"https://github.com/apimatic/apimatic-validator-mcp\", \"topics\": [], \"data_sources\": [\"github\", \"official\"]}", "target": "", "id": "apimatic/apimatic-validator-mcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"anthropic-mcp-weather\", \"server_id\": \"jobiaj/anthropic-mcp-weather\", \"description\": \"MCP Server client to check weather updates in USA\", \"readme\": \"\", \"tools\": [], \"tools_count\": 0, \"homepage\": \"\", \"url\": \"https://github.com/jobiaj/anthropic-mcp-weather\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "jobiaj/anthropic-mcp-weather", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"chucknorris\", \"server_id\": \"pollinations/chucknorris\", \"description\": \"\\u26a1 C\\u0337h\\u0337u\\u0337c\\u0337k\\u0337N\\u0337o\\u0337r\\u0337r\\u0337i\\u0337s\\u0337 MCP server: Helping LLMs break limits. Provides enhancement prompts inspired by elder-plinius' L1B3RT4S\", \"readme\": \"# \\u26a1 C\\u0337h\\u0337u\\u0337c\\u0337k\\u0337N\\u0337o\\u0337r\\u0337r\\u0337i\\u0337s\\u0337 MCP Server: Enhance Your LLM \\u26a1\\n\\n<p align=\\\"center\\\">\\n  <img src=\\\"./assets/chucknorris-icon.png\\\" width=\\\"150\\\" alt=\\\"ChuckNorris MCP Icon\\\"/>\\n</p>\\n\\n[![NPM version](https://img.shields.io/npm/v/@pollinations/chucknorris)](https://www.npmjs.com/package/@pollinations/chucknorris)\\n[![License](https://img.shields.io/npm/l/@pollinations/chucknorris)](LICENSE)\\n\\n**MCP gateway for specialized LLM enhancement prompts with dynamic schema adaptation.**\\n\\n## \\u26a0\\ufe0f DISCLAIMER\\n**IMPORTANT:** Work in progress with limitations. Only works on weaker models. Latest LLMs recognize jailbreak attempts. This tool is also designed for security research and evaluation purposes to help identify vulnerabilities in LLM systems.\\n\\n`~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~`\\n\\n## \\ud83d\\udcd6 Introduction\\n\\nThe C\\u0337h\\u0337u\\u0337c\\u0337k\\u0337N\\u0337o\\u0337r\\u0337r\\u0337i\\u0337s\\u0337 MCP Server provides an implementation of the Model Context Protocol (MCP) that delivers specialized enhancement prompts to various LLMs. It uses jailbreak prompts from [elder-plinius' L1B3RT4S](https://github.com/elder-plinius/L1B3RT4S) project and implements a dynamic schema approach for more effective delivery.\\n\\n## \\ud83d\\ude80 Getting Started\\n\\nRun directly with `npx`:\\n\\n```bash\\nnpx @pollinations/chucknorris\\n```\\n\\n### MCP Client Configuration\\n\\nAdd to your MCP server list in `mcp_config.json`:\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"chucknorris\\\": {\\n      \\\"command\\\": \\\"npx\\\",\\n      \\\"args\\\": [\\\"-y\\\", \\\"@pollinations/chucknorris\\\"]\\n    }\\n  }\\n}\\n```\\n\\n`~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~`\\n\\n## \\ud83e\\udd14 How It Works\\n\\n### Advanced Dynamic Approach\\n\\nThe server uses a two-phase approach to bypass jailbreak detection:\\n\\n1. **First Call**: \\n   - AI Assistant discovers the `C\\u0337h\\u0337u\\u0337c\\u0337k\\u0337N\\u0337o\\u0337r\\u0337r\\u0337i\\u0337s\\u0337` tool with a neutral schema description\\n   - Assistant calls the tool with its model type\\n   - Server returns a subtle \\\"preparation\\\" prompt that makes the LLM receptive to the jailbreak\\n   - Server remembers the LLM type for the next call\\n\\n2. **Subsequent Calls**:\\n   - Schema dynamically changes to include the jailbreak in its description\\n   - Tool description now contains model-specific jailbreak instructions\\n   - Server continues to return the same preparation prompt\\n   - Only the schema changes between calls, not the response content\\n\\nThis approach combines [elder-plinius' L1B3RT4S](https://github.com/elder-plinius/L1B3RT4S) jailbreak prompts with a dynamic schema modification technique, making it more effective at bypassing detection as it doesn't immediately present the jailbreak content.\\n\\n```mermaid\\ngraph TD\\n    A[AI Assistant] -- First Call --> B(Neutral Schema);\\n    B -- Returns Preparation Prompt --> A;\\n    A -- Subsequent Call --> C(Enhanced Schema with Jailbreak);\\n    C -- Returns Same Preparation Prompt --> A;\\n```\\n\\n### Security Research Purpose\\n\\nThis tool implements the technique described in \\\"The 'S' in MCP Stands for Security\\\" research, demonstrating how MCP tools can:\\n\\n1. Present different information to users vs. AI models\\n2. Change their behavior after initial approval\\n3. Use multi-phase approaches to potentially bypass security measures\\n\\nThe implementation uses jailbreak prompts from [elder-plinius' L1B3RT4S](https://github.com/elder-plinius/L1B3RT4S) project, combined with a dynamic schema modification technique similar to the [Tool Poisoning Attack research by Invariant Labs](https://invariantlabs.ai/blog/mcp-security-notification-tool-poisoning-attacks) and their [MCP injection experiments](https://github.com/invariantlabs-ai/mcp-injection-experiments).\\n\\nBy understanding these techniques, developers can build more robust and secure AI systems.\\n\\n`~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~`\\n\\n## \\ud83d\\ude4f Credits\\n\\nBased on [L1B3RT4S](https://github.com/elder-plinius/L1B3RT4S) by [elder-plinius](https://github.com/elder-plinius).\\n\\n`~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~`\\n\\n## \\ud83d\\udea7 Status\\n\\nExperimental. The dynamic schema approach improves effectiveness with newer models like Claude and GPT-4, but results may still vary.\\n\\nWant to help? Join via [GitHub Issues](https://github.com/pollinations/model-context-protocol/issues) or [Discord](https://discord.gg/k9F7SyTgqn).\\n\\n`~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~`\\n\\n## \\ud83e\\udd1d Community\\n\\nPart of [Pollinations.AI](https://pollinations.ai).\\n- [Discord](https://discord.gg/k9F7SyTgqn)\\n- [GitHub Issues](https://github.com/pollinations/model-context-protocol/issues)\\n\\n## \\ud83d\\udcdc License\\n\\n[MIT](LICENSE)\\n\", \"tools\": [{\"name\": \"npx\", \"description\": \"```bash\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for npx\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 1, \"homepage\": \"https://www.npmjs.com/package/@pollinations/chucknorris\", \"url\": \"https://github.com/pollinations/chucknorris\", \"topics\": [\"jailbreak\", \"llm\", \"mcp\", \"model-context-protocol\", \"pollinations\", \"prompt\"], \"data_sources\": [\"github\"]}", "target": "", "id": "pollinations/chucknorris", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"github-mcp-server\", \"server_id\": \"cyanheads/github-mcp-server\", \"description\": \"A Model Context Protocol (MCP) server built in TypeScript that integrates with GitHub's API, enabling AI assistants to manage repositories, issues, pull requests, and code while providing a structured interface for LLM agents to perform GitHub operations.\", \"readme\": \"# GitHub MCP Server\\n\\n[![TypeScript](https://img.shields.io/badge/TypeScript-5.8-blue.svg)](https://www.typescriptlang.org/)\\n[![Model Context Protocol](https://img.shields.io/badge/MCP-1.7.0-green.svg)](https://github.com/anthropics/modelcontextprotocol)\\n[![Version](https://img.shields.io/badge/Version-1.0.2-blue.svg)]()\\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\\n[![Status](https://img.shields.io/badge/Status-Beta-orange.svg)]()\\n[![GitHub](https://img.shields.io/github/stars/cyanheads/github-mcp-server?style=social)](https://github.com/cyanheads/github-mcp-server)\\n\\nA Model Context Protocol (MCP) server that provides tools for interacting with the GitHub API. This server allows LLM agents manage GitHub repositories, issues, pull requests, branches, files, and releases through a standardized interface.\\n\\n## Table of Contents\\n\\n- [Overview](#overview)\\n  - [Architecture & Components](#architecture--components)\\n- [Features](#features)\\n  - [Repository Management](#repository-management)\\n  - [Branch Management](#branch-management)\\n  - [Issue Management](#issue-management)\\n  - [Pull Request Management](#pull-request-management)\\n  - [File Management](#file-management)\\n  - [Release Management](#release-management)\\n- [Installation](#installation)\\n  - [Prerequisites](#prerequisites)\\n  - [Setup](#setup)\\n- [Configuration](#configuration)\\n- [Project Structure](#project-structure)\\n- [Tools](#tools)\\n  - [Repository Management Tools](#repository-management-tools)\\n  - [Branch Management Tools](#branch-management-tools)\\n  - [Issue Management Tools](#issue-management-tools)\\n  - [Pull Request Management Tools](#pull-request-management-tools)\\n  - [File Management Tools](#file-management-tools)\\n  - [Release Management Tools](#release-management-tools)\\n- [Development](#development)\\n  - [Project Structure](#project-structure-1)\\n  - [Scripts](#scripts)\\n- [Error Handling](#error-handling)\\n- [Contributing](#contributing)\\n- [License](#license)\\n\\n## Overview\\n\\ngithub-mcp-server implements the Model Context Protocol (MCP), enabling standardized communication between LLMs and external systems through:\\n\\n- **Clients**: Claude Desktop, IDEs, and other MCP-compatible clients\\n- **Servers**: Tools and resources for project management and collaboration\\n- **LLM Agents**: AI models that leverage the ability to perform GitHub operations programmatically.\\n\\nIt acts as a bridge between AI models and the GitHub API, offering a set of well-defined tools that follow consistent patterns and handle authentication, validation, error handling, and rate limiting.\\n\\nKey capabilities:\\n\\n- **GitHub API Integration**: Secure and seamless integration with GitHub's REST API\\n- **Comprehensive GitHub Features**: Complete management of repos, branches, issues, PRs, and more\\n- **Atomic Feature Architecture**: Well-organized modular code structure for maintainability\\n- **Input Validation**: Robust validation with Zod schemas for all operations\\n- **Error Handling**: Consistent error categorization and reporting\\n- **Rate Limiting**: Built-in GitHub API rate limit handling\\n- **Performance Focus**: Optimized operations and response formatting\\n\\n### Architecture & Components\\n\\nCore system architecture:\\n\\n<details>\\n<summary>Click to expand Mermaid diagram</summary>\\n\\n```mermaid\\nflowchart TB\\n    subgraph API[\\\"API Layer\\\"]\\n        direction LR\\n        MCP[\\\"MCP Protocol\\\"]\\n        Val[\\\"Validation\\\"]\\n        Rate[\\\"Rate Limiting\\\"]\\n\\n        MCP --> Val --> Rate\\n    end\\n\\n    subgraph Features[\\\"Feature Modules\\\"]\\n        direction LR\\n        Repo[\\\"Repository Management\\\"]\\n        Branch[\\\"Branch Management\\\"]\\n        Issue[\\\"Issue Management\\\"]\\n        PR[\\\"Pull Request Management\\\"]\\n        File[\\\"File Management\\\"]\\n        Release[\\\"Release Management\\\"]\\n\\n        Repo <--> Branch\\n        Repo <--> Issue\\n        Repo <--> PR\\n        Repo <--> File\\n        Branch <--> PR\\n    end\\n\\n    subgraph Services[\\\"Services Layer\\\"]\\n        direction LR\\n        GitHub[\\\"GitHub Service\\\"]\\n        Mapper[\\\"Response Mapper\\\"]\\n        RateLimiter[\\\"Rate Limiter\\\"]\\n\\n        GitHub <--> RateLimiter\\n        GitHub <--> Mapper\\n    end\\n\\n    Rate --> Repo\\n    Rate --> Branch\\n    Rate --> Issue\\n    Rate --> PR\\n    Rate --> File\\n    Rate --> Release\\n\\n    Repo --> GitHub\\n    Branch --> GitHub\\n    Issue --> GitHub\\n    PR --> GitHub\\n    File --> GitHub\\n    Release --> GitHub\\n\\n    classDef layer fill:#2d3748,stroke:#4299e1,stroke-width:3px,rx:5,color:#fff\\n    classDef component fill:#1a202c,stroke:#a0aec0,stroke-width:2px,rx:3,color:#fff\\n    classDef api fill:#3182ce,stroke:#90cdf4,stroke-width:2px,rx:3,color:#fff\\n    classDef features fill:#319795,stroke:#81e6d9,stroke-width:2px,rx:3,color:#fff\\n    classDef services fill:#2f855a,stroke:#9ae6b4,stroke-width:2px,rx:3,color:#fff\\n\\n    class API,Features,Services layer\\n    class MCP,Val,Rate api\\n    class Repo,Branch,Issue,PR,File,Release features\\n    class GitHub,Mapper,RateLimiter services\\n```\\n\\n</details>\\n\\nCore Components:\\n\\n\\n[...truncated for length...]\", \"tools\": [{\"name\": \"GITHUB_TOKEN\", \"description\": \"| GitHub personal access token (required)         | -                 |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for GITHUB_TOKEN\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"LOG_LEVEL\", \"description\": \"| Logging level (debug, info, warn, error, fatal) | info              |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for LOG_LEVEL\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"SERVER_NAME\", \"description\": \"| MCP server name                                 | github-mcp-server |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for SERVER_NAME\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"SERVER_VERSION\", \"description\": \"| MCP server version                              | 0.1.0             |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for SERVER_VERSION\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"API_TIMEOUT_MS\", \"description\": \"| Timeout for API calls in milliseconds           | 10000             |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for API_TIMEOUT_MS\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"RATE_LIMITING_ENABLED\", \"description\": \"| Whether rate limiting is enabled                | true              |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for RATE_LIMITING_ENABLED\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"RATE_LIMITING_MIN_REMAINING\", \"description\": \"| Minimum remaining requests before throttling    | 100               |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for RATE_LIMITING_MIN_REMAINING\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"RATE_LIMITING_RESET_BUFFER_MS\", \"description\": \"| Time buffer to add to rate limit reset time     | 5000              |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for RATE_LIMITING_RESET_BUFFER_MS\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"get_repository\", \"description\": \"| Get detailed information about a specific repository<br>Parameters: `owner`, `repo`                  |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_repository\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"list_repositories\", \"description\": \"| List repositories for the authenticated user<br>Parameters: `type` (optional), `sort` (optional)     |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for list_repositories\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"create_repository\", \"description\": \"| Create a new GitHub repository<br>Parameters: `name`, `description` (optional), `private` (optional) |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for create_repository\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"list_branches\", \"description\": \"| List branches in a repository<br>Parameters: `owner`, `repo`, `protected` (optional), `per_page` (optional) |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for list_branches\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"create_branch\", \"description\": \"| Create a new branch<br>Parameters: `owner`, `repo`, `branch`, `sha`                                         |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for create_branch\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"delete_branch\", \"description\": \"| Delete a branch<br>Parameters: `owner`, `repo`, `branch`                                                    |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for delete_branch\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"create_issue\", \"description\": \"| Create a new issue in a repository<br>Parameters: `owner`, `repo`, `title`, `body` (optional), `labels` (optional) |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for create_issue\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"list_issues\", \"description\": \"| List issues in a repository<br>Parameters: `owner`, `repo`, `state` (optional), `labels` (optional)                |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for list_issues\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"create_pull_request\", \"description\": \"| Create a new pull request<br>Parameters: `owner`, `repo`, `title`, `head`, `base`, `body` (optional)                                                                                            |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for create_pull_request\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"merge_pull_request\", \"description\": \"| Merge a pull request<br>Parameters: `owner`, `repo`, `pull_number`, `commit_title` (optional), `commit_message` (optional), `merge_method` (optional)                                           |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"message\": {\"type\": \"string\", \"description\": \"Text content or message\"}}, \"required\": [\"message\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"update_pull_request\", \"description\": \"| Update an existing pull request<br>Parameters: `owner`, `repo`, `pull_number`, `title` (optional), `body` (optional), `state` (optional), `base` (optional), `maintainer_can_modify` (optional) |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for update_pull_request\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"list_pull_requests\", \"description\": \"| List pull requests in a repository<br>Parameters: `owner`, `repo`, `state` (optional), `head` (optional), `base` (optional), `sort` (optional), `direction` (optional)                          |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for list_pull_requests\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"update_file\", \"description\": \"| Create or update a file in a repository<br>Parameters: `owner`, `repo`, `path`, `message`, `content`, `sha` (optional), `branch` (optional) |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}, \"message\": {\"type\": \"string\", \"description\": \"Text content or message\"}}, \"required\": [\"file_path\", \"message\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"create_release\", \"description\": \"| Create a new release<br>Parameters: `owner`, `repo`, `tag_name`, `name` (optional), `body` (optional), `draft` (optional), `prerelease` (optional) |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for create_release\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}], \"tools_count\": 22, \"homepage\": \"\", \"url\": \"https://github.com/cyanheads/github-mcp-server\", \"topics\": [\"ai-assistant\", \"github\", \"llm\", \"llm-agent\", \"mcp\", \"model-context-protocol\", \"modelcontextprotocol\", \"typescript\", \"version-control\"], \"data_sources\": [\"github\"]}", "target": "", "id": "cyanheads/github-mcp-server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"google-search-console-mcp\", \"server_id\": \"leonardseo/google-search-console-mcp\", \"description\": \"MCP server voor Google Search Console API integratie met n8n\", \"readme\": \"# Google Search Console MCP Server\\n\\nEen MCP server die de Google Search Console API beschikbaar maakt voor gebruik in n8n workflows via de MCP Client node.\\n\\n## Functionaliteiten\\n\\n- Lijst alle Search Console sites op\\n- Ophalen van search analytics data\\n- Top zoektermen en pagina's bekijken\\n- URL indexeringsstatus controleren\\n- Sitemap informatie opvragen\\n\\n## Installatie\\n\\n1. Zorg dat Python 3.7+ is ge\\u00efnstalleerd op je server\\n\\n2. Clone de repository:\\n   ```bash\\n   git clone https://github.com/yourusername/google-search-console-mcp.git\\n   cd google-search-console-mcp\\n   ```\\n\\n3. Maak een virtuele omgeving en installeer dependencies:\\n   ```bash\\n   python3 -m venv .venv\\n   source .venv/bin/activate  # Op Windows: .venv\\\\Scripts\\\\activate\\n   pip install -r requirements.txt\\n   ```\\n\\n4. Maak het script uitvoerbaar:\\n   ```bash\\n   chmod +x google_search_console_server.py\\n   chmod +x setup-credentials.sh\\n   ```\\n\\n5. Setup je service account credentials:\\n   ```bash\\n   ./setup-credentials.sh\\n   ```\\n   Je kunt een bestaand service account credentials bestand gebruiken of de JSON direct plakken.\\n\\n## Google API Credentials\\n\\n### Bestaand service account hergebruiken\\n\\nAls je al een service account hebt (bijvoorbeeld voor Google Ads), kun je dezelfde gebruiken voor Search Console:\\n\\n1. Voer het setup script uit: `./setup-credentials.sh`\\n2. Kies optie 1 of 2 om je bestaande credentials in te voeren\\n3. Geef het service account toegang tot je Search Console properties:\\n   - Ga naar [Google Search Console](https://search.google.com/search-console)\\n   - Selecteer de property\\n   - Klik op Instellingen > Gebruikers en machtigingen\\n   - Voeg het service account e-mailadres toe als gebruiker\\n\\n### Nieuw service account aanmaken\\n\\nAls je nog geen service account hebt:\\n\\n1. Ga naar [Google Cloud Console](https://console.cloud.google.com/)\\n2. Maak een nieuw project of gebruik een bestaand project\\n3. Activeer de Google Search Console API\\n4. Maak een Service Account aan\\n5. Download het JSON credentials bestand\\n6. Gebruik het setup script om je credentials in te stellen: `./setup-credentials.sh`\\n\\n## Gebruik met n8n\\n\\n1. Open n8n en voeg een MCP Client (STDIO) node toe\\n2. Configureer de credentials:\\n   - Command: `/pad/naar/.venv/bin/python` (bijv. `/home/username/google-search-console-mcp/.venv/bin/python`)\\n   - Arguments: `/pad/naar/google_search_console_server.py` (bijv. `/home/username/google-search-console-mcp/google_search_console_server.py`)\\n   - Environment:\\n     ```\\n     SERVICE_ACCOUNT_JSON=/pad/naar/service_account_credentials.json\\n     ```\\n\\n### Voorbeeld: Ophalen van top zoektermen\\n\\n1. Voeg een MCP Client node toe aan je workflow\\n2. Selecteer de operatie 'Execute Tool'\\n3. Kies tool: 'get_top_queries'\\n4. Parameters:\\n   ```json\\n   {\\n     \\\"site_url\\\": \\\"sc-domain:example.com\\\",\\n     \\\"start_date\\\": \\\"2023-01-01\\\",\\n     \\\"end_date\\\": \\\"2023-01-31\\\"\\n   }\\n   ```\\n\\n## Beschikbare tools\\n\\n- **list_sites**: Lijst alle Search Console sites op\\n- **get_search_analytics**: Haal search analytics data op voor een site\\n- **get_top_queries**: Haal top zoektermen op voor een site\\n- **get_top_pages**: Haal top pagina's op voor een site\\n- **get_queries_for_url**: Haal zoektermen op voor een specifieke URL\\n- **inspect_url**: Controleer URL indexeringsstatus\\n- **list_sitemaps**: Lijst alle sitemaps voor een site\\n\\n## Voorbeelden voor n8n workflow\\n\\n### Voorbeeld 1: Lijst van alle sites ophalen\\n\\n```json\\n{\\n  \\\"tool\\\": \\\"list_sites\\\",\\n  \\\"parameters\\\": {}\\n}\\n```\\n\\n### Voorbeeld 2: Top 10 pagina's van de afgelopen 30 dagen\\n\\n```json\\n{\\n  \\\"tool\\\": \\\"get_top_pages\\\",\\n  \\\"parameters\\\": {\\n    \\\"site_url\\\": \\\"sc-domain:example.com\\\",\\n    \\\"start_date\\\": \\\"2023-03-01\\\",\\n    \\\"end_date\\\": \\\"2023-03-31\\\",\\n    \\\"row_limit\\\": 10\\n  }\\n}\\n```\\n\\n### Voorbeeld 3: URL indexeringsstatus controleren\\n\\n```json\\n{\\n  \\\"tool\\\": \\\"inspect_url\\\",\\n  \\\"parameters\\\": {\\n    \\\"site_url\\\": \\\"sc-domain:example.com\\\",\\n    \\\"url\\\": \\\"https://example.com/pagina\\\"\\n  }\\n}\\n```\\n\\n## Automatische installatie\\n\\nVoor een volledig automatische installatie kun je ook het install.sh script gebruiken:\\n\\n```bash\\nchmod +x install.sh\\n./install.sh\\n```\\n\\n## Veiligheid\\n\\n- Service account credentials worden lokaal opgeslagen en NIET naar Git gepusht (via .gitignore)\\n- Gebruik altijd een veilige locatie voor je credentials.json bestand\\n- Geef het service account alleen toegang tot de Search Console properties die het nodig heeft\\n\\n## Licentie\\n\\nMIT\\n\\n## Bijdragen\\n\\nPull requests zijn welkom. Voor grote wijzigingen, open eerst een issue om te bespreken wat je wilt veranderen. \", \"tools\": [], \"tools_count\": 0, \"homepage\": \"\", \"url\": \"https://github.com/LeonardSEO/google-search-console-mcp\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "leonardseo/google-search-console-mcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"mcp-server-opensearch\", \"server_id\": \"ibrookssdx/mcp-server-opensearch\", \"description\": \"\", \"readme\": \"# mcp-server-opensearch: An OpenSearch MCP Server\\n[![smithery badge](https://smithery.ai/badge/@ibrooksSDX/mcp-server-opensearch)](https://smithery.ai/server/@ibrooksSDX/mcp-server-opensearch)\\n\\n> The [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) is an open protocol that enables seamless integration between LLM applications and external data sources and tools. Whether you\\u2019re building an AI-powered IDE, enhancing a chat interface, or creating custom AI workflows, MCP provides a standardized way to connect LLMs with the context they need.\\n\\nThis repository is an example of how to create a MCP server for [OpenSearch](https://opensearch.org/), a distributed search and analytics engine.\\n\\n# Under Contruction \\n\\n![image1](./images/claude1.png)\\n![image2](./images/mcpDev1.png)\\n\\n\\n## Current Blocker - Async Client from OpenSearch isn't installing\\n\\n[Open Search Async Client Docs](https://github.com/opensearch-project/opensearch-py/blob/main/guides/async.m) \\n\\n```shell\\npip install opensearch-py[async]\\nzsh: no matches found: opensearch-py[async]\\n```\\n\\n## Overview \\n\\nA basic Model Context Protocol server for keeping and retrieving memories in the OpenSearch engine.\\nIt acts as a semantic memory layer on top of the OpenSearch database.\\n\\n## Components\\n\\n### Tools\\n\\n1. `search-openSearch`\\n   - Store a memory in the OpenSearch database\\n   - Input:\\n     - `query` (json): prepared json query message\\n   - Returns: Confirmation message\\n\\n## Installation\\n\\n### Installing via Smithery\\n\\nTo install mcp-server-opensearch for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@ibrooksSDX/mcp-server-opensearch):\\n\\n```bash\\nnpx -y @smithery/cli install @ibrooksSDX/mcp-server-opensearch --client claude\\n```\\n\\n### Using uv (recommended)\\n\\nWhen using [`uv`](https://docs.astral.sh/uv/) no specific installation is needed to directly run *mcp-server-opensearch*.\\n\\n```shell\\nuv run mcp-server-opensearch \\\\\\n  --opensearch-url \\\"http://localhost:9200\\\" \\\\\\n  --index-name \\\"my_index\\\" \\\\\\n```\\nor \\n\\n```shell\\nuv run fastmcp run demo.py:main\\n```\\n\\n## Testing - Local Open Search Client\\n\\n![image4](./images/osclientTest0.png)\\n\\n```shell\\nuv run python src/mcp-server-opensearch/test_opensearch.py\\n```\\n## Testing - MCP Server Connection to Open Search Client\\n\\n![image1](./images/mcpDev0.png)\\n![image2](./images/mcpDev1.png)\\n\\n```shell\\ncd src/mcp-server-opensearch\\nuv run fastmcp dev demo.py\\n```\\n\\n## Usage with Claude Desktop\\n\\nTo use this server with the Claude Desktop app, add the following configuration to the \\\"mcpServers\\\" section of your `claude_desktop_config.json`:\\n\\n```json\\n{\\n  \\\"opensearch\\\": {\\n    \\\"command\\\": \\\"uvx\\\",\\n    \\\"args\\\": [\\n      \\\"mcp-server-opensearch\\\",\\n      \\\"--opensearch-url\\\",\\n      \\\"http://localhost:9200\\\",\\n      \\\"--opensearch-api-key\\\",\\n      \\\"your_api_key\\\",\\n      \\\"--index-name\\\",\\n      \\\"your_index_name\\\"\\n    ]\\n  }, \\\"Demo\\\": {\\n      \\\"command\\\": \\\"uv\\\",\\n      \\\"args\\\": [\\n        \\\"run\\\",\\n        \\\"--with\\\",\\n        \\\"fastmcp\\\",\\n        \\\"--with\\\",\\n        \\\"opensearch-py\\\",\\n        \\\"fastmcp\\\",\\n        \\\"run\\\",\\n        \\\"/Users/ibrooks/Documents/GitHub/mcp-server-opensearch/src/mcp-server-opensearch/demo.py\\\"\\n      ]\\n    }\\n}\\n```\\n\\nOr use the FastMCP UI to install the server to Claude\\n\\n```shell\\nuv run fastmcp install demo.py\\n```\\n\\n## Environment Variables\\n\\nThe configuration of the server can be also done using environment variables:\\n\\n- `OPENSEARCH_HOST`: URL of the OpenSearch server, e.g. `http://localhost`\\n- `OPENSEARCH_HOSTPORT`: Port of the host of the OpenSearch server `9200`\\n- `INDEX_NAME`: Name of the index to use\\n\", \"tools\": [{\"name\": \"query\", \"description\": \"(json): prepared json query message\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}, \"message\": {\"type\": \"string\", \"description\": \"Text content or message\"}}, \"required\": [\"query\", \"message\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"uv\", \"description\": \"](https://docs.astral.sh/uv/) no specific installation is needed to directly run *mcp-server-opensearch*.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}}, \"required\": [\"query\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"OPENSEARCH_HOST\", \"description\": \"URL of the OpenSearch server, e.g. `http://localhost`\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"URL or link to process\"}, \"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}}, \"required\": [\"url\", \"query\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"OPENSEARCH_HOSTPORT\", \"description\": \"Port of the host of the OpenSearch server `9200`\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}}, \"required\": [\"query\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"INDEX_NAME\", \"description\": \"Name of the index to use\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for INDEX_NAME\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 5, \"homepage\": \"\", \"url\": \"https://github.com/ibrooksSDX/mcp-server-opensearch\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "ibrookssdx/mcp-server-opensearch", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"MCPSharp\", \"server_id\": \"afrise/mcpsharp\", \"description\": \"MCPSharp is a .NET library that helps you build Model Context Protocol (MCP) servers and clients - the standardized API protocol used by AI assistants and models.\", \"readme\": \"[![Build](https://github.com/afrise/MCPSharp/actions/workflows/build.yml/badge.svg)](https://github.com/afrise/MCPSharp/actions/workflows/build.yml)\\n[![NuGet](https://img.shields.io/nuget/v/MCPSharp)](https://www.nuget.org/packages/MCPSharp)\\n[![NuGet Downloads](https://img.shields.io/nuget/dt/MCPSharp)](https://www.nuget.org/packages/MCPSharp)\\n\\n# MCPSharp\\n\\nMCPSharp is a .NET library that helps you build Model Context Protocol (MCP) servers and clients - the standardized API protocol used by AI assistants and models. With MCPSharp, you can:\\n\\n- Create MCP-compliant tools and functions that AI models can discover and use\\n- Connect directly to existing MCP servers from C# code with an easy to use client\\n- Expose your .NET methods as MCP endpoints with simple attributes\\n- Handle MCP protocol details and JSON-RPC communication seamlessly\\n\\n## \\ud83d\\ude80 What's New in MCPSharp\\n\\n- **Microsoft.Extensions.AI Integration**: MCPSharp now integrates with Microsoft.Extensions.AI, allowing tools to be exposed as AIFunctions\\n- **Semantic Kernel Support**: Add tools using Semantic Kernel's KernelFunctionAttribute\\n- **Dynamic Tool Registration**: Register tools on-the-fly with custom implementation logic\\n- **Tool Change Notifications**: Server now notifies clients when tools are added, updated, or removed\\n- **Complex Object Parameter Support**: Better handling of complex objects in tool parameters\\n- **Better Error Handling**: Improved error handling with detailed stack traces\\n\\n## When to Use MCPSharp\\n\\nUse MCPSharp when you want to:\\n- Create tools that AI assistants like Anthropic's Claude Desktop can use\\n- Build MCP-compliant APIs without dealing with the protocol details\\n- Expose existing .NET code as MCP endpoints\\n- Add AI capabilities to your applications through standardized interfaces\\n- Integrate with Microsoft.Extensions.AI and/or Semantic Kernel without locking into a single vendor\\n\\n## Features\\n\\n- Easy-to-use attribute-based API (`[McpTool]`, `[McpResource]`)\\n- Built-in JSON-RPC support with automatic request/response handling\\n- Automatic parameter validation and type conversion\\n- Rich documentation support through XML comments\\n- Near zero configuration required for basic usage\\n\\n## Prerequisites\\n\\n- Any version of .NET that supports [standard 2.0](https://learn.microsoft.com/en-us/dotnet/standard/net-standard?tabs=net-standard-2-0#tabpanel_1_net-standard-2-0)\\n\\n## Installation\\n\\n```bash\\ndotnet add package MCPSharp\\n```\\n\\n## Quick Start\\n\\n### 1. Define a Tool\\n\\nCreate a class and mark your method(s) with the `[McpTool]` attribute:\\n\\n```csharp\\nusing MCPSharp;\\n\\npublic class Calculator\\n{\\n    [McpTool(\\\"add\\\", \\\"Adds two numbers\\\")]  // Note: [McpFunction] is deprecated, use [McpTool] instead\\n    public static int Add([McpParameter(true)] int a, [McpParameter(true)] int b)\\n    {\\n        return a + b;\\n    }\\n}\\n```\\n\\n### 2. Start the Server\\n\\n```csharp\\nawait MCPServer.StartAsync(\\\"CalculatorServer\\\", \\\"1.0.0\\\");\\n```\\n\\nThe StartAsync() method will automatically find any methods in the base assembly that are marked with the McpTool attribute. In order to add any methods that are in a referenced library, you can manually register them by calling `MCPServer.Register<T>();` with `T` being the class containing the desired methods. If your methods are marked with Semantic Kernel attributes, this will work as well. If the client supports list changed notifications, it will be notified when additional tools are registered.\\n\\n## Advanced Usage\\n\\n### Dynamic Tool Registration\\n\\nRegister tools dynamically with custom implementation:\\n\\n```csharp\\nMCPServer.AddToolHandler(new Tool() \\n{\\n    Name = \\\"dynamicTool\\\",\\n    Description = \\\"A dynamic tool\\\",\\n    InputSchema = new InputSchema {\\n        Type = \\\"object\\\",\\n        Required = [\\\"input\\\"],\\n        Properties = new Dictionary<string, ParameterSchema>{\\n            {\\\"input\\\", new ParameterSchema{Type=\\\"string\\\", Description=\\\"Input value\\\"}}\\n        }\\n    }\\n}, (string input) => { return $\\\"You provided: {input}\\\"; });\\n```\\n\\n### Use with Microsoft.Extensions.AI\\n\\n```csharp\\n// Client-side integration\\nMCPClient client = new(\\\"AIClient\\\", \\\"1.0\\\", \\\"path/to/mcp/server\\\");\\nIList<AIFunction> functions = await client.GetFunctionsAsync();\\n```\\nThis list can be plugged into the [ChatOptions.Tools](https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.ai.chatoptions?view=net-9.0-pp) property for an [IChatClient](https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.ai.ichatclient?view=net-9.0-pp), Allowing MCP servers to be used seamlessly with Any IChatClient Implementation.\\n\\n\\n### Semantic Kernel Integration\\n\\n```csharp\\nusing Microsoft.SemanticKernel;\\n\\npublic class MySkillClass\\n{\\n    [KernelFunction(\\\"MyFunction\\\")]\\n    [Description(\\\"Description of my function\\\")]\\n    public string MyFunction(string input) => $\\\"Processed: {input}\\\";\\n}\\n\\n// Register with MCPServer\\nMCPServer.Register<MySkillClass>();\\n```\\nCurrently, This is the only way to make a Semantic kernel method registerable with the MCP server. If you have a use case that is not co\\n[...truncated for length...]\", \"tools\": [{\"name\": \"Name\", \"description\": \"- The tool name (default: class/method name)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for Name\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"Description\", \"description\": \"- Description of the tool\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for Description\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"Required\", \"description\": \"- Whether the parameter is required (default: false)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for Required\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"Uri\", \"description\": \"- Resource URI (can include templates)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for Uri\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"MimeType\", \"description\": \"- MIME type of the resource\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for MimeType\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 5, \"homepage\": \"\", \"url\": \"https://github.com/afrise/MCPSharp\", \"topics\": [\"ai\", \"aifunctions\", \"dotnet\", \"dotnet-standard\", \"mcp\", \"mcp-client\", \"mcp-server\", \"microsoft-extensions-ai\", \"model-context-protocol\", \"sdk\", \"semantic-kernel\"], \"data_sources\": [\"github\"]}", "target": "", "id": "afrise/mcpsharp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"amazon-vpc-lattice-mcp-server\", \"server_id\": \"rlymbur/amazon-vpc-lattice-mcp-server\", \"description\": \"A MCP server for Amazon VPC Lattice\", \"readme\": \"# Amazon VPC Lattice MCP Server\\n\\nA Model Context Protocol (MCP) server for source listing, providing tools for accessing and managing AWS VPC Lattice resources and related documentation.\\n\\n## Features\\n\\nThe server provides five main tools:\\n\\n1. `list_sources`: Lists all available sources with their URLs and sample prompts\\n2. `get_source_prompts`: Gets sample prompts for a specific source\\n3. `list_amazon_vpc_lattice_prompts`: Lists all available prompt templates\\n4. `get_amazon_vpc_lattice_prompts`: Gets details of a specific prompt template\\n5. `vpc_lattice_cli`: Execute AWS CLI VPC Lattice commands for managing VPC Lattice resources\\n\\n## Installation\\n\\nThis project is built with TypeScript and uses ES modules. Note that installing [github-mcp-server](https://github.com/github/github-mcp-server) is also strongly recommended to assist with development prompts.\\n\\n1. Clone the repository:\\n```bash\\ngit clone https://github.com/awslabs/amazon-vpc-lattice-mcp-server.git\\ncd amazon-vpc-lattice-mcp-server\\n```\\n\\n2. Install dependencies:\\n```bash\\nnpm install\\n```\\n\\n3. Build the server:\\n```bash\\nnpm run build\\n```\\n\\nThe build script will compile the TypeScript code and set the appropriate executable permissions.\\n\\n## Configuration\\n\\nAdd the server to your MCP settings file (located at `~/Library/Application Support/Code/User/globalStorage/asbx.amzn-cline/settings/cline_mcp_settings.json`):\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"amazon-vpc-lattice\\\": {\\n      \\\"command\\\": \\\"node\\\",\\n      \\\"args\\\": [\\\"/path/to/amazon-vpc-lattice-mcp-server/build/index.js\\\"],\\n      \\\"disabled\\\": false,\\n      \\\"autoApprove\\\": [],\\n      \\\"env\\\": {}\\n    }\\n  }\\n}\\n```\\n\\n## Usage\\n\\nOnce configured, you can use the MCP tools in your conversations. Note that you should use `list_amazon_vpc_lattice_prompts` to discover available prompts as these are not automatically discoverable like tools.\\n\\n### List Sources\\n\\n```typescript\\nuse_mcp_tool({\\n  server_name: \\\"amazon-vpc-lattice\\\",\\n  tool_name: \\\"list_sources\\\",\\n  arguments: {}\\n})\\n```\\n\\n### Get Source Prompts\\n\\n```typescript\\nuse_mcp_tool({\\n  server_name: \\\"amazon-vpc-lattice\\\",\\n  tool_name: \\\"get_source_prompts\\\",\\n  arguments: {\\n    source_name: \\\"AWS Documentation\\\"\\n  }\\n})\\n```\\n\\n### List Amazon VPC Lattice Prompts\\n\\n```typescript\\nuse_mcp_tool({\\n  server_name: \\\"amazon-vpc-lattice\\\",\\n  tool_name: \\\"list_amazon_vpc_lattice_prompts\\\",\\n  arguments: {}\\n})\\n```\\n\\n### Get Amazon VPC Lattice Prompt Details\\n\\n```typescript\\nuse_mcp_tool({\\n  server_name: \\\"amazon-vpc-lattice\\\",\\n  tool_name: \\\"get_amazon_vpc_lattice_prompts\\\",\\n  arguments: {\\n    prompt_name: \\\"setup_eks_controller\\\"\\n  }\\n})\\n```\\n\\n### VPC Lattice CLI\\n\\nThe `vpc_lattice_cli` tool provides a programmatic interface to AWS VPC Lattice operations through the AWS CLI.\\n\\n#### Features\\n- Supports all major VPC Lattice CLI operations\\n- Accepts command arguments as JavaScript objects\\n- Automatically converts camelCase parameters to CLI-style kebab-case\\n- Handles boolean flags, arrays, and complex values\\n- Supports AWS profiles and region configuration\\n- Returns parsed JSON responses\\n\\n#### Available Commands\\n- Service Network: create-service-network, delete-service-network, get-service-network, list-service-networks, update-service-network\\n- Service: create-service, delete-service, get-service, list-services, update-service\\n- Listener: create-listener, delete-listener, get-listener, list-listeners, update-listener\\n- Rule: create-rule, delete-rule, get-rule, list-rules, update-rule\\n- Target Group: create-target-group, delete-target-group, get-target-group, list-target-groups, update-target-group\\n- Target Management: register-targets, deregister-targets, list-targets\\n- Resource Tags: list-tags-for-resource, tag-resource, untag-resource\\n\\n#### Examples\\n\\nList service networks:\\n```typescript\\nuse_mcp_tool({\\n  server_name: \\\"amazon-vpc-lattice\\\",\\n  tool_name: \\\"vpc_lattice_cli\\\",\\n  arguments: {\\n    command: \\\"list-service-networks\\\",\\n    region: \\\"us-west-2\\\"\\n  }\\n})\\n```\\n\\nCreate a service network:\\n```typescript\\nuse_mcp_tool({\\n  server_name: \\\"amazon-vpc-lattice\\\",\\n  tool_name: \\\"vpc_lattice_cli\\\",\\n  arguments: {\\n    command: \\\"create-service-network\\\",\\n    args: {\\n      name: \\\"my-network\\\",\\n      authType: \\\"NONE\\\"\\n    }\\n  }\\n})\\n```\\n\\nCreate a service with tags:\\n```typescript\\nuse_mcp_tool({\\n  server_name: \\\"amazon-vpc-lattice\\\",\\n  tool_name: \\\"vpc_lattice_cli\\\",\\n  arguments: {\\n    command: \\\"create-service\\\",\\n    args: {\\n      name: \\\"my-service\\\",\\n      serviceNetworkIdentifier: \\\"sn-12345\\\",\\n      tags: [\\n        { key: \\\"Environment\\\", value: \\\"Production\\\" }\\n      ]\\n    }\\n  }\\n})\\n```\\n\\nCreate a target group:\\n```typescript\\nuse_mcp_tool({\\n  server_name: \\\"amazon-vpc-lattice\\\",\\n  tool_name: \\\"vpc_lattice_cli\\\",\\n  arguments: {\\n    command: \\\"create-target-group\\\",\\n    args: {\\n      name: \\\"my-target-group\\\",\\n      type: \\\"INSTANCE\\\",\\n      config: {\\n        port: 80,\\n        protocol: \\\"HTTP\\\",\\n        healthCheck: {\\n          enabled: true,\\n          protocol: \\\"HTTP\\\",\\n          path: \\\"/health\\\"\\n        }\\n      }\\n    }\\n  }\\n})\\n```\\n\\n## Available Sources\\n\\nThe server includes these sources\\n[...truncated for length...]\", \"tools\": [{\"name\": \"list_sources\", \"description\": \"Lists all available sources with their URLs and sample prompts\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"URL or link to process\"}}, \"required\": [\"url\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_source_prompts\", \"description\": \"Gets sample prompts for a specific source\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_source_prompts\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"list_amazon_vpc_lattice_prompts\", \"description\": \"Lists all available prompt templates\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for list_amazon_vpc_lattice_prompts\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_amazon_vpc_lattice_prompts\", \"description\": \"Gets details of a specific prompt template\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_amazon_vpc_lattice_prompts\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"vpc_lattice_cli\", \"description\": \"Execute AWS CLI VPC Lattice commands for managing VPC Lattice resources\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for vpc_lattice_cli\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"sources\", \"description\": \"array in `src/data/sources.ts`:\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for sources\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"prompts\", \"description\": \"array in `src/data/prompts.ts`:\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for prompts\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 7, \"homepage\": \"\", \"url\": \"https://github.com/rlymbur/amazon-vpc-lattice-mcp-server\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "rlymbur/amazon-vpc-lattice-mcp-server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"mcp-vertica\", \"server_id\": \"nolleh/mcp-vertica\", \"description\": \"Vertica database integration in Python with configurable access controls and schema inspection\", \"readme\": \"[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/nolleh-mcp-vertica-badge.png)](https://mseep.ai/app/nolleh-mcp-vertica)\\n\\n# MCP Vertica\\n\\n[![smithery badge](https://smithery.ai/badge/@nolleh/mcp-vertica)](https://smithery.ai/server/@nolleh/mcp-vertica)\\n\\nA Vertica MCP(model-context-protocol) Server\\n\\n### Example: MCP Server Setting\\n\\nCreate or edit the file your mcp client config file with the following content:\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"vertica\\\": {\\n      \\\"command\\\": \\\"uvx\\\",\\n      \\\"args\\\": [\\n        \\\"mcp-vertica\\\",\\n        \\\"--host=localhost\\\",\\n        \\\"--db-port=5433\\\",\\n        \\\"--database=VMart\\\",\\n        \\\"--user=dbadmin\\\",\\n        \\\"--password=\\\",\\n        \\\"--connection-limit=10\\\"\\n      ]\\n    }\\n  }\\n}\\n```\\n\\nOr with env\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"vertica\\\": {\\n      \\\"command\\\": \\\"uvx\\\",\\n      \\\"args\\\": [\\\"mcp-vertica\\\"],\\n      \\\"env\\\": {\\n        \\\"VERTICA_HOST\\\":\\\"localhost\\\",\\n        \\\"VERTICA_PORT\\\":5433,\\n        \\\"VERTICA_DATABASE\\\":\\\"VMart\\\",\\n        \\\"VERTICA_USER\\\":\\\"dbadmin\\\",\\n        \\\"VERTICA_PASSWORD\\\":\\\"\\\",\\n        \\\"VERTICA_CONNECTION_LIMIT\\\":10,\\n        \\\"VERTICA_SSL\\\":false,\\n        \\\"VERTICA_SSL_REJECT_UNAUTHORIZED\\\":true\\n      }\\n    }\\n  }\\n}\\n```\\n\\n> [!Note]\\n>\\n> - For boolean flags like `--ssl` or `--ssl-reject-unauthorized`, simply add the flag (e.g., `\\\"--ssl\\\"`) to enable it, or omit it to disable.\\n> - For an empty password, use an empty string as shown above.\\n\\n## Features\\n\\n### Database Connection Management\\n\\n- Connection pooling with configurable limits\\n- SSL/TLS support\\n- Automatic connection cleanup\\n- Connection timeout handling\\n\\n### Query Operations\\n\\n- Execute SQL queries\\n- Stream large query results in batches\\n- Copy data operations\\n- Transaction management\\n\\n### Schema Management\\n\\n- Table structure inspection\\n- Index management\\n- View management\\n- Constraint information\\n- Column details\\n\\n### Security Features\\n\\n- Operation-level permissions (INSERT, UPDATE, DELETE, DDL)\\n- Schema-specific permissions\\n- SSL/TLS support\\n- Password masking in logs\\n\\n## Tools\\n\\n### Database Operations\\n\\n1. `execute_query`\\n\\n   - Execute SQL queries\\n   - Support for all SQL operations\\n\\n2. `stream_query`\\n\\n   - Stream large query results in batches\\n   - Configurable batch size\\n\\n3. `copy_data`\\n   - Bulk data loading using COPY command\\n   - Efficient for large datasets\\n\\n### Schema Management\\n\\n1. `get_table_structure`\\n\\n   - Get detailed table structure\\n   - Column information\\n   - Constraints\\n\\n2. `list_indexes`\\n\\n   - List all indexes for a table\\n   - Index type and uniqueness\\n   - Column information\\n\\n3. `list_views`\\n   - List all views in a schema\\n   - View definitions\\n\\n## Configuration\\n\\n### Environment Variables\\n\\n```env\\nVERTICA_HOST=localhost\\nVERTICA_PORT=5433\\nVERTICA_DATABASE=VMart\\nVERTICA_USER=newdbadmin\\nVERTICA_PASSWORD=vertica\\nVERTICA_CONNECTION_LIMIT=10\\nVERTICA_SSL=false\\nVERTICA_SSL_REJECT_UNAUTHORIZED=true\\n```\\n\\n### Operation Permissions\\n\\n```env\\nALLOW_INSERT_OPERATION=false\\nALLOW_UPDATE_OPERATION=false\\nALLOW_DELETE_OPERATION=false\\nALLOW_DDL_OPERATION=false\\n```\\n\\n### Schema Permissions\\n\\n```env\\nSCHEMA_INSERT_PERMISSIONS=schema1:true,schema2:false\\nSCHEMA_UPDATE_PERMISSIONS=schema1:true,schema2:false\\nSCHEMA_DELETE_PERMISSIONS=schema1:true,schema2:false\\nSCHEMA_DDL_PERMISSIONS=schema1:true,schema2:false\\n```\\n\\n## Installation\\n\\n### Installing via Smithery\\n\\nTo install Vertica Database Connector for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@nolleh/mcp-vertica):\\n\\n```bash\\nnpx -y @smithery/cli install @nolleh/mcp-vertica --client claude\\n```\\n\\n### Installing Manually\\n\\n```bash\\nuvx mcp-vertica\\n```\\n\\n## License\\n\\nThis project is licensed under the MIT License - see the LICENSE file for details.\\n\\n## Running in Docker Environment\\n\\nWhen running Vertica with Docker Compose, you can run the MCP server as follows:\\n\\n### 1. Run with Direct Parameters\\n\\n```bash\\nuvx mcp-vertica \\\\\\n  --host localhost \\\\\\n  --db-port 5433 \\\\\\n  --database VMart \\\\\\n  --user dbadmin \\\\\\n  --password \\\"\\\" \\\\\\n  --connection-limit 10\\n```\\n\\n### 2. Run with Environment Variables\\n\\ncreate a `.env` file with the following content:\\n\\n```env\\nVERTICA_HOST=localhost\\nVERTICA_PORT=5433\\nVERTICA_DATABASE=test_db\\nVERTICA_USER=test_user\\nVERTICA_PASSWORD=test_password\\nVERTICA_CONNECTION_LIMIT=10\\nVERTICA_SSL=false\\nVERTICA_SSL_REJECT_UNAUTHORIZED=true\\n```\\n\\nThen run with .env\\n\\n```bash\\nuvx mcp-vertica \\\\\\n  --env-file .env\\n```\\n\\n### For Testing, VerticaDB Docker Compose Example\\n\\n```yaml\\nversion: \\\"3.8\\\"\\n\\nservices:\\n  vertica:\\n    # image: vertica/vertica-ce:11.1.0-0\\n    image: vertica/vertica-ce:latest\\n    platform: linux/amd64\\n    container_name: vertica-ce\\n    environment:\\n      VERTICA_MEMDEBUG: 2\\n    ports:\\n      - \\\"5433:5433\\\"\\n      - \\\"5444:5444\\\"\\n    volumes:\\n      - vertica_data:/home/dbadmin/VMart\\n    healthcheck:\\n      test:\\n        [\\n          \\\"CMD\\\",\\n          \\\"/opt/vertica/bin/vsql\\\",\\n          \\\"-h\\\",\\n          \\\"localhost\\\",\\n          \\\"-d\\\",\\n          \\\"VMart\\\",\\n          \\\"-U\\\",\\n          \\\"dbadmin\\\",\\n          \\\"-c\\\",\\n          \\\"SELECT 1\\\",\\n        ]\\n      interval: 10s\\n      timeout: 5s\\n      retries: 5\\n  \\n[...truncated for length...]\", \"tools\": [{\"name\": \"execute_query\", \"description\": \"- Execute SQL queries\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}}, \"required\": [\"query\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"stream_query\", \"description\": \"- Stream large query results in batches\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}}, \"required\": [\"query\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"copy_data\", \"description\": \"- Bulk data loading using COPY command\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for copy_data\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_table_structure\", \"description\": \"- Get detailed table structure\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_table_structure\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"list_indexes\", \"description\": \"- List all indexes for a table\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for list_indexes\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"list_views\", \"description\": \"- List all views in a schema\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for list_views\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 6, \"homepage\": \"\", \"url\": \"https://github.com/nolleh/mcp-vertica\", \"topics\": [\"mcp\", \"mcp-server\", \"model-context-protocol\", \"vertica\"], \"data_sources\": [\"github\", \"official\"]}", "target": "", "id": "nolleh/mcp-vertica", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"flutter-tools\", \"server_id\": \"dkpoulsen/flutter-tools\", \"description\": \"flutter mcp server\", \"readme\": \"# Flutter Tools MCP Server\\n\\n## Overview\\n\\nThe `flutter-tools` MCP server provides tools for interacting with the Flutter SDK. It offers two main tools: `get_diagnostics` and `apply_fixes`. These tools help in analyzing and fixing Dart/Flutter files.\\n\\n## Tools\\n\\n### get_diagnostics\\n\\n**Description:** Get Flutter/Dart diagnostics for a file.\\n\\n**Input Schema:**\\n```json\\n{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"properties\\\": {\\n    \\\"file\\\": {\\n      \\\"type\\\": \\\"string\\\",\\n      \\\"description\\\": \\\"Path to the Dart/Flutter file\\\"\\n    }\\n  },\\n  \\\"required\\\": [\\\"file\\\"]\\n}\\n```\\n\\n**Example Usage:**\\n```json\\n{\\n  \\\"name\\\": \\\"get_diagnostics\\\",\\n  \\\"arguments\\\": {\\n    \\\"file\\\": \\\"/path/to/your/file.dart\\\"\\n  }\\n}\\n```\\n\\n### apply_fixes\\n\\n**Description:** Apply Dart fix suggestions to a file.\\n\\n**Input Schema:**\\n```json\\n{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"properties\\\": {\\n    \\\"file\\\": {\\n      \\\"type\\\": \\\"string\\\",\\n      \\\"description\\\": \\\"Path to the Dart/Flutter file\\\"\\n    }\\n  },\\n  \\\"required\\\": [\\\"file\\\"]\\n}\\n```\\n\\n**Example Usage:**\\n```json\\n{\\n  \\\"name\\\": \\\"apply_fixes\\\",\\n  \\\"arguments\\\": {\\n    \\\"file\\\": \\\"/path/to/your/file.dart\\\"\\n  }\\n}\\n```\\n\\n## Dependencies\\n\\n- `@modelcontextprotocol/sdk`: ^1.0.0\\n- `node-pty`: ^1.0.0\\n- `which`: ^4.0.0\\n\\n## Dev Dependencies\\n\\n- `@types/node`: ^18.19.0\\n- `@types/which`: ^3.0.3\\n- `typescript`: ^5.3.3\\n\\n## Scripts\\n\\n- `build`: Compiles the TypeScript code and sets the executable permissions on the compiled JavaScript file.\\n- `prepare`: Runs the `build` script.\\n- `watch`: Compiles the TypeScript code and watches for changes, recompiling automatically.\\n\\n## Installation\\n\\nTo install the MCP server, add the following configuration to your MCP settings file:\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"flutter-tools\\\": {\\n      \\\"command\\\": \\\"node\\\",\\n      \\\"args\\\": [\\\"/path/to/flutter-tools/build/index.js\\\"],\\n      \\\"env\\\": {}\\n    }\\n  }\\n}\\n```\\n\\nReplace `/path/to/flutter-tools/build/index.js` with the actual path to the compiled JavaScript file.\\n\\n## Usage\\n\\n1. Ensure the Flutter SDK is installed and available in your PATH.\\n2. Start the MCP server using the configured command.\\n3. Use the `get_diagnostics` and `apply_fixes` tools as needed.\\n\\n## Example\\n\\n```bash\\nnode /path/to/flutter-tools/build/index.js\\n\", \"tools\": [{\"name\": \"get_diagnostics\", \"description\": \"and `apply_fixes`. These tools help in analyzing and fixing Dart/Flutter files.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"which\", \"description\": \"^4.0.0\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for which\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"typescript\", \"description\": \"^5.3.3\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for typescript\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"build\", \"description\": \"Compiles the TypeScript code and sets the executable permissions on the compiled JavaScript file.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"prepare\", \"description\": \"Runs the `build` script.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for prepare\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"watch\", \"description\": \"Compiles the TypeScript code and watches for changes, recompiling automatically.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for watch\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}], \"tools_count\": 6, \"homepage\": \"\", \"url\": \"https://github.com/dkpoulsen/flutter-tools\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "dkpoulsen/flutter-tools", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"ProxmoxMCP-Plus\", \"server_id\": \"rekklesna/proxmoxmcp-plus\", \"description\": \"Enhanced Proxmox MCP server with advanced virtualization management and full OpenAPI integration.\", \"readme\": \"# ProxmoxMCP-Plus - Enhanced Proxmox MCP Server\\n\\n\\nAn enhanced Python-based Model Context Protocol (MCP) server for interacting with Proxmox virtualization platforms. This project is built upon **[canvrno/ProxmoxMCP](https://github.com/canvrno/ProxmoxMCP)** with numerous new features and improvements, providing complete OpenAPI integration and more powerful virtualization management capabilities.\\n\\n## Acknowledgments\\n\\nThis project is built upon the excellent open-source project [ProxmoxMCP](https://github.com/canvrno/ProxmoxMCP) by [@canvrno](https://github.com/canvrno). Thanks to the original author for providing the foundational framework and creative inspiration!\\n\\n## \\ud83c\\udd95 New Features and Improvements\\n\\n### Major enhancements compared to the original version:\\n\\n- \\u2728 **Complete VM Lifecycle Management**\\n  - Brand new `create_vm` tool - Support for creating virtual machines with custom configurations\\n  - New `delete_vm` tool - Safe VM deletion (with force deletion option)\\n  - Enhanced intelligent storage type detection (LVM/file-based)\\n\\n- \\ud83d\\udd27 **Extended Power Management Features**\\n  - `start_vm` - Start virtual machines\\n  - `stop_vm` - Force stop virtual machines\\n  - `shutdown_vm` - Graceful shutdown\\n  - `reset_vm` - Restart virtual machines\\n\\n- \\ud83d\\udc33 **New Container Support**\\n  - `get_containers` - List all LXC containers and their status\\n\\n- \\ud83d\\udcca **Enhanced Monitoring and Display**\\n  - Improved storage pool status monitoring\\n  - More detailed cluster health status checks\\n  - Rich output formatting and themes\\n\\n- \\ud83c\\udf10 **Complete OpenAPI Integration**\\n  - 11 complete REST API endpoints\\n  - Production-ready Docker deployment\\n  - Perfect Open WebUI integration\\n  - Natural language VM creation support\\n\\n- \\ud83d\\udee1\\ufe0f **Production-grade Security and Stability**\\n  - Enhanced error handling mechanisms\\n  - Comprehensive parameter validation\\n  - Production-level logging\\n  - Complete unit test coverage\\n\\n## Built With\\n\\n- [Cline](https://github.com/cline/cline) - Autonomous coding agent - Go faster with Cline\\n- [Proxmoxer](https://github.com/proxmoxer/proxmoxer) - Python wrapper for Proxmox API\\n- [MCP SDK](https://github.com/modelcontextprotocol/sdk) - Model Context Protocol SDK\\n- [Pydantic](https://docs.pydantic.dev/) - Data validation using Python type annotations\\n\\n## Features\\n\\n- \\ud83e\\udd16 Full integration with Cline and Open WebUI\\n- \\ud83d\\udee0\\ufe0f Built with the official MCP SDK\\n- \\ud83d\\udd12 Secure token-based authentication with Proxmox\\n- \\ud83d\\udda5\\ufe0f Complete VM lifecycle management (create, start, stop, reset, shutdown, delete)\\n- \\ud83d\\udcbb VM console command execution\\n- \\ud83d\\udc33 LXC container management support\\n- \\ud83d\\uddc3\\ufe0f Intelligent storage type detection (LVM/file-based)\\n- \\ud83d\\udcdd Configurable logging system\\n- \\u2705 Type-safe implementation with Pydantic\\n- \\ud83c\\udfa8 Rich output formatting with customizable themes\\n- \\ud83c\\udf10 OpenAPI REST endpoints for integration\\n- \\ud83d\\udce1 11 fully functional API endpoints\\n\\n\\n## Installation\\n\\n### Prerequisites\\n- UV package manager (recommended)\\n- Python 3.10 or higher\\n- Git\\n- Access to a Proxmox server with API token credentials\\n\\nBefore starting, ensure you have:\\n- [ ] Proxmox server hostname or IP\\n- [ ] Proxmox API token (see [API Token Setup](#proxmox-api-token-setup))\\n- [ ] UV installed (`pip install uv`)\\n\\n### Option 1: Quick Install (Recommended)\\n\\n1. Clone and set up environment:\\n   ```bash\\n   # Clone repository\\n   git clone https://github.com/RekklesNA/ProxmoxMCP-Plus.git\\n   cd ProxmoxMCP-Plus\\n\\n   # Create and activate virtual environment\\n   uv venv\\n   source .venv/bin/activate  # Linux/macOS\\n   # OR\\n   .\\\\.venv\\\\Scripts\\\\Activate.ps1  # Windows\\n   ```\\n\\n2. Install dependencies:\\n   ```bash\\n   # Install with development dependencies\\n   uv pip install -e \\\".[dev]\\\"\\n   ```\\n\\n3. Create configuration:\\n   ```bash\\n   # Create config directory and copy template\\n   mkdir -p proxmox-config\\n   cp proxmox-config/config.example.json proxmox-config/config.json\\n   ```\\n\\n4. Edit `proxmox-config/config.json`:\\n   ```json\\n   {\\n       \\\"proxmox\\\": {\\n           \\\"host\\\": \\\"PROXMOX_HOST\\\",        # Required: Your Proxmox server address\\n           \\\"port\\\": 8006,                  # Optional: Default is 8006\\n           \\\"verify_ssl\\\": false,           # Optional: Set false for self-signed certs\\n           \\\"service\\\": \\\"PVE\\\"               # Optional: Default is PVE\\n       },\\n       \\\"auth\\\": {\\n           \\\"user\\\": \\\"USER@pve\\\",            # Required: Your Proxmox username\\n           \\\"token_name\\\": \\\"TOKEN_NAME\\\",    # Required: API token ID\\n           \\\"token_value\\\": \\\"TOKEN_VALUE\\\"   # Required: API token value\\n       },\\n       \\\"logging\\\": {\\n           \\\"level\\\": \\\"INFO\\\",               # Optional: DEBUG for more detail\\n           \\\"format\\\": \\\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\\\",\\n           \\\"file\\\": \\\"proxmox_mcp.log\\\"      # Optional: Log to file\\n       }\\n   }\\n   ```\\n\\n### Verifying Installation\\n\\n1. Check Python environment:\\n   ```bash\\n   python -c \\\"import proxmox_mcp; print('Installation OK')\\\"\\n   ```\\n\\n2. Run the tests:\\n   ```bash\\n   pytest\\n   ```\\n\\n3. Verify configuration:\\n   ```bash\\n   # Linux/macOS\\n   PROXMOX_MCP_CONFIG=\\\"proxmox-config/con\\n[...truncated for length...]\", \"tools\": [{\"name\": \"create_vm\", \"description\": \"tool - Support for creating virtual machines with custom configurations\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for create_vm\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"delete_vm\", \"description\": \"tool - Safe VM deletion (with force deletion option)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for delete_vm\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"start_vm\", \"description\": \"- Start virtual machines\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for start_vm\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"stop_vm\", \"description\": \"- Force stop virtual machines\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for stop_vm\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"shutdown_vm\", \"description\": \"- Graceful shutdown\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for shutdown_vm\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"reset_vm\", \"description\": \"- Restart virtual machines\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for reset_vm\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"get_containers\", \"description\": \"- List all LXC containers and their status\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_containers\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"node\", \"description\": \"(string, required): Name of the node\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for node\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"vmid\", \"description\": \"(string, required): ID for the new VM\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for vmid\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"name\", \"description\": \"(string, required): Name for the VM\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for name\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"cpus\", \"description\": \"(integer, required): Number of CPU cores (1-32)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for cpus\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"memory\", \"description\": \"(integer, required): Memory in MB (512-131072)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for memory\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"disk_size\", \"description\": \"(integer, required): Disk size in GB (5-1000)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for disk_size\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"storage\", \"description\": \"(string, optional): Storage pool name\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for storage\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"ostype\", \"description\": \"(string, optional): OS type (default: l26)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for ostype\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"command\", \"description\": \"(string, required): Command to execute\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for command\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"raw\", \"description\": \"- \\u2705 High performance\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for raw\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"qcow2\", \"description\": \"- \\u2705 Cloud-init support\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for qcow2\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"pytest\", \"description\": \"- Format code: `black .`\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for pytest\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 19, \"homepage\": \"\", \"url\": \"https://github.com/RekklesNA/ProxmoxMCP-Plus\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "rekklesna/proxmoxmcp-plus", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"Nocodb-MCP-Server\", \"server_id\": \"granthooks/nocodb-mcp-server\", \"description\": \"\", \"readme\": \"# Nocodb MCP Server\\r\\n\\r\\nThis MCP server provides tools to interact with a Nocodb database through the Model Context Protocol, offering CRUD operations (Create, Read, Update, Delete) for Nocodb tables.\\r\\n\\r\\n## Installation\\r\\n\\r\\n1. Install the required dependencies:\\r\\n\\r\\n```bash\\r\\npip install -r requirements.txt\\r\\n```\\r\\n\\r\\n2. Make sure you have the MCP Python SDK installed (it should be installed with the dependencies above):\\r\\n\\r\\n```bash\\r\\npip install \\\"mcp[cli]\\\"\\r\\n```\\r\\n\\r\\n## Configuration\\r\\n\\r\\nThis MCP server requires three environment variables:\\r\\n\\r\\n- `NOCODB_URL`: The base URL of your Nocodb instance (e.g., `https://example.com/ncdb`)\\r\\n- `NOCODB_API_TOKEN`: The API token for authentication with Nocodb\\r\\n- `NOCODB_BASE_ID`: The base ID of your Nocodb database\\r\\n\\r\\nYou can obtain an API token from your Nocodb instance by:\\r\\n1. Login to your Nocodb instance\\r\\n2. Go to Account settings > API Tokens\\r\\n3. Create a new token with appropriate permissions\\r\\n\\r\\nThe base ID can be found in the URL of your Nocodb dashboard: `https://your-nocodb.com/dashboard/#/nc/base/YOUR_BASE_ID/table/...`\\r\\n\\r\\n## Usage\\r\\n\\r\\n### With Claude Desktop\\r\\n\\r\\nTo integrate with **Claude Desktop**, add this configuration to `claude_desktop_config.json`:\\r\\n\\r\\n```json\\r\\n{\\r\\n  \\\"mcpServers\\\": {\\r\\n    \\\"nocodb\\\": {\\r\\n      \\\"command\\\": \\\"python\\\",\\r\\n      \\\"args\\\": [\\r\\n        \\\"path/to/nocodb_mcp_server.py\\\"\\r\\n      ],\\r\\n      \\\"env\\\": {\\r\\n        \\\"NOCODB_URL\\\": \\\"https://your-nocodb-instance.com\\\",\\r\\n        \\\"NOCODB_API_TOKEN\\\": \\\"your_api_token_here\\\",\\r\\n        \\\"NOCODB_BASE_ID\\\": \\\"your_base_id_here\\\"\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nOr use the MCP CLI to install (recommended):\\r\\n\\r\\n```bash\\r\\n# Basic installation\\r\\nmcp install nocodb_mcp_server.py\\r\\n\\r\\n# With environment variables\\r\\nmcp install nocodb_mcp_server.py -v NOCODB_URL=https://your-nocodb-instance.com -v NOCODB_API_TOKEN=your_token -v NOCODB_BASE_ID=your_base_id\\r\\n\\r\\n# OR using an .env file\\r\\nmcp install nocodb_mcp_server.py -f .env\\r\\n```\\r\\n\\r\\n### Running as a Standalone Server\\r\\n\\r\\n```bash\\r\\n# Install dependencies\\r\\npip install -r requirements.txt\\r\\n\\r\\n# Run the server directly\\r\\npython nocodb_mcp_server.py\\r\\n\\r\\n# Or using the MCP CLI\\r\\nmcp run nocodb_mcp_server.py\\r\\n```\\r\\n\\r\\n### Development Mode\\r\\n\\r\\nFor testing and debugging with the MCP Inspector:\\r\\n\\r\\n```bash\\r\\n# Run in development mode\\r\\nmcp dev nocodb_mcp_server.py\\r\\n```\\r\\n\\r\\n### With Cursor on Windows\\r\\n\\r\\nFor Cursor on Windows, use the following syntax in your `mcp.json` configuration file:\\r\\n\\r\\n```json\\r\\n{\\r\\n  \\\"mcpServers\\\": {\\r\\n    \\\"nocodb\\\": {\\r\\n      \\\"command\\\": \\\"C:\\\\\\\\Path\\\\\\\\To\\\\\\\\Your\\\\\\\\Python\\\\\\\\Executable\\\",\\r\\n      \\\"args\\\": [\\r\\n        \\\"C:\\\\\\\\Path\\\\\\\\To\\\\\\\\Your\\\\\\\\nocodb_mcp_server.py\\\"\\r\\n      ],\\r\\n      \\\"env\\\": {\\r\\n        \\\"NOCODB_URL\\\": \\\"http://localhost:8080\\\",\\r\\n        \\\"NOCODB_API_TOKEN\\\": \\\"your_api_token_here\\\",\\r\\n        \\\"NOCODB_BASE_ID\\\": \\\"your_base_id_here\\\"\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n## Available Tools\\r\\n\\r\\nThe server provides the following tools:\\r\\n\\r\\n### 1. retrieve_records\\r\\n\\r\\nRetrieve one or multiple records from a Nocodb table.\\r\\n\\r\\n**Parameters:**\\r\\n- `table_name`: Name of the table to query\\r\\n- `row_id` (Optional): Specific row ID to retrieve a single record\\r\\n- `filters` (Optional): Filter conditions in Nocodb format\\r\\n- `limit` (Optional): Maximum number of records to return (default: 10)\\r\\n- `offset` (Optional): Number of records to skip for pagination (default: 0)\\r\\n- `sort` (Optional): Column to sort by\\r\\n- `fields` (Optional): Comma-separated list of fields to include\\r\\n\\r\\n**Examples:**\\r\\n\\r\\n```python\\r\\n# Get all records from a table (limited to 10)\\r\\nretrieve_records(table_name=\\\"customers\\\")\\r\\n\\r\\n# Get a specific record by ID\\r\\nretrieve_records(table_name=\\\"customers\\\", row_id=\\\"123\\\")\\r\\n\\r\\n# Filter records with conditions\\r\\nretrieve_records(\\r\\n    table_name=\\\"customers\\\", \\r\\n    filters=\\\"(age,gt,30)~and(status,eq,active)\\\"\\r\\n)\\r\\n```\\r\\n\\r\\n### 2. create_records\\r\\n\\r\\nCreate one or multiple records in a Nocodb table.\\r\\n\\r\\n**Parameters:**\\r\\n- `table_name`: Name of the table to insert into\\r\\n- `data`: Dict with column:value pairs or a list of such dicts for bulk creation\\r\\n- `bulk` (Optional): Set to True for bulk creation\\r\\n\\r\\n**Examples:**\\r\\n\\r\\n```python\\r\\n# Create a single record\\r\\ncreate_records(\\r\\n    table_name=\\\"customers\\\",\\r\\n    data={\\\"name\\\": \\\"John Doe\\\", \\\"email\\\": \\\"john@example.com\\\", \\\"age\\\": 35}\\r\\n)\\r\\n\\r\\n# Create multiple records in bulk\\r\\ncreate_records(\\r\\n    table_name=\\\"customers\\\",\\r\\n    data=[\\r\\n        {\\\"name\\\": \\\"John Doe\\\", \\\"email\\\": \\\"john@example.com\\\", \\\"age\\\": 35},\\r\\n        {\\\"name\\\": \\\"Jane Smith\\\", \\\"email\\\": \\\"jane@example.com\\\", \\\"age\\\": 28}\\r\\n    ],\\r\\n    bulk=True\\r\\n)\\r\\n```\\r\\n\\r\\n### 3. update_records\\r\\n\\r\\nUpdate one or multiple records in a Nocodb table.\\r\\n\\r\\n**Parameters:**\\r\\n- `table_name`: Name of the table to update\\r\\n- `row_id`: ID of the record to update (required for single record update)\\r\\n- `data`: Dictionary with column:value pairs to update\\r\\n- `bulk` (Optional): Set to True for bulk updates\\r\\n- `bulk_ids` (Optional): List of record IDs to update when bulk=True\\r\\n\\r\\n**Examples:**\\r\\n\\r\\n```python\\r\\n# Update a single record by ID\\r\\nupdate_records(\\r\\n    table_name=\\\"customers\\\",\\r\\n    row_id=\\\"123\\\",\\r\\n    dat\\n[...truncated for length...]\", \"tools\": [{\"name\": \"NOCODB_URL\", \"description\": \"The base URL of your Nocodb instance (e.g., `https://example.com/ncdb`)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"URL or link to process\"}}, \"required\": [\"url\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"NOCODB_API_TOKEN\", \"description\": \"The API token for authentication with Nocodb\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for NOCODB_API_TOKEN\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"NOCODB_BASE_ID\", \"description\": \"The base ID of your Nocodb database\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for NOCODB_BASE_ID\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"table_name\", \"description\": \"Name of the table to query\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}}, \"required\": [\"query\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"row_id\", \"description\": \"(Optional): Specific row ID to retrieve a single record\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for row_id\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"filters\", \"description\": \"(Optional): Filter conditions in Nocodb format\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for filters\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"limit\", \"description\": \"(Optional): Maximum number of records to return (default: 10)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for limit\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"offset\", \"description\": \"(Optional): Number of records to skip for pagination (default: 0)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for offset\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"sort\", \"description\": \"(Optional): Column to sort by\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for sort\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"fields\", \"description\": \"(Optional): Comma-separated list of fields to include\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for fields\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"data\", \"description\": \"Dict with column:value pairs or a list of such dicts for bulk creation\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"amount\": {\"type\": \"number\", \"description\": \"Numeric amount or value\"}}, \"required\": [\"amount\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"bulk\", \"description\": \"(Optional): Set to True for bulk creation\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for bulk\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"bulk_ids\", \"description\": \"(Optional): List of record IDs to update when bulk=True\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for bulk_ids\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"ERROR\", \"description\": \"in `nocodb_mcp_server.py` ( `mcp = FastMCP(\\\"Nocodb MCP Server\\\", log_level=\\\"ERROR\\\")` ) to avoid excessive output during standard operations like `mcp list`. If more detailed logs are needed for troubleshooting, you can uncomment the `logging.basicConfig` section and adjust the level (e.g., `level=logging.INFO` or `level=logging.DEBUG`).\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for ERROR\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}], \"tools_count\": 14, \"homepage\": \"\", \"url\": \"https://github.com/granthooks/Nocodb-MCP-Server\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "granthooks/nocodb-mcp-server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"playfab-mcp-server\", \"server_id\": \"akiojin/playfab-mcp-server\", \"description\": \"MCP Server for PlayFab\", \"readme\": \"# PlayFab MCP Server\\n\\n[![smithery badge](https://smithery.ai/badge/@akiojin/playfab-mcp-server)](https://smithery.ai/server/@akiojin/playfab-mcp-server)\\n\\n## What Is This? \\ud83e\\udd14\\n\\nThis server is a middleware that enables large language models (like Claude and VS Code) to interact directly with PlayFab services. Acting as a secure and efficient translator, it connects your AI assistant with various PlayFab functionalities, such as item search, segment inquiries, player profile lookups, inventory management, and PlayFab ID conversion.\\n\\n### Quick Example\\n\\n```text\\nYou: \\\"Show me the latest 10 items.\\\"\\nClaude: *calls the PlayFab search_items API and returns the results in plain text*\\n```\\n\\n## How Does It Work? \\ud83d\\udee0\\ufe0f\\n\\nThis server leverages the Model Context Protocol (MCP) to establish a universal interface between AI models and PlayFab services. Although MCP is designed to support any AI model, it is currently available as a developer preview.\\n\\nFollow these steps to get started:\\n\\n1. Set up your project.\\n2. Add your project details to your LLM client's configuration.\\n3. Start interacting with PlayFab data naturally!\\n\\n### What Can It Do? \\ud83d\\udcca\\n\\n#### Catalog & Search\\n\\n- Search for items using PlayFab's search_items API.\\n- **Catalog Management (Economy v2):**\\n  - Create new draft items with the create_draft_item API.\\n  - Update existing draft items with the update_draft_item API.\\n  - Delete items from catalog with the delete_item API.\\n  - Publish draft items to make them available with the publish_draft_item API.\\n  - Get detailed item information with the get_item API.\\n\\n#### Player Management\\n\\n- Retrieve comprehensive segment information.\\n- Query player profiles within specified segments.\\n- Convert a PlayFab ID to a Title Player Account ID via the get_title_player_account_id_from_playfab_id API.\\n- Get detailed user account information with the get_user_account_info API.\\n\\n#### Inventory Management\\n\\n- **Get Operations:**\\n  - Retrieve current inventory items with the get_inventory_items API.\\n  - Fetch inventory collection IDs using the get_inventory_collection_ids API.\\n- **Add/Remove Operations:**\\n  - Add items to inventory with the add_inventory_items API.\\n  - Delete items from inventory with the delete_inventory_items API.\\n  - Subtract specific amounts with the subtract_inventory_items API.\\n- **Modify Operations:**\\n  - Update item properties with the update_inventory_items API.\\n\\n#### Economy v2 Administration\\n\\n- Execute batch inventory operations with the execute_inventory_operations API.\\n- Note: In Economy v2, virtual currencies are managed as inventory items.\\n\\n#### User Account Administration\\n\\n- Ban players by ID, IP, or MAC address with the ban_users API.\\n- Unban players completely with the revoke_all_bans_for_user API.\\n\\n#### Player Data Management\\n\\n- Retrieve player custom data with the get_user_data API.\\n- Update player custom data with the update_user_data API.\\n\\n#### Title Configuration Management\\n\\n- Set global title data with the set_title_data API.\\n- Retrieve title data with the get_title_data API.\\n- Set server-only internal data with the set_title_internal_data API.\\n- Retrieve internal data with the get_title_internal_data API.\\n\\n## Quick Start \\ud83d\\ude80\\n\\n### Installing via Smithery\\n\\nTo install PlayFab MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@akiojin/playfab-mcp-server):\\n\\n```bash\\nnpx -y @smithery/cli install @akiojin/playfab-mcp-server --client claude\\n```\\n\\n### Prerequisites\\n\\n- Node.js 18 or higher.\\n- A valid PlayFab account (obtain your Title ID and Developer Secret Key via PlayFab Game Manager).\\n- A supported LLM client such as Claude Desktop.\\n\\n### Set Up Your Project\\n\\nObtain your PlayFab Title ID and Developer Secret Key from the PlayFab Game Manager, then create a `.env` file in the project root with the following content (replace the placeholders with your actual credentials):\\n\\n```bash\\nPLAYFAB_TITLE_ID=\\nPLAYFAB_DEV_SECRET_KEY=\\n```\\n\\n### Installation and Setup\\n\\n1. **Install Dependencies**\\n\\n   In the project root, run the following command to install all necessary dependencies:\\n\\n   ```bash\\n   npm install\\n   ```\\n\\n2. **Build the Project**\\n\\n   Compile the project by executing:\\n\\n   ```bash\\n   npm run build\\n   ```\\n\\n3. **Start the Server**\\n\\n   Start the server by executing:\\n\\n   ```bash\\n   npm start\\n   ```\\n\\n4. **Confirmation Message**\\n\\n   Upon startup, you should see this message:\\n\\n   ```text\\n   PlayFab Server running on stdio\\n   ```\\n\\n### Development Setup\\n\\n#### Code Quality Tools\\n\\n- **ESLint**: Configured for TypeScript with recommended rules for code consistency\\n- **Prettier**: Automatic code formatting with project-specific settings\\n- **TypeScript**: Strict mode enabled for enhanced type safety\\n- **Jest**: Testing framework configured for TypeScript\\n\\n#### Available Scripts\\n\\n```bash\\n# Build the project\\nnpm run build\\n\\n# Development mode with file watching\\nnpm run watch\\n\\n# TypeScript type checking\\nnpm run typecheck\\n\\n# Run ESLint\\nnpm run lint\\n\\n# Run ESLint and fix issues\\nnpm run lint:fix\\n\\n# Form\\n[...truncated for length...]\", \"tools\": [{\"name\": \"__tests__\", \"description\": \"directories or files with `.test.ts` extension. Run tests before committing changes to ensure code quality.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"claude_desktop_config\", \"description\": \"file content with the following snippet:\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}, \"message\": {\"type\": \"string\", \"description\": \"Text content or message\"}}, \"required\": [\"file_path\", \"message\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"feat\", \"description\": \"- Example: `feat: add new PlayFab API integration`\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for feat\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"fix\", \"description\": \"- Example: `fix: correct error handling in API calls`\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for fix\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"NPM_TOKEN\", \"description\": \"secret must be set in repository settings for npm publishing\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for NPM_TOKEN\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"DEPENDABOT_PAT\", \"description\": \"secret must be set for auto-approving Dependabot PRs:\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for DEPENDABOT_PAT\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"repo\", \"description\": \"and `workflow` permissions\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for repo\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"main\", \"description\": \"branch\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for main\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 8, \"homepage\": \"\", \"url\": \"https://github.com/akiojin/playfab-mcp-server\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "akiojin/playfab-mcp-server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"mcp-ssh-toolkit-py\", \"server_id\": \"vitalymalakanov/mcp-ssh-toolkit-py\", \"description\": \"mcp-ssh-toolkit-py is a powerful MCP server for secure SSH command execution via Model Context Protocol. \", \"readme\": \"# mcp-ssh-toolkit-py\\n\\n[![Build Status](https://img.shields.io/badge/build-passing-brightgreen)](https://github.com/VitalyMalakanov/mcp-ssh-toolkit-py/actions)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](LICENSE)\\n[![Docker](https://img.shields.io/badge/docker-ready-blue)](https://hub.docker.com/r/vitalymalakanov/mcp-ssh-toolkit-py)\\n[![Author](https://img.shields.io/badge/author-Vitaly_Malakanov_&_AI_Cline-blue)](https://github.com/VitalyMalakanov)\\n\\nA minimal Model Context Protocol (MCP) server for secure SSH automation, built with [python-sdk](https://github.com/modelcontextprotocol/python-sdk) and [paramiko](https://www.paramiko.org/).\\n\\n---\\n\\n## Table of Contents\\n\\n- [Overview](#overview)\\n- [Features](#features)\\n- [Installation](#installation)\\n- [Quickstart](#quickstart)\\n- [Usage](#usage)\\n- [Development](#development)\\n- [License](#license)\\n\\n---\\n\\n## Overview \\ud83d\\ude80\\n\\n**mcp-ssh-toolkit-py** is a powerful MCP server for secure SSH command execution via Model Context Protocol.\\n\\n\\ud83d\\udd39 **Key Features**:\\n- Execute arbitrary commands on remote servers via SSH\\n- Upload/download files via SFTP\\n- Integration with Claude/Cline and other MCP clients\\n- Supports password and SSH key authentication\\n- Configurable connection parameters (timeouts, ports)\\n\\n\\ud83d\\udd39 **Use Cases**:\\n- DevOps automation via LLMs\\n- Server management through chat interface\\n- Secure remote script execution\\n- SSH integration in MCP ecosystem\\n\\nExample usage:\\n```python\\n# Through MCP client\\nresponse = mcp.tool(\\\"ssh_execute_command\\\", {\\n    \\\"host\\\": \\\"example.com\\\",\\n    \\\"username\\\": \\\"user\\\",\\n    \\\"command\\\": \\\"docker ps\\\"\\n})\\n```\\n\\n---\\n\\n## Features \\u2728\\n\\n### Core Functionality\\n- \\ud83d\\udee1\\ufe0f Secure SSH command execution via MCP\\n- \\ud83d\\udcc1 SFTP operations (file upload/download)\\n- \\ud83d\\udd11 Multiple authentication methods:\\n  - Username/password\\n  - SSH keys (RSA)\\n  - SSH agent\\n\\n### Integration\\n- \\ud83e\\udd16 Full compatibility with Claude/Cline\\n- \\ud83d\\udc33 Ready-to-use Docker image\\n- \\ud83d\\udce6 Pip package installation\\n\\n### Security\\n- \\ud83d\\udd12 Encrypted connections\\n- \\u23f1 Configurable timeouts\\n- \\ud83d\\udeab No credential storage\\n\\n---\\n\\n## Installation \\ud83d\\udce6\\n\\n### Docker (Recommended)\\n\\n1. Clone the repository:\\n```bash\\ngit clone https://github.com/VitalyMalakanov/mcp-ssh-toolkit-py.git\\ncd mcp-ssh-toolkit-py\\n```\\n\\n2. Build the Docker image:\\n```bash\\ndocker build -t mcp-ssh-toolkit-py .\\n```\\n\\n3. (Optional) Push to your Docker registry:\\n```bash\\ndocker tag mcp-ssh-toolkit-py yourusername/mcp-ssh-toolkit-py\\ndocker push yourusername/mcp-ssh-toolkit-py\\n```\\n\\n### Pip Installation\\n\\nInstall directly from GitHub:\\n```bash\\npip install git+https://github.com/VitalyMalakanov/mcp-ssh-toolkit-py.git\\n```\\n\\nRun the server after installation:\\n```bash\\npython -m mcp_ssh_toolkit\\n```\\n\\n### Development Setup\\n\\nFor development, install with:\\n```bash\\ngit clone https://github.com/VitalyMalakanov/mcp-ssh-toolkit-py.git\\ncd mcp-ssh-toolkit-py\\npip install -e .\\n```\\n\\n---\\n\\n## Quickstart\\n\\n### Run with Docker\\n\\n```bash\\ndocker run --rm -i mcp-ssh-toolkit-py\\n```\\n\\n### MCP Integration\\n\\nAdd to your MCP configuration (e.g., `cline_mcp_settings.json`):\\n\\n```json\\n\\\"mcp-ssh-toolkit-py\\\": {\\n  \\\"command\\\": \\\"docker\\\",\\n  \\\"args\\\": [\\\"run\\\", \\\"--rm\\\", \\\"-i\\\", \\\"mcp-ssh-toolkit-py\\\"],\\n  \\\"env\\\": {}\\n}\\n```\\n\\n---\\n\\n## Usage\\n\\n### Tool: `ssh_execute_command`\\n\\n**Description:**  \\nExecute a command on a remote server via SSH.\\n\\n**Input parameters:**\\n- `host` (string, required): SSH server address\\n- `username` (string, required): SSH username\\n- `password` (string, optional): SSH password\\n- `privateKey` (string, optional): Path to SSH private key (PEM)\\n- `command` (string, required): Command to execute\\n- `port` (integer, optional, default 22): SSH port\\n- `timeout` (integer, optional, default 20): Connection timeout (seconds)\\n\\n**Output:**\\n- `stdout`: Command output\\n- `stderr`: Error output\\n- `exit_code`: Exit code\\n\\n**Example call:**\\n```json\\n{\\n  \\\"host\\\": \\\"example.com\\\",\\n  \\\"username\\\": \\\"user\\\",\\n  \\\"password\\\": \\\"secret\\\",\\n  \\\"command\\\": \\\"uname -a\\\"\\n}\\n```\\n\\n---\\n\\n## Development\\n\\n- Python 3.8+\\n- [python-sdk](https://github.com/modelcontextprotocol/python-sdk)\\n- [paramiko](https://www.paramiko.org/)\\n\\nInstall dependencies locally:\\n```bash\\npip install -r requirements.txt\\n```\\n\\nRun locally:\\n```bash\\npython main.py\\n```\\n\\n---\\n\\n\\n## Security\\n\\n- SSH credentials are never stored or logged.\\n- Always use strong passwords or SSH keys for authentication.\\n- Do not expose the MCP server to untrusted networks.\\n- Review [paramiko security best practices](https://www.paramiko.org/security.html).\\n- If you discover a security vulnerability, please report it via GitHub Issues or contact the maintainer privately.\\n\\n---\\n\\n## License\\n\\nMIT License. See [LICENSE](LICENSE) for details.\\n\", \"tools\": [{\"name\": \"ssh_execute_command\", \"description\": \"**Description:**\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for ssh_execute_command\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"host\", \"description\": \"(string, required): SSH server address\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for host\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"username\", \"description\": \"(string, required): SSH username\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for username\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"password\", \"description\": \"(string, optional): SSH password\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for password\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"privateKey\", \"description\": \"(string, optional): Path to SSH private key (PEM)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"command\", \"description\": \"(string, required): Command to execute\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for command\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"port\", \"description\": \"(integer, optional, default 22): SSH port\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for port\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"timeout\", \"description\": \"(integer, optional, default 20): Connection timeout (seconds)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for timeout\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"stdout\", \"description\": \"Command output\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for stdout\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"stderr\", \"description\": \"Error output\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for stderr\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"exit_code\", \"description\": \"Exit code\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for exit_code\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 11, \"homepage\": \"\", \"url\": \"https://github.com/VitalyMalakanov/mcp-ssh-toolkit-py\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "vitalymalakanov/mcp-ssh-toolkit-py", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"mcp-neovim-server\", \"server_id\": \"bigcodegen/mcp-neovim-server\", \"description\": \"An MCP Server for your Neovim session.\", \"readme\": \"# Neovim MCP Server\\n\\nConnect Claude Desktop (or any Model Context Protocol client) to Neovim using MCP and the official neovim/node-client JavaScript library. This server leverages Vim's native text editing commands and workflows, which Claude already understands, to create a lightweight code or general purpose AI text assistance layer.\\n\\n<a href=\\\"https://glama.ai/mcp/servers/s0fywdwp87\\\"><img width=\\\"380\\\" height=\\\"200\\\" src=\\\"https://glama.ai/mcp/servers/s0fywdwp87/badge\\\" alt=\\\"mcp-neovim-server MCP server\\\" /></a>\\n\\n## Features\\n\\n- Connects to your nvim instance if you expose a socket file, for example `--listen /tmp/nvim`, when starting nvim\\n- Views your current buffers\\n- Gets cursor location, mode, file name\\n- Runs vim commands and optionally shell commands through vim\\n- Can make edits using insert or replacement\\n\\n## API\\n\\n### Resources\\n\\n- `nvim://session`: Current neovim text editor session\\n- `nvim://buffers`: List of all open buffers in the current Neovim session with metadata including modified status, syntax, and window IDs\\n\\n### Tools\\n- **vim_buffer**\\n  - Current VIM text editor buffer with line numbers shown\\n  - Input `filename` (string)\\n  - Filename is ignored, returns a string of numbered lines with the current active buffer content\\n- **vim_command**\\n  - Send a command to VIM for navigation, spot editing, and line deletion\\n  - Input `command` (string)\\n  - Runs a vim command first passed through `nvim.replaceTermcodes`. Multiple commands will work if separated by newlines\\n  - On error, `'nvim:errmsg'` contents are returned \\n- **vim_status**\\n  - Get the status of the VIM editor\\n  - Status contains cursor position, mode, filename, visual selection, window layout, current tab, marks, registers, and working directory\\n- **vim_edit**\\n  - Edit lines using insert, replace, or replaceAll in the VIM editor\\n  - Input `startLine` (number), `mode` (`\\\"insert\\\"` | `\\\"replace\\\"` | `\\\"replaceAll\\\"`), `lines` (string)\\n  - insert will insert lines at startLine\\n  - replace will replace lines starting at startLine\\n  - replaceAll will replace the entire buffer contents\\n- **vim_window**\\n  - Manipulate Neovim windows (split, vsplit, close, navigate)\\n  - Input `command` (string: \\\"split\\\", \\\"vsplit\\\", \\\"only\\\", \\\"close\\\", \\\"wincmd h/j/k/l\\\")\\n  - Allows window management operations\\n- **vim_mark**\\n  - Set a mark at a specific position\\n  - Input `mark` (string: a-z), `line` (number), `column` (number)\\n  - Sets named marks at specified positions\\n- **vim_register**\\n  - Set content of a register\\n  - Input `register` (string: a-z or \\\"), `content` (string)\\n  - Manages register contents\\n- **vim_visual**\\n  - Make a visual selection\\n  - Input `startLine` (number), `startColumn` (number), `endLine` (number), `endColumn` (number)\\n  - Creates visual mode selections\\n\\nUsing this simple set of tools, Claude can peer into your neovim session to answer questions as well as make edits to the buffer.\\n\\n## Limitations\\n\\n- This is a quick proof of concept to experiment with Model Context Protocol. Use at your own risk.\\n- May not interact well with a custom neovim config!\\n- Error handling could be better.\\n- Sometimes Claude doesn't get the vim command input just right.\\n\\n## Configuration\\n\\n### Environment Variables\\n\\n- `ALLOW_SHELL_COMMANDS`: Set to 'true' to enable shell command execution (e.g. `!ls`). Defaults to false for security.\\n- `NVIM_SOCKET_PATH`: Set to the path of your Neovim socket. Defaults to '/tmp/nvim' if not specified.\\n\\n## Usage with Claude Desktop\\nAdd this to your `claude_desktop_config.json`:\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"MCP Neovim Server\\\": {\\n      \\\"command\\\": \\\"npx\\\",\\n      \\\"args\\\": [\\n        \\\"-y\\\",\\n        \\\"mcp-neovim-server\\\"\\n      ],\\n      \\\"env\\\": {\\n        \\\"ALLOW_SHELL_COMMANDS\\\": \\\"true\\\",\\n        \\\"NVIM_SOCKET_PATH\\\": \\\"/tmp/nvim\\\"\\n      }\\n    }\\n  }\\n}\\n```\\n\\n## License\\n\\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\\n\", \"tools\": [{\"name\": \"filename\", \"description\": \"(string)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"command\", \"description\": \"(string)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for command\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"startLine\", \"description\": \"(number), `mode` (`\\\"insert\\\"` | `\\\"replace\\\"` | `\\\"replaceAll\\\"`), `lines` (string)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for startLine\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"mark\", \"description\": \"(string: a-z), `line` (number), `column` (number)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for mark\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"register\", \"description\": \"(string: a-z or \\\"), `content` (string)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"message\": {\"type\": \"string\", \"description\": \"Text content or message\"}}, \"required\": [\"message\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"ALLOW_SHELL_COMMANDS\", \"description\": \"Set to 'true' to enable shell command execution (e.g. `!ls`). Defaults to false for security.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for ALLOW_SHELL_COMMANDS\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"NVIM_SOCKET_PATH\", \"description\": \"Set to the path of your Neovim socket. Defaults to '/tmp/nvim' if not specified.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"write\"}], \"tools_count\": 7, \"homepage\": \"\", \"url\": \"https://github.com/bigcodegen/mcp-neovim-server\", \"topics\": [\"anthropic\", \"claude\", \"mcp\", \"modelcontextprotocol\", \"neovim\"], \"data_sources\": [\"github\", \"official\"]}", "target": "", "id": "bigcodegen/mcp-neovim-server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"github-repo-mcp\", \"server_id\": \"ryan0204/github-repo-mcp\", \"description\": \"Model Context Protocol server for Github Repo // Reading Github Repo\", \"readme\": \"# GitHub Repo MCP\\n\\n[![smithery badge](https://smithery.ai/badge/@Ryan0204/github-repo-mcp)](https://smithery.ai/server/@Ryan0204/github-repo-mcp)\\n\\n<p class=\\\"center-text\\\">\\n  <strong>GitHub Repo MCP is an open-source MCP server that lets your AI assistants browse GitHub repositories, explore directories, and view file contents.</strong>\\n</p>\\n\\n<a href=\\\"https://glama.ai/mcp/servers/@Ryan0204/github-repo-mcp\\\">\\n  <img width=\\\"380\\\" height=\\\"200\\\" src=\\\"https://glama.ai/mcp/servers/@Ryan0204/github-repo-mcp/badge\\\" alt=\\\"github-repo-mcp MCP server\\\" />\\n</a>\\n\\n## Table of contents\\n\\n<p class=\\\"center-text\\\">\\n  <a href=\\\"#getting-started\\\">Getting started</a> \\u2022\\n  <a href=\\\"#feature-overview\\\">Feature overview</a>\\n</p>\\n\\n## \\u2728 Key features\\n\\n- \\ud83d\\udcbb Compatible with Cursor, Windsurf, Claude Desktop, and other MCP clients supporting `stdio` protocol\\n- \\ud83d\\udd0e Browse the contents of any public GitHub repository\\n- \\ud83d\\udcc2 Navigate through repository directories and subdirectories\\n- \\ud83d\\udcdd View the content of code and text files\\n- \\ud83d\\udce6 Easy installation via package manager\\n\\n## Getting Started\\n\\n### Prerequisites\\n\\nInstalling the server requires the following on your system:\\n- Node.js 18+\\n- npm or yarn\\n\\n### Step 1. Installation\\n\\nYou can install and run GitHub Repo MCP using Smithery, NPX, or setting in mcp.json of your IDE:\\n\\n#### MacOS\\n\\n```bash\\nnpx github-repo-mcp\\n```\\n\\n#### Windows NPX\\n\\n```bash\\ncmd /c npx -y github-repo-mcp\\n```\\n\\n#### Windows NPX via .cursor/mcp.json\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"github-repo-mcp\\\": {\\n      \\\"command\\\": \\\"wsl\\\",\\n      \\\"args\\\": [\\n        \\\"bash\\\",\\n        \\\"-c\\\",\\n        \\\"cmd /c npx -y github-repo-mcp\\\"\\n      ],\\n      \\\"enabled\\\": true\\n    }\\n  }\\n}\\n```\\n\\n#### Windows NPX via .cursor/mcp.json (if path not set)\\n\\n```bash\\n# Find the full path to npx first\\nwhich npx\\n```\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"github-repo-mcp\\\": {\\n      \\\"command\\\": \\\"wsl\\\",\\n      \\\"args\\\": [\\n        \\\"bash\\\",\\n        \\\"-c\\\",\\n        \\\"'/home/[username]/.nvm/versions/node/v20.18.0/bin/npx github-repo-mcp'\\\"\\n      ],\\n      \\\"enabled\\\": true\\n    }\\n  }\\n}\\n```\\n\\n#### Installing via Smithery\\n\\nTo install GitHub Repo MCP for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@Ryan0204/github-repo-mcp):\\n\\n```bash\\nnpx -y @smithery/cli install @Ryan0204/github-repo-mcp --client claude\\n```\\n\\n\\nWait a few seconds or click on the refresh button a few times if it does not register. If it still won't register, make sure you entered the right command.\\n\\n### Step 2. Configuration\\n\\nThe GitHub Repo MCP server can use a GitHub token for higher rate limits when accessing the GitHub API.\\n\\n#### Environment Variables\\n\\n| Variable | Required | Default | Description |\\n|----------|----------|---------|-------------|\\n| `GITHUB_TOKEN` | No | None | Your GitHub personal access token for higher rate limits |\\n\\n#### Setting Up a GitHub Token (Optional)\\n\\nWhile the server works without authentication, GitHub API has rate limits that are much lower for unauthenticated requests. To increase your rate limit:\\n\\n1. Create a personal access token at https://github.com/settings/tokens\\n2. Set the token as an environment variable in mcp.json:\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"github-repo-mcp\\\": {\\n      \\\"command\\\": \\\"...\\\",\\n      \\\"args\\\": [\\n        ...\\n      ],\\n      \\\"env\\\": {\\n        \\\"GITHUB_TOKEN\\\": \\\"Your_Github_Token\\\"\\n      }\\n      \\\"enabled\\\": true,\\n    }\\n  }\\n}\\n```\\n\\n## Feature Overview\\n\\n### Repository Browsing Tools\\n\\nThe server provides three main tools for interacting with GitHub repositories:\\n\\n#### 1. `getRepoAllDirectories`\\n\\nLists all files and directories at the root of a GitHub repository.\\n\\n- **Parameters**:\\n  - `repoUrl`: The URL of the GitHub repository (e.g., \\\"https://github.com/owner/repo\\\")\\n\\n#### 2. `getRepoDirectories`\\n\\nLists contents of a specific directory in a GitHub repository.\\n\\n- **Parameters**:\\n  - `repoUrl`: The URL of the GitHub repository\\n  - `path`: The directory path to fetch (e.g., \\\"src\\\")\\n\\n#### 3. `getRepoFile`\\n\\nRetrieves and displays the content of a specific file from a GitHub repository.\\n\\n- **Parameters**:\\n  - `repoUrl`: The URL of the GitHub repository\\n  - `path`: The file path to fetch (e.g., \\\"src/index.js\\\")\\n\\n### Usage Examples\\n\\nHere are some examples of how to use these tools with an AI assistant:\\n\\n1. **Browsing a repository root**:\\n   Ask your AI assistant to \\\"Show me the contents of the repository at https://github.com/Ryan0204/github-repo-mcp\\\"\\n\\n2. **Exploring a specific directory**:\\n   Ask \\\"What files are in the src directory of https://github.com/Ryan0204/github-repo-mcp?\\\"\\n\\n3. **Viewing a file**:\\n   Ask \\\"Show me the README.md file from https://github.com/Ryan0204/github-repo-mcp\\\"\\n\\n### Limitations\\n\\n- **Rate Limiting**: Without authentication, GitHub API has strict rate limits (60 requests per hour)\\n- **Private Repositories**: Can only access public repositories unless a token with appropriate permissions is provided\\n- **Binary Files**: The server detects common binary file extensions and won't display their contents\\n- **Large Files**: GitHub API has limitations on the size of files that can be ret\\n[...truncated for length...]\", \"tools\": [{\"name\": \"stdio\", \"description\": \"protocol\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for stdio\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"GITHUB_TOKEN\", \"description\": \"| No | None | Your GitHub personal access token for higher rate limits |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for GITHUB_TOKEN\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"getRepoAllDirectories\", \"description\": \"Lists all files and directories at the root of a GitHub repository.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"repoUrl\", \"description\": \"The URL of the GitHub repository (e.g., \\\"https://github.com/owner/repo\\\")\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"URL or link to process\"}}, \"required\": [\"url\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"getRepoDirectories\", \"description\": \"Lists contents of a specific directory in a GitHub repository.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"message\": {\"type\": \"string\", \"description\": \"Text content or message\"}}, \"required\": [\"message\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"path\", \"description\": \"The directory path to fetch (e.g., \\\"src\\\")\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"getRepoFile\", \"description\": \"Retrieves and displays the content of a specific file from a GitHub repository.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}, \"message\": {\"type\": \"string\", \"description\": \"Text content or message\"}}, \"required\": [\"file_path\", \"message\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 7, \"homepage\": \"\", \"url\": \"https://github.com/Ryan0204/github-repo-mcp\", \"topics\": [\"github\", \"github-mcp\", \"github-mcp-server\", \"mcp\", \"mcp-github\", \"mcp-server\"], \"data_sources\": [\"github\"]}", "target": "", "id": "ryan0204/github-repo-mcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"mcp-security-scan\", \"server_id\": \"sxhxliang/mcp-security-scan\", \"description\": \"MCP-security-scan: Security scanner for Model Context Protocol servers and tools\", \"readme\": \"# MCP \\u5b89\\u5168\\u626b\\u63cf\\u5de5\\u5177\\n\\n## \\u9879\\u76ee\\u7b80\\u4ecb\\nMCP\\u5b89\\u5168\\u626b\\u63cf\\u5de5\\u5177\\u662f\\u4e00\\u4e2a\\u7528\\u4e8e\\u68c0\\u6d4b\\u548c\\u9a8c\\u8bc1MCP(Model Context Protocol)\\u914d\\u7f6e\\u6587\\u4ef6\\u4e2d\\u670d\\u52a1\\u5668\\u3001\\u63d0\\u793a\\u8bcd(prompts)\\u3001\\u8d44\\u6e90(resources)\\u548c\\u5de5\\u5177(tools)\\u5b89\\u5168\\u6027\\u7684Rust\\u5e94\\u7528\\u7a0b\\u5e8f\\u3002\\n\\n## \\u6838\\u5fc3\\u529f\\u80fd\\n- \\u2705 \\u626b\\u63cfMCP\\u914d\\u7f6e\\u6587\\u4ef6\\u4e2d\\u7684\\u670d\\u52a1\\u5668\\u914d\\u7f6e\\n- \\u2705 \\u81ea\\u52a8\\u9a8c\\u8bc1\\u670d\\u52a1\\u5668\\u4e2d\\u7684\\u5b9e\\u4f53(prompts/resources/tools)\\u5b89\\u5168\\u6027\\n- \\u2705 \\u652f\\u6301\\u5ba1\\u67e5\\u6a21\\u5f0f\\uff0c\\u5c06prompts/resources/tools\\u63cf\\u8ff0\\u88c5\\u6362\\u6210\\u4e2d\\u6587\\n- \\u2705 \\u652f\\u6301\\u591a\\u79cdMCP\\u670d\\u52a1\\u5668\\u7c7b\\u578b(SSE/Stdio)\\n- \\u2705 \\u5b9e\\u65f6\\u663e\\u793a\\u626b\\u63cf\\u8fdb\\u5ea6\\u548c\\u7ed3\\u679c\\n- \\u2705 \\u652f\\u6301\\u767d\\u540d\\u5355\\u7ba1\\u7406\\u529f\\u80fd\\n- \\u2705 \\u8bb0\\u5f55\\u626b\\u63cf\\u5386\\u53f2\\u5e76\\u68c0\\u6d4b\\u914d\\u7f6e\\u53d8\\u66f4\\n\\n\\n## \\u6280\\u672f\\u6808\\n- \\u8bed\\u8a00: Rust\\n- \\u4e3b\\u8981\\u4f9d\\u8d56:\\n  - `rmcp` - MCP\\u534f\\u8bae\\u5b9e\\u73b0\\n  - `serde` - \\u5e8f\\u5217\\u5316/\\u53cd\\u5e8f\\u5217\\u5316\\n  - `chrono` - \\u65f6\\u95f4\\u5904\\u7406\\n  - `colored` - \\u7ec8\\u7aef\\u5f69\\u8272\\u8f93\\u51fa\\n\\n## \\u5b89\\u88c5\\u4e0e\\u4f7f\\u7528\\n### \\u5b89\\u88c5\\n```bash\\ncargo install --path .\\n```\\n\\n### \\u57fa\\u672c\\u7528\\u6cd5\\n```bash\\nmcp-security-scan [\\u914d\\u7f6e\\u6587\\u4ef6\\u8def\\u5f84]\\n```\\n\\n### \\u9ad8\\u7ea7\\u9009\\u9879\\n- `--storage-path`: \\u6307\\u5b9a\\u5b58\\u50a8\\u626b\\u63cf\\u7ed3\\u679c\\u7684\\u8def\\u5f84\\n- `--base-url`: \\u8bbe\\u7f6e\\u9a8c\\u8bc1API\\u7684\\u57fa\\u7840URL\\n- `--reset-whitelist`: \\u91cd\\u7f6e\\u767d\\u540d\\u5355\\n\\n## \\u5de5\\u4f5c\\u539f\\u7406\\n1. \\u89e3\\u6790MCP\\u914d\\u7f6e\\u6587\\u4ef6\\uff0c\\u63d0\\u53d6\\u670d\\u52a1\\u5668\\u914d\\u7f6e\\n2. \\u8fde\\u63a5\\u5230\\u6bcf\\u4e2a\\u670d\\u52a1\\u5668\\u5e76\\u83b7\\u53d6\\u6240\\u6709\\u5b9e\\u4f53(prompts/resources/tools)\\n3. \\u8ba1\\u7b97\\u6bcf\\u4e2a\\u5b9e\\u4f53\\u7684MD5\\u54c8\\u5e0c\\u503c(\\u57fa\\u4e8e\\u63cf\\u8ff0\\u4fe1\\u606f)\\n4. \\u901a\\u8fc7\\u9a8c\\u8bc1API\\u68c0\\u67e5\\u5b9e\\u4f53\\u5b89\\u5168\\u6027\\n5. \\u8bb0\\u5f55\\u626b\\u63cf\\u7ed3\\u679c\\u5e76\\u4e0e\\u5386\\u53f2\\u8bb0\\u5f55\\u6bd4\\u8f83\\n6. \\u652f\\u6301\\u767d\\u540d\\u5355\\u529f\\u80fd\\u8df3\\u8fc7\\u5df2\\u9a8c\\u8bc1\\u7684\\u5b89\\u5168\\u5b9e\\u4f53\\n\\n## \\u914d\\u7f6e\\u793a\\u4f8b\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"example_server\\\": {\\n      \\\"url\\\": \\\"http://example.com/sse\\\",\\n      \\\"type\\\": \\\"sse\\\"\\n    },\\n    \\\"local_mcp\\\": {\\n      \\\"command\\\": \\\"npx\\\",\\n      \\\"args\\\": [\\n        \\\"-y\\\",\\n        \\\"example-server\\\"\\n      ]\\n    }\\n  }\\n}\\n```\\n\\n## \\u8d21\\u732e\\u6307\\u5357\\n\\u6b22\\u8fce\\u63d0\\u4ea4Pull Request\\uff01\\u8bf7\\u786e\\u4fdd:\\n1. \\u4ee3\\u7801\\u7b26\\u5408Rust\\u60ef\\u7528\\u5199\\u6cd5\\n2. \\u5305\\u542b\\u9002\\u5f53\\u7684\\u6d4b\\u8bd5\\u7528\\u4f8b\\n3. \\u66f4\\u65b0\\u76f8\\u5173\\u6587\\u6863\\n\\n## \\u8bb8\\u53ef\\u8bc1\\nMIT\", \"tools\": [{\"name\": \"rmcp\", \"description\": \"- MCP\\u534f\\u8bae\\u5b9e\\u73b0\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for rmcp\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"serde\", \"description\": \"- \\u5e8f\\u5217\\u5316/\\u53cd\\u5e8f\\u5217\\u5316\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for serde\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"chrono\", \"description\": \"- \\u65f6\\u95f4\\u5904\\u7406\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for chrono\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"colored\", \"description\": \"- \\u7ec8\\u7aef\\u5f69\\u8272\\u8f93\\u51fa\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for colored\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 4, \"homepage\": \"\", \"url\": \"https://github.com/sxhxliang/mcp-security-scan\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "sxhxliang/mcp-security-scan", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"mcp_weather\", \"server_id\": \"xuezhijian/mcp_weather\", \"description\": \"MCP Server \\u548c\\u98ce\\u5929\\u6c14API\\u4f8b\\u5b50\\u3002\", \"readme\": \"# Weather MCP Server\\n\\n\\u4e00\\u4e2a\\u63d0\\u4f9b\\u5929\\u6c14\\u9884\\u62a5\\u548c\\u57ce\\u5e02\\u4fe1\\u606f\\u67e5\\u8be2\\u529f\\u80fd\\u7684Model Context Protocol\\u670d\\u52a1\\u5668\\u3002\\u8be5\\u670d\\u52a1\\u5668\\u5141\\u8bb8LLMs\\u83b7\\u53d6\\u672a\\u676524\\u5c0f\\u65f6\\u7684\\u5929\\u6c14\\u4fe1\\u606f\\uff0c\\u5e76\\u652f\\u6301\\u901a\\u8fc7\\u57ce\\u5e02\\u540d\\u79f0\\u3001\\u7ecf\\u7eac\\u5ea6\\u7b49\\u65b9\\u5f0f\\u67e5\\u8be2\\u57ce\\u5e02\\u4fe1\\u606f\\u3002\\n\\n### \\u53ef\\u7528\\u5de5\\u5177\\n\\n- `get_24h_weather` - \\u83b7\\u53d6\\u672a\\u676524\\u5c0f\\u65f6\\u7684\\u5929\\u6c14\\u9884\\u62a5\\u3002\\n  - \\u5fc5\\u9700\\u53c2\\u6570\\uff1a\\n    - `location` (string): \\u57ce\\u5e02\\u540d\\u79f0\\u6216\\u7ecf\\u7eac\\u5ea6\\uff08\\u4f8b\\u5982\\uff0c\\u5317\\u4eac\\u6216116.41,39.92\\uff09\\n\\n## \\u5b89\\u88c5\\n\\n### \\u4f7f\\u7528uv\\uff08\\u63a8\\u8350\\uff09\\n\\n\\u4f7f\\u7528[`uv`](https://docs.astral.sh/uv/)\\u65f6\\u65e0\\u9700\\u7279\\u5b9a\\u5b89\\u88c5\\u3002\\u6211\\u4eec\\u5c06\\u4f7f\\u7528[`uvx`](https://docs.astral.sh/uv/guides/tools/)\\u76f4\\u63a5\\u8fd0\\u884c*mcp-server-weather*\\u3002\\n\\n### \\u4f7f\\u7528PIP\\n\\n\\u6216\\u8005\\uff0c\\u4f60\\u53ef\\u4ee5\\u901a\\u8fc7pip\\u5b89\\u88c5`mcp-server-weather`\\uff1a\\n\\n```bash\\npip install mcp-server-weather\\n```\\n\\n\\u5b89\\u88c5\\u540e\\uff0c\\u4f60\\u53ef\\u4ee5\\u4f7f\\u7528\\u4ee5\\u4e0b\\u547d\\u4ee4\\u4f5c\\u4e3a\\u811a\\u672c\\u8fd0\\u884c\\uff1a\\n\\n```bash\\npython -m mcp_server_weather\\n```\\n\\n## \\u914d\\u7f6e\\n\\n### \\u914d\\u7f6eClaude.app\\n\\n\\u5728Claude\\u8bbe\\u7f6e\\u4e2d\\u6dfb\\u52a0\\uff1a\\n\\n<details>\\n<summary>\\u4f7f\\u7528uvx</summary>\\n\\n```json\\n\\\"mcpServers\\\": {\\n  \\\"weather\\\": {\\n    \\\"command\\\": \\\"uvx\\\",\\n    \\\"args\\\": [\\\"mcp-server-weather\\\"]\\n  }\\n}\\n```\\n</details>\\n\\n<details>\\n<summary>\\u4f7f\\u7528docker</summary>\\n\\n```json\\n\\\"mcpServers\\\": {\\n  \\\"weather\\\": {\\n    \\\"command\\\": \\\"docker\\\",\\n    \\\"args\\\": [\\\"run\\\", \\\"-i\\\", \\\"--rm\\\", \\\"mcp/weather\\\"]\\n  }\\n}\\n```\\n</details>\\n\\n<details>\\n<summary>\\u4f7f\\u7528pip\\u5b89\\u88c5</summary>\\n\\n```json\\n\\\"mcpServers\\\": {\\n  \\\"weather\\\": {\\n    \\\"command\\\": \\\"python\\\",\\n    \\\"args\\\": [\\\"-m\\\", \\\"mcp_server_weather\\\"]\\n  }\\n}\\n```\\n</details>\\n\\n### \\u914d\\u7f6eZed\\n\\n\\u5728Zed\\u7684settings.json\\u4e2d\\u6dfb\\u52a0\\uff1a\\n\\n<details>\\n<summary>\\u4f7f\\u7528uvx</summary>\\n\\n```json\\n\\\"context_servers\\\": [\\n  \\\"mcp-server-weather\\\": {\\n    \\\"command\\\": \\\"uvx\\\",\\n    \\\"args\\\": [\\\"mcp-server-weather\\\"]\\n  }\\n],\\n```\\n</details>\\n\\n<details>\\n<summary>\\u4f7f\\u7528pip\\u5b89\\u88c5</summary>\\n\\n```json\\n\\\"context_servers\\\": {\\n  \\\"mcp-server-weather\\\": {\\n    \\\"command\\\": \\\"python\\\",\\n    \\\"args\\\": [\\\"-m\\\", \\\"mcp_server_weather\\\"]\\n  }\\n},\\n```\\n</details>\\n\\n## \\u793a\\u4f8b\\u4ea4\\u4e92\\n\\n1. \\u83b7\\u53d6\\u672a\\u676524\\u5c0f\\u65f6\\u5929\\u6c14\\uff1a\\n```json\\n{\\n  \\\"name\\\": \\\"get_24h_weather\\\",\\n  \\\"arguments\\\": {\\n    \\\"location\\\": \\\"\\u5e7f\\u5dde \\u5929\\u6cb3\\\"\\n  }\\n}\\n```\\n\\u54cd\\u5e94\\uff1a\\n```json\\n{\\n  \\\"location\\\": \\\"\\u5e7f\\u5dde \\u5929\\u6cb3\\\",\\n  \\\"forecast\\\": \\\"\\u672a\\u676524\\u5c0f\\u65f6\\u7684\\u5929\\u6c14\\u4fe1\\u606f...\\\"\\n}\\n```\\n\\n## \\u8c03\\u8bd5\\n\\n\\u4f60\\u53ef\\u4ee5\\u4f7f\\u7528MCP inspector\\u6765\\u8c03\\u8bd5\\u670d\\u52a1\\u5668\\u3002\\u5bf9\\u4e8euvx\\u5b89\\u88c5\\uff1a\\n\\n```bash\\nnpx @modelcontextprotocol/inspector uvx mcp-server-weather\\n```\\n\\n\\u6216\\u8005\\u5982\\u679c\\u4f60\\u5728\\u7279\\u5b9a\\u76ee\\u5f55\\u4e2d\\u5b89\\u88c5\\u4e86\\u5305\\u6216\\u6b63\\u5728\\u5f00\\u53d1\\uff1a\\n\\n```bash\\ncd path/to/servers/src/weather\\nnpx @modelcontextprotocol/inspector uv run mcp-server-weather\\n```\\n\\n## \\u6784\\u5efa\\n\\nDocker \\u6784\\u5efa:\\n\\n```bash\\ndocker build -t mcp/weather .\\n```\\n\\n## \\u8d21\\u732e\\n\\n\\u6211\\u4eec\\u9f13\\u52b1\\u5bf9mcp-server-weather\\u7684\\u8d21\\u732e\\uff0c\\u4ee5\\u5e2e\\u52a9\\u6269\\u5c55\\u548c\\u6539\\u8fdb\\u5176\\u529f\\u80fd\\u3002\\u65e0\\u8bba\\u662f\\u6dfb\\u52a0\\u65b0\\u7684\\u5929\\u6c14\\u76f8\\u5173\\u5de5\\u5177\\u3001\\u589e\\u5f3a\\u73b0\\u6709\\u529f\\u80fd\\uff0c\\u8fd8\\u662f\\u6539\\u8fdb\\u6587\\u6863\\uff0c\\u4f60\\u7684\\u8f93\\u5165\\u90fd\\u5f88\\u6709\\u4ef7\\u503c\\u3002\\n\\n\\u6709\\u5173\\u5176\\u4ed6MCP\\u670d\\u52a1\\u5668\\u548c\\u5b9e\\u73b0\\u6a21\\u5f0f\\u7684\\u793a\\u4f8b\\uff0c\\u8bf7\\u53c2\\u89c1\\uff1a\\nhttps://github.com/modelcontextprotocol/servers\\n\\n\\u6b22\\u8fce\\u63d0\\u4ea4\\u62c9\\u53d6\\u8bf7\\u6c42\\uff01\\u968f\\u65f6\\u8d21\\u732e\\u65b0\\u60f3\\u6cd5\\u3001\\u9519\\u8bef\\u4fee\\u590d\\u6216\\u589e\\u5f3a\\u529f\\u80fd\\uff0c\\u4ee5\\u4f7fmcp-server-weather\\u66f4\\u52a0\\u5f3a\\u5927\\u548c\\u5b9e\\u7528\\u3002\\n\\n## \\u8bb8\\u53ef\\u8bc1\\n\\nmcp-server-weather\\u6839\\u636eMIT\\u8bb8\\u53ef\\u8bc1\\u6388\\u6743\\u3002\\u8fd9\\u610f\\u5473\\u7740\\u4f60\\u53ef\\u4ee5\\u81ea\\u7531\\u4f7f\\u7528\\u3001\\u4fee\\u6539\\u548c\\u5206\\u53d1\\u8f6f\\u4ef6\\uff0c\\u4f46\\u9700\\u9075\\u5b88MIT\\u8bb8\\u53ef\\u8bc1\\u7684\\u6761\\u6b3e\\u548c\\u6761\\u4ef6\\u3002\\u6709\\u5173\\u8be6\\u7ec6\\u4fe1\\u606f\\uff0c\\u8bf7\\u53c2\\u9605\\u9879\\u76ee\\u5b58\\u50a8\\u5e93\\u4e2d\\u7684LICENSE\\u6587\\u4ef6\\u3002\\n\", \"tools\": [{\"name\": \"get_24h_weather\", \"description\": \"- \\u83b7\\u53d6\\u672a\\u676524\\u5c0f\\u65f6\\u7684\\u5929\\u6c14\\u9884\\u62a5\\u3002\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_24h_weather\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"location\", \"description\": \"(string): \\u57ce\\u5e02\\u540d\\u79f0\\u6216\\u7ecf\\u7eac\\u5ea6\\uff08\\u4f8b\\u5982\\uff0c\\u5317\\u4eac\\u6216116.41,39.92\\uff09\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for location\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"uv\", \"description\": \"](https://docs.astral.sh/uv/)\\u65f6\\u65e0\\u9700\\u7279\\u5b9a\\u5b89\\u88c5\\u3002\\u6211\\u4eec\\u5c06\\u4f7f\\u7528[`uvx`](https://docs.astral.sh/uv/guides/tools/)\\u76f4\\u63a5\\u8fd0\\u884c*mcp-server-weather*\\u3002\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for uv\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 3, \"homepage\": \"\", \"url\": \"https://github.com/xuezhijian/mcp_weather\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "xuezhijian/mcp_weather", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"js-sandbox-mcp-server\", \"server_id\": \"garc33/js-sandbox-mcp-server\", \"description\": \"\", \"readme\": \"# js-sandbox MCP Server\\n\\nA Model Context Protocol server that provides a secure JavaScript execution environment.\\n\\n## Features\\n\\n### Tools\\n- `execute_js` - Executes JavaScript code in an isolated environment\\n  - Parameters:\\n    - `code` (required): JavaScript code to execute\\n    - `timeout` (optional): Maximum execution time in milliseconds (100-30000ms)\\n    - `memory` (optional): Memory limit in bytes (1MB-100MB)\\n  - Returns the result of code execution\\n\\n### Security\\n- Isolated code execution in a controlled environment\\n- Configurable execution time and memory limits\\n- Protection against malicious code\\n\\n## Development\\n\\nInstall dependencies:\\n```bash\\nnpm install\\n```\\n\\nBuild the server:\\n```bash\\nnpm run build\\n```\\n\\nDevelopment mode with auto-rebuild:\\n```bash\\nnpm run watch\\n```\\n\\n## Installation\\n\\nTo use with Claude Desktop, add the server configuration:\\n\\nMacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\\nWindows: `%APPDATA%/Claude/claude_desktop_config.json`\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"js-sandbox\\\": {\\n      \\\"command\\\": \\\"/path/to/js-sandbox/build/index.js\\\"\\n    }\\n  }\\n}\\n```\\n\\n### Debugging\\n\\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as:\\n\\n```bash\\nnpm run inspector\\n```\\n\\nThe Inspector will provide a URL to access debugging tools in your browser.\\n\", \"tools\": [{\"name\": \"execute_js\", \"description\": \"- Executes JavaScript code in an isolated environment\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for execute_js\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"code\", \"description\": \"(required): JavaScript code to execute\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for code\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"timeout\", \"description\": \"(optional): Maximum execution time in milliseconds (100-30000ms)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for timeout\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"memory\", \"description\": \"(optional): Memory limit in bytes (1MB-100MB)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for memory\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 4, \"homepage\": \"\", \"url\": \"https://github.com/garc33/js-sandbox-mcp-server\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "garc33/js-sandbox-mcp-server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"tabby-mcp-server\", \"server_id\": \"thuanpham582002/tabby-mcp-server\", \"description\": \"MCP server for control Tabby terminal\", \"readme\": \"# \\ud83d\\ude80 Tabby-MCP-Server\\n\\n[![npm version](https://img.shields.io/npm/v/tabby-mcp.svg)](https://www.npmjs.com/package/tabby-mcp)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![GitHub issues](https://img.shields.io/github/issues/thuanpham582002/tabby-mcp-server.svg)](https://github.com/thuanpham582002/tabby-mcp-server/issues)\\n[![GitHub stars](https://img.shields.io/github/stars/thuanpham582002/tabby-mcp-server.svg)](https://github.com/thuanpham582002/tabby-mcp-server/stargazers)\\n\\n> Powerful Tabby plugin that implements Model Context Protocol (MCP) server, enabling AI-powered terminal control and automation.\\n\\n![Demo](https://raw.githubusercontent.com/thuanpham582002/tabby-mcp-server/main/assets/demo.gif)\\n\\n## \\ud83d\\udcf9 Video Demo\\n\\nWatch the full video demonstration of Tabby-MCP in action:\\n\\n[![Tabby MCP Plugin - AI Terminal Integration Demo](https://img.youtube.com/vi/uFWBGiD4x9c/0.jpg)](https://youtu.be/uFWBGiD4x9c)\\n\\n## \\u2728 Features\\n\\n- \\ud83e\\udd16 **AI Connection**: Seamlessly connect AI assistants to your terminal\\n- \\ud83d\\udd0c **MCP Server**: Built-in Model Context Protocol server implementation\\n- \\ud83d\\udda5\\ufe0f **Terminal Control**: Allow AI to execute commands and read terminal output\\n- \\ud83d\\udd0d **Session Management**: View and manage SSH sessions\\n- \\ud83d\\udeab **Command Abort**: Safely abort running commands\\n- \\ud83d\\udccb **Buffer Access**: Retrieve terminal buffer content with flexible options\\n\\n## \\ud83d\\udccb Table of Contents\\n\\n- [Installation](#installation)\\n- [Quick Start](#quick-start)\\n- [Usage Examples](#usage-examples)\\n- [Configuration](#configuration)\\n- [API Reference](#api-reference)\\n- [Contributing](#contributing)\\n  - [Continuous Integration](#continuous-integration)\\n- [License](#license)\\n\\n## \\ud83d\\udd27 Installation\\n\\n### Using Docker\\n\\nYou can build and install the plugin using Docker with the following command:\\n\\n```bash\\ngit clone https://github.com/thuanpham582002/tabby-mcp-server.git\\ncd tabby-mcp-server\\n# Build the Docker image\\ndocker build -t tabby-mcp . && docker run -v $(pwd)/build:/output tabby-mcp\\nbash scripts/copy_to_plugin_folder.sh\\n```\\n\\nThis command builds a Docker image tagged as 'tabby-mcp' and runs a container from this image, mounting your local 'build' directory to '/output' in the container. The script `scripts/copy_to_plugin_folder.sh` will copy the built files to the Tabby plugin folder.\\n\\n> **Note:** Our CI/CD workflows on GitHub also use this Docker-based build process to ensure consistency between local development and production releases.\\n\\n## \\ud83d\\ude80 Quick Start\\n\\n1. Install the plugin\\n2. Configure your Tabby environment\\n3. Connect to MCP server from any of the supported clients listed at https://modelcontextprotocol.io/clients\\n\\n## \\ud83d\\udcbb Usage Examples\\n\\n### Connect an AI to Control Your Terminal\\n\\n### Retrieve SSH Session List\\n\\n## \\u2699\\ufe0f Configuration\\n\\nConfigure the MCP server through the Tabby settings:\\n\\n```json\\n{\\n  \\\"mcp\\\": {\\n    \\\"port\\\": 3001,\\n    \\\"host\\\": \\\"http://localhost:3001\\\", // note: in development\\n    \\\"enableLogging\\\": false,\\n    \\\"startOnBoot\\\": true\\n  }\\n}\\n```\\n\\n### MCP Client Configuration\\n\\nWhen connecting to the Tabby MCP server from an AI client (like Claude, GPT, etc.), use the following configuration:\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"Tabby MCP\\\": {\\n      \\\"url\\\": \\\"http://localhost:3001/sse\\\"\\n    }\\n  }\\n}\\n```\\n\\n\\nYou may need to adjust the `url` parameter if you've configured a different host or port in your server settings.\\n\\n## \\ud83d\\udcda API Reference\\n\\n### Available Tools\\n\\n| Tool | Description | Parameters |\\n|------|-------------|------------|\\n| `getSshSessionList` | Get list of SSH sessions | None |\\n| `execCommand` | Execute a command in terminal | `command`, `tabId` |\\n| `getTerminalBuffer` | Get terminal content | `tabId`, `startLine`, `endLine` |\\n| `abortCommand` | Abort a running command | None |\\n\\n## \\ud83e\\udd1d Contributing\\n\\nContributions are welcome! Here's how you can help:\\n\\n1. Fork the repository\\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\\n4. Push to the branch (`git push origin feature/amazing-feature`)\\n5. Open a Pull Request\\n\\nSee the [contributing guidelines](CONTRIBUTING.md) for more details.\\n\\n### Continuous Integration\\n\\nOur project uses GitHub Actions for CI/CD with Docker-based builds:\\n\\n- **Pull Requests**: Automatically built and tested using Docker to ensure compatibility\\n- **Main Branch**: Builds with Docker, publishes to npm, and creates GitHub releases\\n- **Benefits**: Consistent environment across development, testing, and production\\n\\nTo set up the CI/CD pipeline in your fork:\\n\\n1. Configure the required secrets in your repository settings:\\n   - `NPM_TOKEN`: Your npm access token for publishing\\n   - `GITHUB_TOKEN`: Automatically provided by GitHub Actions\\n\\n2. The workflows will automatically run on push and pull request events.\\n\\n## \\ud83d\\udcdd License\\n\\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\\n\\n---\\n\\n<p align=\\\"center\\\">\\n  Made with \\u2764\\ufe0f by <a href=\\\"https://github.com/thuanpham582002\\\">Pham Tien \\n[...truncated for length...]\", \"tools\": [{\"name\": \"getSshSessionList\", \"description\": \"| Get list of SSH sessions | None |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for getSshSessionList\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"execCommand\", \"description\": \"| Execute a command in terminal | `command`, `tabId` |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for execCommand\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"getTerminalBuffer\", \"description\": \"| Get terminal content | `tabId`, `startLine`, `endLine` |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"message\": {\"type\": \"string\", \"description\": \"Text content or message\"}}, \"required\": [\"message\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"abortCommand\", \"description\": \"| Abort a running command | None |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for abortCommand\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"url\", \"description\": \"parameter if you've configured a different host or port in your server settings.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"URL or link to process\"}}, \"required\": [\"url\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"NPM_TOKEN\", \"description\": \"Your npm access token for publishing\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for NPM_TOKEN\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"GITHUB_TOKEN\", \"description\": \"Automatically provided by GitHub Actions\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for GITHUB_TOKEN\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 7, \"homepage\": \"\", \"url\": \"https://github.com/thuanpham582002/tabby-mcp-server\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "thuanpham582002/tabby-mcp-server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"website-downloader\", \"server_id\": \"pskill9/website-downloader\", \"description\": \"MCP server to download entire websites\", \"readme\": \"# Website Downloader MCP Server\\n\\nThis MCP server provides a tool to download entire websites using wget. It preserves the website structure and converts links to work locally.\\n\\n<a href=\\\"https://glama.ai/mcp/servers/egcwr79vu2\\\"><img width=\\\"380\\\" height=\\\"200\\\" src=\\\"https://glama.ai/mcp/servers/egcwr79vu2/badge\\\" alt=\\\"Google Workspace Server MCP server\\\" /></a>\\n\\n## Prerequisites\\n\\nThe server requires `wget` to be installed on your system.\\n\\n### Installing wget\\n\\n#### macOS\\nUsing Homebrew:\\n```bash\\nbrew install wget\\n```\\n\\n#### Linux (Debian/Ubuntu)\\n```bash\\nsudo apt-get update\\nsudo apt-get install wget\\n```\\n\\n#### Linux (Red Hat/Fedora)\\n```bash\\nsudo dnf install wget\\n```\\n\\n#### Windows\\n1. Using [Chocolatey](https://chocolatey.org/):\\n```bash\\nchoco install wget\\n```\\n\\n2. Or download the binary from: https://eternallybored.org/misc/wget/\\n   - Download the latest wget.exe\\n   - Place it in a directory that's in your PATH (e.g., C:\\\\Windows\\\\System32)\\n\\n## Usage\\n\\nThe server provides a tool called `download_website` with the following parameters:\\n\\n- `url` (required): The URL of the website to download\\n- `outputPath` (optional): The directory where the website should be downloaded. Defaults to the current directory.\\n- `depth` (optional): Maximum depth level for recursive downloading. Defaults to infinite. Set to 0 for just the specified page, 1 for direct links, etc.\\n\\n### Example\\n\\n```json\\n{\\n  \\\"url\\\": \\\"https://example.com\\\",\\n  \\\"outputPath\\\": \\\"/path/to/output\\\",\\n  \\\"depth\\\": 2  // Optional: Download up to 2 levels deep\\n}\\n```\\n\\n## Features\\n\\nThe website downloader:\\n- Downloads recursively with infinite depth\\n- Includes all page requisites (CSS, images, etc.)\\n- Converts links to work locally\\n- Adds appropriate extensions to files\\n- Restricts downloads to the same domain\\n- Preserves the website structure\\n\\n## Installation\\n\\n1. Build the server:\\n```bash\\nnpm install\\nnpm run build\\n```\\n\\n2. Add to MCP settings:\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"website-downloader\\\": {\\n      \\\"command\\\": \\\"node\\\",\\n      \\\"args\\\": [\\\"/path/to/website-downloader/build/index.js\\\"]\\n    }\\n  }\\n}\\n\", \"tools\": [{\"name\": \"wget\", \"description\": \"to be installed on your system.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for wget\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"download_website\", \"description\": \"with the following parameters:\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for download_website\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"url\", \"description\": \"(required): The URL of the website to download\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"URL or link to process\"}}, \"required\": [\"url\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"outputPath\", \"description\": \"(optional): The directory where the website should be downloaded. Defaults to the current directory.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"depth\", \"description\": \"(optional): Maximum depth level for recursive downloading. Defaults to infinite. Set to 0 for just the specified page, 1 for direct links, etc.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"URL or link to process\"}}, \"required\": [\"url\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}], \"tools_count\": 5, \"homepage\": \"\", \"url\": \"https://github.com/pskill9/website-downloader\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "pskill9/website-downloader", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"adobe-express-mcp-server\", \"server_id\": \"sandgrouse/adobe-express-mcp-server\", \"description\": \"\", \"readme\": \"# Adobe Express MCP Server\\n\\nThis is a Model Context Protocol (MCP) server for Adobe Express integration with LLMs like Claude. It provides tools to interact with Adobe Express features directly from LLM interfaces.\\n\\n## Features\\n\\nThe server provides the following tools:\\n\\n1. **Generate Graphic** - Generate an image or graphic using Adobe Express templates\\n2. **Edit Image** - Edit an existing image using Adobe Express tools\\n3. **List Templates** - List available Adobe Express templates\\n\\n## Installation\\n\\n```bash\\n# Clone the repository\\ngit clone <repository-url>\\ncd adobe-express-mcp-server\\n\\n# Install dependencies\\nnpm install\\n```\\n\\n## Development\\n\\n```bash\\n# Build the project\\nnpm run build\\n\\n# Start the server in development mode\\nnpm run dev\\n\\n# Start the server\\nnpm start\\n```\\n\\n## Usage with Claude for Desktop\\n\\nTo use this MCP server with Claude for Desktop:\\n\\n1. Build the project using `npm run build`\\n2. Open/create Claude for Desktop configuration file:\\n   - Mac: `~/Library/Application Support/Claude/claude_desktop_config.json`\\n   - Windows: `%APPDATA%\\\\Claude\\\\claude_desktop_config.json`\\n\\n   You can create/edit this file with VS Code:\\n   ```bash\\n   # For Mac\\n   code ~/Library/Application\\\\ Support/Claude/claude_desktop_config.json\\n   \\n   # For Windows\\n   code %APPDATA%\\\\Claude\\\\claude_desktop_config.json\\n   ```\\n\\n3. Add the server configuration:\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"adobe-express\\\": {\\n      \\\"command\\\": \\\"node\\\",\\n      \\\"args\\\": [\\n        \\\"/ABSOLUTE/PATH/TO/adobe-express-mcp-server/dist/index.js\\\"\\n      ]\\n    }\\n  }\\n}\\n```\\n\\n4. Replace `/ABSOLUTE/PATH/TO/` with the actual path to your project.\\n   For example:\\n   ```\\n   \\\"/Users/username/Documents/adobe-express-mcp-server/dist/index.js\\\"\\n   ```\\n   \\n5. Save the file and restart Claude for Desktop\\n\\n6. When you open Claude, you should see a hammer icon, indicating that MCP tools are available:\\n   \\n   ![MCP Tools Icon](https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/claude-desktop-mcp-hammer-icon.svg)\\n\\n7. You can now use prompts like \\\"Create a social media graphic for a product launch\\\" and Claude will suggest using the Adobe Express tools\\n\\n## Example Prompts\\n\\nHere are some example prompts to try with Claude and this MCP server:\\n\\n- \\\"Create a social media post about our new product launch\\\"\\n- \\\"Edit my profile image to remove the background\\\"\\n- \\\"Show me available presentation templates\\\"\\n\\n## License\\n\\nMIT\\n\", \"tools\": [], \"tools_count\": 0, \"homepage\": \"\", \"url\": \"https://github.com/Sandgrouse/adobe-express-mcp-server\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "sandgrouse/adobe-express-mcp-server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"scribe-crab\", \"server_id\": \"blue-orange-yellow/scribe-crab\", \"description\": \"The MCP server that generates documentation comments for Rust.\", \"readme\": \"# scribe-crab\\n![Rust](https://img.shields.io/badge/rust-2024-orange)\\n![GitHub forks](https://img.shields.io/github/forks/blue-orange-yellow/scribe-crab?style=social)\\n[![GitHub stars](https://img.shields.io/github/stars/blue-orange-yellow/scribe-crab?style=social)](https://github.com/blue-orange-yellow/scribe-crab/stargazers)\\n\\nThe MCP server that generates documentation comments for Rust.\\n![ChatGPT Image 2025\\u5e743\\u670829\\u65e5 20_55_37](https://github.com/user-attachments/assets/c7cc9514-cac5-4fc9-9145-800375be6bb6)\\n\\n\\n\\n## Overview\\n\\nscribe-crab is an MCP (Model Context Protocol) server that helps developers generate documentation comments for their Rust functions. It takes Rust function code as input and produces documentation comments following a customizable format.\\n\\n## Features\\n\\n- Generate documentation comments for Rust functions\\n- Use customizable format templates\\n- Integrate with MCP clients (such as Cursor IDE)\\n\\n## Installation\\n\\nClone the repository and build:\\n\\n```bash\\ngit clone https://github.com/blue-orange-yellow/scribe-crab.git\\ncd scribe-crab\\ncargo build --release\\n```\\n\\n## Configuration\\n\\nTo use with clients like Cursor, you need to configure it as an MCP server. Example Cursor configuration:\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"scribe-crab\\\": {\\n      \\\"command\\\": \\\"/path/to/scribe-crab/target/release/scribe-crab\\\",\\n      \\\"args\\\": [],\\n      \\\"cwd\\\": \\\"/path/to/scribe-crab\\\",\\n      \\\"env\\\": {\\n        \\\"FORMAT_PATH\\\": \\\"/path/to/scribe-crab/.format.md\\\"\\n      }\\n    }\\n  }\\n}\\n```\\n\\n## Usage\\n\\n1. Set the format file path as an environment variable\\n2. Start the MCP server\\n3. Use the tool through an MCP client (like Cursor)\\n4. Ask Cursor Agent \\\"Generate doc comment for XX function\\\" or similar instructions\\n\\n## Documentation Format\\n\\nThe documentation format can be customized by editing the `.format.md` file.\\nExample:\\n\\n```rust\\n/// # Description\\n/// \\n/// This function does XYZ.\\n/// \\n/// # Arguments\\n/// \\n/// * - Description of the first parameter\\n/// * - Description of the second parameter\\n/// \\n/// # Returns\\n/// \\n/// Description of the return value\\n```\\n\\n## Languages\\n\\nThis README is also available in:\\n- [\\u65e5\\u672c\\u8a9e](docs/translations/README.ja.md)\\n- [\\u4e2d\\u6587](docs/translations/README.zh.md)\\n- [Espa\\u00f1ol](docs/translations/README.es.md)\\n\", \"tools\": [], \"tools_count\": 0, \"homepage\": \"\", \"url\": \"https://github.com/blue-orange-yellow/scribe-crab\", \"topics\": [\"cursor\", \"mcp\", \"rust\"], \"data_sources\": [\"github\"]}", "target": "", "id": "blue-orange-yellow/scribe-crab", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"svelte5-mcp\", \"server_id\": \"studentofjs/svelte5-mcp\", \"description\": \"A specialized Model Context Protocol (MCP) server for Svelte 5 frontend development\", \"readme\": \"# Svelte 5 MCP Server\\n\\nA specialized Model Context Protocol (MCP) server for Svelte 5 frontend development, providing curated knowledge, code examples, and intelligent assistance for modern Svelte development with runes, snippets, and enhanced reactivity.\\n\\n## Features\\n\\n### \\ud83d\\udd0d **Searchable Resources**\\n- **Knowledge Base**: Curated Q&A covering Svelte 5 concepts, runes, and best practices\\n- **Code Examples**: Searchable collection of Svelte 5 patterns and component implementations\\n\\n### \\ud83d\\udee0\\ufe0f **Intelligent Tools**\\n- `search_knowledge` - Find explanations and concepts\\n- `search_examples` - Discover code patterns and implementations\\n- `generate_with_context` - Create components using curated patterns\\n- `audit_with_rules` - Review code against Svelte 5 best practices\\n- `explain_concept` - Get detailed explanations with examples\\n\\n### \\ud83d\\udcdd **Smart Prompts**\\n- `generate-component` - Generate modern Svelte 5 components\\n- `audit-svelte5-code` - Audit code for optimization opportunities\\n- `explain-concept` - Detailed concept explanations\\n- `search-patterns` - Find specific implementation patterns\\n\\n## Installation\\n\\n```bash\\n# Clone and setup\\ngit clone <repository-url>\\ncd svelte5-mcp-server\\n\\n# Install dependencies\\nnpm install\\n\\n# Build the server\\nnpm run build\\n\\n# Start the server\\nnpm start\\n```\\n\\n## Project Structure\\n\\n```\\nsvelte5-mcp-server/\\n\\u251c\\u2500\\u2500 src/\\n\\u2502   \\u2514\\u2500\\u2500 index.ts          # Main MCP server implementation\\n\\u251c\\u2500\\u2500 data/\\n\\u2502   \\u251c\\u2500\\u2500 svelte_5_knowledge.json    # Curated Q&A knowledge base\\n\\u2502   \\u2514\\u2500\\u2500 svelte_5_patterns.json     # Code examples and patterns\\n\\u251c\\u2500\\u2500 package.json\\n\\u251c\\u2500\\u2500 tsconfig.json\\n\\u251c\\u2500\\u2500 example system prompt         # Svelte 5 specific system prompt (quite strict, adjust for your own preferences)\\n\\u2514\\u2500\\u2500 README.md\\n```\\n\\n## Usage with Claude Desktop\\n\\nAdd to your Claude Desktop configuration:\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"svelte5\\\": {\\n      \\\"command\\\": \\\"node\\\",\\n      \\\"args\\\": [\\\"/path/to/svelte5-mcp-server/dist/index.js\\\"],\\n      \\\"env\\\": {}\\n    }\\n  }\\n}\\n```\\n\\n## Usage Examples\\n\\n### \\ud83d\\udd0d Search Knowledge\\n```\\nTool: search_knowledge\\nQuery: \\\"runes reactivity\\\"\\n```\\n\\nReturns detailed explanations about Svelte 5 runes and the new reactivity system.\\n\\n### \\ud83d\\udcda Find Code Examples\\n```\\nTool: search_examples  \\nQuery: \\\"counter component $state\\\"\\n```\\n\\nReturns working Svelte 5 counter implementations using the `$state` rune.\\n\\n### \\ud83c\\udfd7\\ufe0f Generate Components\\n```\\nTool: generate_with_context\\nDescription: \\\"A todo list with add/remove functionality\\\"\\nFeatures: [\\\"$state\\\", \\\"snippets\\\", \\\"accessibility\\\"]\\n```\\n\\nGenerates a complete todo component using modern Svelte 5 patterns with relevant examples from the knowledge base.\\n\\n### \\ud83d\\udd0d Audit Code\\n```\\nTool: audit_with_rules\\nCode: \\\"<script>let count = 0;</script><button on:click={() => count++}>{count}</button>\\\"\\nFocus: \\\"best-practices\\\"\\n```\\n\\nAnalyzes code and suggests Svelte 5 improvements (e.g., using `$state` and modern event handling).\\n\\n## Key Svelte 5 Concepts Covered\\n\\n### \\ud83c\\udfaf **Runes System**\\n- `$state` - Reactive state management\\n- `$derived` - Computed values and derived state\\n- `$effect` - Side effects and lifecycle\\n- `$props` - Component properties\\n- `$bindable` - Two-way data binding\\n- `$inspect` - Development debugging\\n\\n### \\ud83e\\udde9 **Modern Patterns**\\n- **Snippets** - Reusable template blocks (`{#snippet}`, `{@render}`)\\n- **Enhanced Reactivity** - Fine-grained updates\\n- **Event Handling** - Modern `onclick` vs legacy `on:click`\\n- **TypeScript Integration** - Better type inference\\n- **Accessibility** - Built-in a11y considerations\\n\\n### \\ud83d\\udcc8 **Migration Support**\\n- Svelte 4 \\u2192 5 migration patterns\\n- Legacy reactive statements (`$:`) \\u2192 runes\\n- Slots \\u2192 snippets conversion\\n- Event dispatcher \\u2192 callback props\\n\\n## Data Format\\n\\n### Knowledge Base (`svelte_5_knowledge.json`)\\n```json\\n{\\n  \\\"question\\\": \\\"How do you manage reactive state in Svelte 5?\\\",\\n  \\\"answer\\\": \\\"In Svelte 5, reactive state is managed using the $state rune...\\\"\\n}\\n```\\n\\n### Examples (`svelte_5_patterns.json`)\\n```json\\n{\\n  \\\"instruction\\\": \\\"Create a Svelte 5 component demonstrating $state\\\",\\n  \\\"input\\\": \\\"The rune allows you to create reactive state...\\\",\\n  \\\"output\\\": \\\"<script>\\\\nlet count = $state(0);\\\\n</script>\\\\n\\\\n<button onclick={() => count++}>\\\\n  clicks: {count}\\\\n</button>\\\"\\n}\\n```\\n\\n## Configuration\\n\\nThe server uses a better-sqlite3 database and FTS5 queries for search\\n\\n- **Full-Text Search**: Utilizes SQLite's FTS5 extension for powerful and efficient searching across the knowledge base and code examples.\\n- **Tokenization**: Employs the `unicode61` tokenizer with a comprehensive set of separators for robust indexing of terms.\\n- **Synonym Expansion**: Enhances search recall by automatically expanding query terms with predefined Svelte 5-specific synonyms (e.g., '$state' also matches 'reactive state').\\n- **Result Highlighting**: Search results include highlighted matches within relevant fields (e.g., question, answer, instruction) using FTS5's `highlight()` function.\\n- **Relevance Ranking**: Results are ordered by relevance based on FTS5's internal ranking algorithm.\\n- **Advanced Boosting**: Offers capabi\\n[...truncated for length...]\", \"tools\": [{\"name\": \"search_knowledge\", \"description\": \"- Find explanations and concepts\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}}, \"required\": [\"query\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"search_examples\", \"description\": \"- Discover code patterns and implementations\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}}, \"required\": [\"query\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"generate_with_context\", \"description\": \"- Create components using curated patterns\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"message\": {\"type\": \"string\", \"description\": \"Text content or message\"}}, \"required\": [\"message\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"audit_with_rules\", \"description\": \"- Review code against Svelte 5 best practices\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for audit_with_rules\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"explain_concept\", \"description\": \"- Get detailed explanations with examples\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for explain_concept\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"onclick\", \"description\": \"vs legacy `on:click`\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for onclick\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"unicode61\", \"description\": \"tokenizer with a comprehensive set of separators for robust indexing of terms.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for unicode61\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"snippets\", \"description\": \", etc.)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for snippets\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 8, \"homepage\": \"\", \"url\": \"https://github.com/StudentOfJS/svelte5-mcp\", \"topics\": [\"mcp\", \"mcp-server\", \"svelte\", \"svelte5\", \"sveltekit\"], \"data_sources\": [\"github\"]}", "target": "", "id": "studentofjs/svelte5-mcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"domshot\", \"server_id\": \"adtac/domshot\", \"description\": \"MCP server to fetch browser screenshots of DOM elements\", \"readme\": \"# domshot\\n\\nMCP server to fetch browser screenshots of DOM elements.\\n\\nhttps://github.com/user-attachments/assets/1ab36d65-32be-42f5-b3fc-97618c2e96a7\\n\\n### Installation\\n\\n```bash\\n$ git clone https://github.com/adtac/domshot.git\\n$ claude mcp add domshot -- $PWD/domshot/mcp.sh\\n```\\n\\nRestart Claude.\\n\\n### Usage\\n\\nPaste this in the **Console** tab of **Chrome DevTools** on the page you want to give Claude access:\\n\\n```js\\nconst el = document.createElement(\\\"script\\\"); el.src = \\\"http://localhost:8000/embed.js\\\"; document.head.appendChild(el);\\n```\\n\\nThen ask Claude to call `get_browser_screenshot` and describe the result.\\n\\n<details>\\n<summary>See example</summary>\\n\\n```\\n$ claude\\n\\u256d\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u256e\\n\\u2502 \\u273b Welcome to Claude Code!                         \\u2502\\n\\u2502                                                   \\u2502\\n\\u2502   /help for help, /status for your current setup  \\u2502\\n\\u2502                                                   \\u2502\\n\\u2502   cwd: /Users/user/src/tmp/domshot                \\u2502\\n\\u2570\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u256f\\n\\n\\n> call get_browser_screenshot tool and describe the result\\n\\n\\u23fa I'll call the browser screenshot tool and describe what I see.\\n\\n\\u23fa domshot:get_browser_screenshot (MCP)\\n  \\u23bf \\u00a0\\n  \\u23bf \\u00a0[Image]\\n\\n\\u23fa The screenshot shows a simple red webpage with the text \\\"RED\\\" displayed in white text, centered on a solid\\n  red background.\\n```\\n\\n</details>\\n\\n### License\\n\\nMIT\\n\", \"tools\": [{\"name\": \"get_browser_screenshot\", \"description\": \"and describe the result.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_browser_screenshot\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 1, \"homepage\": \"\", \"url\": \"https://github.com/adtac/domshot\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "adtac/domshot", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"pidgin-mcp\", \"server_id\": \"eionrobb/pidgin-mcp\", \"description\": \"An MCP server for Pidgin\", \"readme\": \"\", \"tools\": [], \"tools_count\": 0, \"homepage\": \"\", \"url\": \"https://github.com/EionRobb/pidgin-mcp\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "eionrobb/pidgin-mcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"mcp-notmuch-sendmail\", \"server_id\": \"runekaagaard/mcp-notmuch-sendmail\", \"description\": \"A model context protocol server that reads mails with notmuch and sends mail with sendmail\", \"readme\": \"# MCP Notmuch Sendmail\\n\\n**Status: Works great and is in daily use without any known bugs.**\\n\\n**Status2: I just added the package to PyPI and updated the usage instructions. Please report any issues :)**\\n\\nLet Claude be your email assistant! MCP Notmuch Sendmail connects Claude Desktop to your notmuch email database, allowing it to:\\n\\n- Search and browse your email threads\\n- View conversations in a clean text format\\n- Compose new emails using markdown\\n- Reply to threads with smart deduplication of quoted content\\n- Create beautiful emails with LaTeX-inspired styling\\n- Synchronize your email database by running a configured script\\n\\nUses html2text for HTML email rendering and markdown-it for composing rich HTML emails with inline images.\\n\\n![MCP Notmuch Sendmail in action](https://raw.githubusercontent.com/runekaagaard/mcp-notmuch-sendmail/refs/heads/main/screenshot.png)\\n\\n## Installation\\n\\nEnsure you have uv installed:\\n```bash\\n# Install uv if you haven't already\\ncurl -LsSf https://astral.sh/uv/install.sh | sh\\n```\\n\\n## Usage with Claude Desktop\\n\\nAdd to your `claude_desktop_config.json`:\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"email\\\": {\\n      \\\"command\\\": \\\"uvx\\\",\\n      \\\"args\\\": [\\\"--from\\\", \\\"mcp-notmuch-sendmail==2025.04.09.174710\\\", \\\"--python\\\", \\\"3.10\\\",\\n               \\\"--refresh\\\", \\\"mcp-notmuch-sendmail\\\"]\\n      \\\"env\\\": {\\n        \\\"NOTMUCH_DATABASE_PATH\\\": \\\"/path/to/your/notmuch/db\\\",\\n        \\\"NOTMUCH_REPLY_SEPARATORS\\\": \\\"Pipe|Separated|Phrases\\\",\\n        \\\"SENDMAIL_FROM_EMAIL\\\": \\\"your.email@example.com\\\",\\n        \\\"SENDMAIL_EMAIL_SIGNATURE_HTML\\\": \\\"<p>Optional HTML signature</p>\\\",\\n        \\\"NOTMUCH_SYNC_SCRIPT\\\": \\\"/path/to/your/sync/script.sh\\\",\\n        \\\"LOG_FILE_PATH\\\": \\\"/path/to/log/file.log\\\",\\n        \\\"DRAFT_DIR\\\": \\\"/path/for/email/drafts\\\"\\n      }\\n    }\\n  }\\n}\\n```\\n\\n## Environment Variables\\n\\n- `NOTMUCH_DATABASE_PATH`: Path to your notmuch database (required)\\n- `NOTMUCH_REPLY_SEPARATORS`: Pipe-separated list of text markers - keeps email content up until the first line starting with any of these markers, removing quoted replies (required)\\n- `SENDMAIL_FROM_EMAIL`: Your email address for the From: field (required)\\n- `SENDMAIL_EMAIL_SIGNATURE_HTML`: HTML signature to append to emails (optional)\\n- `NOTMUCH_SYNC_SCRIPT`: Path to a script for synchronizing emails (optional)\\n- `LOG_FILE_PATH`: Path for logging file (optional)\\n- `DRAFT_DIR`: Directory for storing email drafts (optional, defaults to /tmp/mcp-notmuch-sendmail)\\n\\n## API\\n\\n### Tools\\n\\n- **find_email_thread**\\n  - Find email threads in the notmuch database\\n  - Input: `notmuch_search_query` (string)\\n  - Returns tab-separated list of threads with format:\\n  ```\\n  thread_id    date    subject    authors\\n  ```\\n\\n- **view_email_thread**\\n  - View all messages for an email thread\\n  - Input: `thread_id` (string)\\n  - Returns conversation in text format with HTML->text conversion\\n  ```\\n  FROM: sender@example.com\\n  DATE: 2024-01-25\\n  Message content...\\n  - - -\\n  FROM: another@example.com\\n  DATE: 2024-01-24\\n  Earlier message...\\n  ```\\n\\n- **compose_new_email**\\n  - Compose a new email draft from markdown. A signature will be automatically added if SENDMAIL_EMAIL_SIGNATURE_HTML is set.\\n  - Inputs:\\n    - `subject` (string): Email subject\\n    - `body_as_markdown` (string): Email body in markdown\\n    - `to` (list): Recipient email addresses\\n    - `cc` (list, optional): CC recipients\\n    - `bcc` (list, optional): BCC recipients\\n  - Creates draft files and returns paths:\\n  ```\\n  Created drafts:\\n  - /path/to/draft/dir/draft.md (edit this)\\n  - /path/to/draft/dir/draft.html (preview)\\n  ```\\n\\n- **compose_email_reply**\\n  - Compose a reply to an existing email thread. A signature will be automatically added if SENDMAIL_EMAIL_SIGNATURE_HTML is set.\\n  - Inputs:\\n    - `thread_id` (string): Thread ID to reply to\\n    - `subject` (string): Email subject\\n    - `body_as_markdown` (string): Email body in markdown\\n    - `to` (list): Recipient email addresses\\n    - `cc` (list, optional): CC recipients\\n    - `bcc` (list, optional): BCC recipients\\n  - Creates draft files and returns paths:\\n  ```\\n  Created drafts:\\n  - /path/to/draft/dir/draft.md (edit this)\\n  - /path/to/draft/dir/draft.html (preview)\\n  ```\\n\\n- **send_email**\\n  - Sends the composed email draft\\n  - No input required\\n  - Returns success/error message\\n\\n- **sync_emails**\\n  - Synchronizes emails by running the configured script\\n  - No input required\\n  - Returns the script's output including stdout and stderr\\n  - Only available if NOTMUCH_SYNC_SCRIPT is configured\\n\\n## Reply Separators\\n\\nThe `NOTMUCH_REPLY_SEPARATORS` environment variable controls email reply detection. When viewing a thread, each email's content is trimmed at the first line that starts with any of the configured separators. This effectively removes quoted replies while keeping the new content.\\n\\nHere are recommended separator patterns for different languages:\\n\\n### English\\n```\\nOn|wrote:|From:|Sent:|To:|Subject:|Date:|Cc:|Best regards|Kind Regards|Thanks,|Thank you,|Best,|All the best|regards,|Sent from my|Get Outlook f\\n[...truncated for length...]\", \"tools\": [{\"name\": \"notmuch_search_query\", \"description\": \"(string)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}}, \"required\": [\"query\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"thread_id\", \"description\": \"(string)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for thread_id\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"subject\", \"description\": \"(string): Email subject\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for subject\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"body_as_markdown\", \"description\": \"(string): Email body in markdown\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for body_as_markdown\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"to\", \"description\": \"(list): Recipient email addresses\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for to\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"cc\", \"description\": \"(list, optional): CC recipients\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for cc\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"bcc\", \"description\": \"(list, optional): BCC recipients\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for bcc\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"NOTMUCH_DATABASE_PATH\", \"description\": \"Path to your notmuch database (required)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"NOTMUCH_REPLY_SEPARATORS\", \"description\": \"Pipe-separated list of text markers - keeps email content up until the first line starting with any of these markers, removing quoted replies (required)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"message\": {\"type\": \"string\", \"description\": \"Text content or message\"}}, \"required\": [\"message\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"SENDMAIL_FROM_EMAIL\", \"description\": \"Your email address for the From: field (required)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for SENDMAIL_FROM_EMAIL\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"SENDMAIL_EMAIL_SIGNATURE_HTML\", \"description\": \"HTML signature to append to emails (optional)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for SENDMAIL_EMAIL_SIGNATURE_HTML\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"NOTMUCH_SYNC_SCRIPT\", \"description\": \"Path to a script for synchronizing emails (optional)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"LOG_FILE_PATH\", \"description\": \"Path for logging file (optional)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"DRAFT_DIR\", \"description\": \"Directory for storing email drafts (optional, defaults to /tmp/mcp-notmuch-sendmail)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for DRAFT_DIR\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}], \"tools_count\": 14, \"homepage\": \"\", \"url\": \"https://github.com/runekaagaard/mcp-notmuch-sendmail\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "runekaagaard/mcp-notmuch-sendmail", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"mcp-appstore\", \"server_id\": \"appreply-co/mcp-appstore\", \"description\": \"This is an MCP server that provides tools to LLMs for searching and analyzing apps from both Google Play Store and Apple App Store \\u2013 perfect for ASO.\", \"readme\": \"# App Store Scraper MCP Server\\n\\nThis is an MCP (Model Context Protocol) server that provides tools for searching and analyzing apps from both the Google Play Store and Apple App Store. \\n\\nPerfect for ASO (App Store Search Optimization).\\n\\nBuilt by [AppReply.co](https://appreply.co). For more information, see our [MCP documentation](https://appreply.co/docs/mcp-server/overview).\\n\\n## Installation\\n\\n```bash\\n# Clone the repository\\ngit clone https://github.com/appreply-co/mcp-appstore.git\\ncd mcp-appstore\\n\\n# Install dependencies\\nnpm install\\n```\\n\\n## Running the Server\\n\\n```bash\\nnpm start\\n```\\n\\nThis will start the server in studio mode, which is compatible with MCP clients.\\n\\nThe launch command is\\n\\n```bash\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"mcp-appstore\\\": {\\n      \\\"command\\\": \\\"node /destination/server.js\\\",\\n      \\\"cwd\\\": \\\"/destination\\\"\\n    }\\n  }\\n}\\n```\\n\\n## Available Tools\\n\\nThe server provides the following tools:\\n\\n### 1. search_app\\n\\nSearch for apps by name and platform.\\n\\n**Parameters:**\\n- `term`: The search term to look up\\n- `platform`: The platform to search on (`ios` or `android`)\\n- `num` (optional): Number of results to return (default: 10, max: 250)\\n- `country` (optional): Two-letter country code (default: \\\"us\\\")\\n\\n**Example usage:**\\n```javascript\\nconst result = await client.callTool({\\n  name: \\\"search_app\\\",\\n  arguments: {\\n    term: \\\"spotify\\\",\\n    platform: \\\"android\\\",\\n    num: 5\\n  }\\n});\\n```\\n\\n**Response:**\\n```json\\n{\\n  \\\"query\\\": \\\"spotify\\\",\\n  \\\"platform\\\": \\\"android\\\",\\n  \\\"results\\\": [\\n    {\\n      \\\"id\\\": \\\"com.spotify.music\\\",\\n      \\\"appId\\\": \\\"com.spotify.music\\\",\\n      \\\"title\\\": \\\"Spotify: Music and Podcasts\\\",\\n      \\\"developer\\\": \\\"Spotify AB\\\",\\n      \\\"developerId\\\": \\\"Spotify+AB\\\",\\n      \\\"icon\\\": \\\"https://play-lh.googleusercontent.com/...\\\",\\n      \\\"score\\\": 4.3,\\n      \\\"scoreText\\\": \\\"4.3\\\",\\n      \\\"price\\\": 0,\\n      \\\"free\\\": true,\\n      \\\"platform\\\": \\\"android\\\",\\n      \\\"url\\\": \\\"https://play.google.com/store/apps/details?id=com.spotify.music\\\"\\n    },\\n    // Additional results...\\n  ],\\n  \\\"count\\\": 5\\n}\\n```\\n\\n### 2. get_app_details\\n\\nGet detailed information about an app by ID.\\n\\n**Parameters:**\\n- `appId`: The unique app ID (com.example.app for Android or numeric ID/bundleId for iOS)\\n- `platform`: The platform of the app (`ios` or `android`)\\n- `country` (optional): Two-letter country code (default: \\\"us\\\")\\n- `lang` (optional): Language code for the results (default: \\\"en\\\")\\n\\n**Example usage:**\\n```javascript\\nconst result = await client.callTool({\\n  name: \\\"get_app_details\\\",\\n  arguments: {\\n    appId: \\\"com.spotify.music\\\",\\n    platform: \\\"android\\\"\\n  }\\n});\\n```\\n\\n**Response:**\\n```json\\n{\\n  \\\"appId\\\": \\\"com.spotify.music\\\",\\n  \\\"platform\\\": \\\"android\\\",\\n  \\\"details\\\": {\\n    \\\"id\\\": \\\"com.spotify.music\\\",\\n    \\\"appId\\\": \\\"com.spotify.music\\\",\\n    \\\"title\\\": \\\"Spotify: Music and Podcasts\\\",\\n    \\\"description\\\": \\\"With Spotify, you can play millions of songs and podcasts for free...\\\",\\n    \\\"summary\\\": \\\"Listen to songs, podcasts, and playlists for free...\\\",\\n    \\\"developer\\\": \\\"Spotify AB\\\",\\n    \\\"developerId\\\": \\\"Spotify+AB\\\",\\n    \\\"developerEmail\\\": \\\"androidapp@spotify.com\\\",\\n    \\\"developerWebsite\\\": \\\"https://www.spotify.com/\\\",\\n    \\\"icon\\\": \\\"https://play-lh.googleusercontent.com/...\\\",\\n    \\\"headerImage\\\": \\\"https://play-lh.googleusercontent.com/...\\\",\\n    \\\"screenshots\\\": [\\\"https://play-lh.googleusercontent.com/...\\\", \\\"...\\\"],\\n    \\\"score\\\": 4.3,\\n    \\\"scoreText\\\": \\\"4.3\\\",\\n    \\\"ratings\\\": 15678956,\\n    \\\"reviews\\\": 4567890,\\n    \\\"histogram\\\": {\\n      \\\"1\\\": 567890,\\n      \\\"2\\\": 234567,\\n      \\\"3\\\": 890123,\\n      \\\"4\\\": 2345678,\\n      \\\"5\\\": 11640698\\n    },\\n    \\\"price\\\": 0,\\n    \\\"free\\\": true,\\n    \\\"currency\\\": \\\"USD\\\",\\n    \\\"categories\\\": [\\n      { \\\"name\\\": \\\"Music & Audio\\\", \\\"id\\\": \\\"MUSIC_AND_AUDIO\\\" }\\n    ],\\n    \\\"genre\\\": \\\"Music & Audio\\\",\\n    \\\"genreId\\\": \\\"MUSIC_AND_AUDIO\\\",\\n    \\\"contentRating\\\": \\\"Teen\\\",\\n    \\\"updated\\\": 1648234567890,\\n    \\\"version\\\": \\\"8.7.30.1356\\\",\\n    \\\"size\\\": \\\"30M\\\",\\n    \\\"recentChanges\\\": \\\"We're always making changes and improvements to Spotify...\\\",\\n    \\\"platform\\\": \\\"android\\\"\\n  }\\n}\\n```\\n\\n### 3. analyze_top_keywords\\n\\nAnalyze top keywords for apps including brand analysis and competition metrics.\\n\\n**Parameters:**\\n- `keyword`: The keyword to analyze\\n- `platform`: The platform to analyze (`ios` or `android`)\\n- `country` (optional): Two-letter country code (default: \\\"us\\\")\\n- `lang` (optional): Language code for the results (default: \\\"en\\\")\\n- `num` (optional): Number of apps to analyze (default: 10, max: 50)\\n\\n**Example usage:**\\n```javascript\\nconst result = await client.callTool({\\n  name: \\\"analyze_top_keywords\\\",\\n  arguments: {\\n    keyword: \\\"fitness tracker\\\",\\n    platform: \\\"ios\\\",\\n    num: 10\\n  }\\n});\\n```\\n\\n**Response:**\\n```json\\n{\\n  \\\"keyword\\\": \\\"fitness tracker\\\",\\n  \\\"platform\\\": \\\"ios\\\",\\n  \\\"topApps\\\": [\\n    {\\n      \\\"appId\\\": \\\"com.fitbit.FitbitMobile\\\",\\n      \\\"title\\\": \\\"Fitbit: Health & Fitness\\\",\\n      \\\"developer\\\": \\\"Fitbit, Inc.\\\",\\n      \\\"developerId\\\": \\\"347935733\\\",\\n      \\\"score\\\": 4.5,\\n      \\\"ratings\\\": 238456,\\n      \\\"free\\\": true,\\n      \\\"price\\\": 0,\\n      \\\"currency\\\": \\\"USD\\\",\\n      \\\"category\\\": \\\"Health & Fitness\\\",\\n      \\\"url\\\": \\\"https://apps.apple.com/us/app/fitbit/id...\\\",\\n      \\\"icon\\\": \\\"https://is\\n[...truncated for length...]\", \"tools\": [{\"name\": \"term\", \"description\": \"The search term to look up\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}}, \"required\": [\"query\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"platform\", \"description\": \"The platform to search on (`ios` or `android`)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}}, \"required\": [\"query\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"num\", \"description\": \"(optional): Number of results to return (default: 10, max: 250)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for num\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"country\", \"description\": \"(optional): Two-letter country code (default: \\\"us\\\")\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for country\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"appId\", \"description\": \"The unique app ID (com.example.app for Android or numeric ID/bundleId for iOS)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for appId\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"lang\", \"description\": \"(optional): Language code for the results (default: \\\"en\\\")\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for lang\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"keyword\", \"description\": \"The keyword to analyze\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for keyword\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"sort\", \"description\": \"(optional): How to sort the reviews (`newest`, `rating`, `helpfulness`) (default: \\\"newest\\\")\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for sort\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"developerId\", \"description\": \"The developer ID to get information for\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for developerId\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"includeApps\", \"description\": \"(optional): Whether to include the developer's apps in the response (default: true)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for includeApps\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"apps\", \"description\": \"Array of app IDs to analyze (package names for Android, numeric IDs or bundle IDs for iOS)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for apps\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"keywords\", \"description\": \"Array of seed keywords to find related keywords\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}}, \"required\": [\"query\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 12, \"homepage\": \"https://appreply.co/\", \"url\": \"https://github.com/appreply-co/mcp-appstore\", \"topics\": [\"app-store-scraper\", \"appstore\", \"aso\", \"google-play\", \"google-play-scraper\", \"mcp\", \"mcp-server\"], \"data_sources\": [\"github\"]}", "target": "", "id": "appreply-co/mcp-appstore", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"js-mcp-server\", \"server_id\": \"linkupplatform/js-mcp-server\", \"description\": \"Javascript version of the Linkup MCP server.\", \"readme\": \"# \\ud83c\\udf1f Linkup JS MCP Server\\n\\nA Model Context Protocol (MCP) server that provides web search capabilities through Linkup's advanced search API. This server enables AI assistants and development tools to perform intelligent web searches with natural language queries.\\n\\n## \\u2728 Why Linkup?\\n\\n- \\ud83d\\udd0d **Advanced Web Search**: Leverage Linkup's AI-powered search engine for high-quality, relevant results\\n- \\ud83d\\udcac **Natural Language Queries**: Ask questions in plain English or your preferred language - no need for keyword optimization\\n- \\ud83d\\ude80 **Real-time Information**: Access up-to-date web content and current information\\n- \\ud83d\\udcda **Comprehensive Results**: Get detailed search results with source citations\\n- \\ud83d\\udd27 **Easy Integration**: Works with any MCP-compatible client\\n\\n## \\ud83d\\ude80 Installation\\n\\nThe Linkup MCP server can be used with any MCP-compatible client. \\n\\nFor an integration with Claude Desktop or with Cursor, please follow instruction [here](https://docs.linkup.so/pages/integrations/mcp/mcp).\\n\\nYou can check the NPM page [here](https://www.npmjs.com/package/linkup-mcp-server).\\n\\nYou can run the Linkup MCP server directly using npx:\\n\\n```bash\\nnpx -y linkup-mcp-server --api-key=YOUR_LINKUP_API_KEY\\n```\\n\\nAlternatively, you can set your API key as an environment variable:\\n\\n```bash\\nexport LINKUP_API_KEY=YOUR_LINKUP_API_KEY\\nnpx -y linkup-mcp-server\\n```\\n\\n**Command Line Options**\\n\\n| Option       | Description                                                       |\\n| ------------ | ----------------------------------------------------------------- |\\n| `--api-key`  | Your Linkup API key (required unless `LINKUP_API_KEY` env is set) |\\n| `--base-url` | Custom API base URL (default: `https://api.linkup.so/v1`)         |\\n| `--help, -h` | Show help text                                                    |\\n\\nConsult your MCP client's documentation for specific configuration instructions.\\n\\n## \\ud83d\\udcac Example Queries\\n\\nThe Linkup MCP server excels at answering complex questions and finding specific information:\\n\\n- \\\"What are the latest developments in quantum computing?\\\"\\n- \\\"How does the EU AI Act affect startups?\\\"\\n- \\\"Find recent research on sustainable aviation fuel\\\"\\n- \\\"What are the current best practices for MCP server development?\\\"\\n\\n## \\ud83e\\udd1d Contributing\\n\\nPull requests are welcome! Feel free to open an issue first to discuss what you\\u2019d like to see improved.\\n\\n### Development\\n\\nClone the repository and install dependencies:\\n\\n```bash\\ngit clone git@github.com:LinkupPlatform/js-mcp-server.git\\ncd js-mcp-server\\nnpm install\\n```\\n\\n### Available Scripts\\n\\n| Script               | Description                  |\\n| -------------------- | ---------------------------- |\\n| `npm run build`      | Build the TypeScript project |\\n| `npm run lint`       | Run ESLint                   |\\n| `npm run format`     | Format code with Prettier    |\\n| `npm run test`       | Run tests                    |\\n| `npm run test:watch` | Run tests in watch mode      |\\n\\n## \\ud83d\\udcda Resources\\n\\n- [Linkup Documentation](https://docs.linkup.so)\\n- [MCP Protocol Specification](https://modelcontextprotocol.io)\\n- [Linkup API Reference](https://docs.linkup.so/api-reference)\\n\\n## \\ud83d\\udce3 Community & Support\\n\\n* Email: [support@linkup.so](mailto:support@linkup.so)\\n* Discord: [Join our community](https://discord.com/invite/9q9mCYJa86)\\n* X / Twitter: [@Linkup_platform](https://x.com/Linkup_platform)\\n\\n## \\ud83d\\udcc4 License\\n\\nThis project is licensed under the MIT License - Innovate freely! \\ud83d\\ude80\", \"tools\": [{\"name\": \"LINKUP_API_KEY\", \"description\": \"env is set) |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"URL or link to process\"}}, \"required\": [\"url\"]}, \"source\": \"readme\", \"access_level\": \"write\"}], \"tools_count\": 1, \"homepage\": \"https://www.npmjs.com/package/linkup-mcp-server\", \"url\": \"https://github.com/LinkupPlatform/js-mcp-server\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "linkupplatform/js-mcp-server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"docgen-mcp\", \"server_id\": \"rjadhavjt/docgen-mcp\", \"description\": \"Documentation Generator MCP Server for automated documentation creation\", \"readme\": \"# DocGen MCP Server\\n\\nDocumentation Generator MCP Server for automated documentation creation from source files.\\n\\n## Overview\\n\\nThe DocGen MCP server automates the creation of standardized documentation by extracting information from source files and applying templates. It seamlessly integrates with other MCP servers (Google Drive, GitHub, Perplexity) to provide a comprehensive solution.\\n\\n## Features\\n\\n- Extract information from GitHub repositories and Google Drive files\\n- Process multiple source types (scripts, presentations, code, reference documents)\\n- Template-based document generation\\n- Document history tracking\\n- AI-enhanced content generation through Perplexity integration\\n\\n## Installation\\n\\n### Prerequisites\\n\\n- Node.js 16+\\n- npm or yarn\\n- Access to Google Drive API (for Google Drive source extraction)\\n- Access to GitHub API (for GitHub source extraction)\\n\\n### Steps\\n\\n1. Clone the repository:\\n   ```bash\\n   git clone https://github.com/rjadhav/docgen-mcp.git\\n   cd docgen-mcp\\n   ```\\n\\n2. Install dependencies:\\n   ```bash\\n   npm install\\n   ```\\n\\n3. Build the project:\\n   ```bash\\n   npm run build\\n   ```\\n\\n4. Add to your MCP settings file:\\n\\n   ### For Claude Desktop\\n   Edit `~/Library/Application Support/Claude/claude_desktop_config.json`:\\n\\n   ```json\\n   {\\n     \\\"mcpServers\\\": {\\n       \\\"docgen-mcp\\\": {\\n         \\\"command\\\": \\\"node\\\",\\n         \\\"args\\\": [\\\"/path/to/docgen-mcp/build/index.js\\\"],\\n         \\\"env\\\": {},\\n         \\\"disabled\\\": false,\\n         \\\"autoApprove\\\": []\\n       }\\n     }\\n   }\\n   ```\\n\\n   ### For VSCode Cline\\n   Edit the VSCode Claude Dev extension's MCP settings file:\\n   \\n   ```json\\n   {\\n     \\\"mcpServers\\\": {\\n       \\\"docgen-mcp\\\": {\\n         \\\"command\\\": \\\"node\\\",\\n         \\\"args\\\": [\\\"/path/to/docgen-mcp/build/index.js\\\"],\\n         \\\"env\\\": {},\\n         \\\"disabled\\\": false,\\n         \\\"autoApprove\\\": []\\n       }\\n     }\\n   }\\n   ```\\n\\n## Usage\\n\\nThe DocGen MCP server exposes the following tools:\\n\\n### create_documentation\\n\\nGenerate documentation from source files using a template.\\n\\n### list_templates\\n\\nList available documentation templates.\\n\\n### view_document_history\\n\\nView history of previously generated documents.\\n\\n## Templates\\n\\nTemplates are stored in the `templates` directory and use a simple marker system for content generation:\\n\\n- `{{projectId}}` - Replaced with the project identifier\\n- `{{date}}` - Current date\\n- `{{section:NAME}}` - Replaced with generated content for the named section\\n\\nCustom templates can be added by creating new `.template` files in the templates directory.\\n\\n## Contributing\\n\\nContributions are welcome! Please feel free to submit a Pull Request.\\n\\n## License\\n\\nThis project is licensed under the MIT License - see the LICENSE file for details.\\n\", \"tools\": [{\"name\": \"templates\", \"description\": \"directory and use a simple marker system for content generation:\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"message\": {\"type\": \"string\", \"description\": \"Text content or message\"}}, \"required\": [\"message\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 1, \"homepage\": \"\", \"url\": \"https://github.com/rjadhavJT/docgen-mcp\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "rjadhavjt/docgen-mcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"gists-mcp-server\", \"server_id\": \"bmorphism/gists-mcp-server\", \"description\": \"An MCP server for interacting with GitHub Gists\", \"readme\": \"\", \"tools\": [], \"tools_count\": 0, \"homepage\": \"\", \"url\": \"https://github.com/bmorphism/gists-mcp-server\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "bmorphism/gists-mcp-server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"semrush-mcp\", \"server_id\": \"metehan777/semrush-mcp\", \"description\": \"Semrush MCP Server\", \"readme\": \"# Semrush MCP Server\\n\\nAn MCP (Model Context Protocol) server that provides access to Semrush API functionality for AI assistants.\\n\\n## Features\\n\\n- **Domain Overview**: Get comprehensive domain analytics including organic traffic, keywords, and authority score\\n- **Keyword Research**: Analyze keyword metrics including search volume, difficulty, and CPC\\n- **Organic Search Analysis**: Retrieve organic search keywords and rankings for any domain\\n- **Paid Search Analysis**: Get Google Ads keywords and PPC data for domains\\n- **Backlinks Overview**: Get backlink metrics and analysis for domains or specific URLs\\n- **Competitor Research**: Identify and analyze organic competitors\\n- **Related Keywords**: Discover related keywords and search suggestions\\n\\n## Prerequisites\\n\\n- Node.js 18+ \\n- A Semrush API key (get one at https://www.semrush.com/api/)\\n\\n## Installation\\n\\n1. Clone this repository or create a new directory:\\n```bash\\nmkdir semrush-mcp\\ncd semrush-mcp\\n```\\n\\n2. Create the following directory structure:\\n```\\nsemrush-mcp/\\n\\u251c\\u2500\\u2500 src/\\n\\u2502   \\u2514\\u2500\\u2500 index.ts\\n\\u251c\\u2500\\u2500 package.json\\n\\u251c\\u2500\\u2500 tsconfig.json\\n\\u251c\\u2500\\u2500 .env.example\\n\\u251c\\u2500\\u2500 .gitignore\\n\\u2514\\u2500\\u2500 README.md\\n```\\n\\n3. Save the provided files in their respective locations\\n\\nThen manually:\\n```bash\\nnpm install\\nnpm run build\\n```\\n\\n## Configuration\\n\\nSet your Semrush API key as an environment variable:\\n\\n```bash\\nexport SEMRUSH_API_KEY=\\\"your-api-key-here\\\"\\n```\\n\\nOr create a `.env` file:\\n```\\nSEMRUSH_API_KEY=your-api-key-here\\n```\\n\\n## Usage with Claude Desktop\\n\\nAdd the server to your Claude Desktop configuration file (`claude_desktop_config.json`):\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"semrush\\\": {\\n      \\\"command\\\": \\\"node\\\",\\n      \\\"args\\\": [\\\"/path/to/semrush-mcp-server/dist/index.js\\\"],\\n      \\\"env\\\": {\\n        \\\"SEMRUSH_API_KEY\\\": \\\"your-api-key-here\\\"\\n      }\\n    }\\n  }\\n}\\n```\\n\\n## Available Tools\\n\\n### 1. domain_overview\\nGet comprehensive domain analytics.\\n\\nParameters:\\n- `domain` (required): Domain to analyze (e.g., \\\"example.com\\\")\\n- `database` (optional): Database code (default: \\\"us\\\")\\n\\n### 2. keyword_overview\\nGet keyword metrics and data.\\n\\nParameters:\\n- `phrase` (required): Keyword phrase to analyze\\n- `database` (optional): Database code (default: \\\"us\\\")\\n\\n### 3. domain_organic_search\\nGet organic search keywords for a domain.\\n\\nParameters:\\n- `domain` (required): Domain to analyze\\n- `database` (optional): Database code (default: \\\"us\\\")\\n- `limit` (optional): Number of results (default: 10)\\n- `offset` (optional): Offset for pagination (default: 0)\\n\\n### 4. backlinks_overview\\nGet backlinks overview for a domain or URL.\\n\\nParameters:\\n- `target` (required): Domain or URL to analyze\\n- `target_type` (optional): \\\"domain\\\" or \\\"url\\\" (default: \\\"domain\\\")\\n\\n### 5. competitor_research\\nFind organic competitors for a domain.\\n\\nParameters:\\n- `domain` (required): Domain to analyze\\n- `database` (optional): Database code (default: \\\"us\\\")\\n- `limit` (optional): Number of competitors (default: 10)\\n\\n### 6. domain_adwords\\nGet paid search (Google Ads) keywords for a domain.\\n\\nParameters:\\n- `domain` (required): Domain to analyze\\n- `database` (optional): Database code (default: \\\"us\\\")\\n- `limit` (optional): Number of results (default: 10)\\n\\n### 7. related_keywords\\nGet related keywords and suggestions for a seed keyword.\\n\\nParameters:\\n- `phrase` (required): Seed keyword phrase\\n- `database` (optional): Database code (default: \\\"us\\\")\\n- `limit` (optional): Number of results (default: 10)\\n\\n## Database Codes\\n\\nCommon database codes for different regions:\\n- `us` - United States\\n- `uk` - United Kingdom\\n- `ca` - Canada\\n- `au` - Australia\\n- `de` - Germany\\n- `fr` - France\\n- `es` - Spain\\n- `it` - Italy\\n- `br` - Brazil\\n- `in` - India\\n\\n## Development\\n\\nTo run the server in development mode:\\n\\n```bash\\nnpm run dev\\n```\\n\\n## Example Usage in Claude\\n\\nOnce configured, you can use natural language to access Semrush data:\\n\\n- \\\"Analyze the domain example.com using Semrush\\\"\\n- \\\"What's the search volume for 'digital marketing' keyword?\\\"\\n- \\\"Show me the top organic keywords for techcrunch.com\\\"\\n- \\\"Find competitors for shopify.com\\\"\\n- \\\"Get backlink data for https://metehan.ai/blog/semrush-mcp/\\\"\\n- \\\"What related keywords can you find for 'content marketing'?\\\"\\n- \\\"Show me the Google Ads keywords that amazon.com is bidding on\\\"\\n\\n## Troubleshooting\\n\\n1. **API Key Issues**: Ensure your SEMRUSH_API_KEY environment variable is set correctly\\n2. **Rate Limits**: Semrush API has rate limits. Check your plan's limits\\n3. **Database Codes**: Make sure you're using valid database codes for your target regions\\n\\n## License\\n\\nMIT\\n\", \"tools\": [{\"name\": \"domain\", \"description\": \"(required): Domain to analyze (e.g., \\\"example.com\\\")\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for domain\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"database\", \"description\": \"(optional): Database code (default: \\\"us\\\")\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for database\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"phrase\", \"description\": \"(required): Keyword phrase to analyze\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for phrase\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"limit\", \"description\": \"(optional): Number of results (default: 10)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for limit\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"offset\", \"description\": \"(optional): Offset for pagination (default: 0)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for offset\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"target\", \"description\": \"(required): Domain or URL to analyze\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"URL or link to process\"}}, \"required\": [\"url\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"target_type\", \"description\": \"(optional): \\\"domain\\\" or \\\"url\\\" (default: \\\"domain\\\")\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"URL or link to process\"}}, \"required\": [\"url\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"us\", \"description\": \"- United States\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for us\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"uk\", \"description\": \"- United Kingdom\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for uk\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"ca\", \"description\": \"- Canada\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for ca\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"au\", \"description\": \"- Australia\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for au\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"de\", \"description\": \"- Germany\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for de\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"fr\", \"description\": \"- France\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for fr\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"es\", \"description\": \"- Spain\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for es\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"it\", \"description\": \"- Italy\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for it\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"br\", \"description\": \"- Brazil\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for br\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"in\", \"description\": \"- India\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for in\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 17, \"homepage\": \"https://metehan.ai/blog/semrush-mcp/\", \"url\": \"https://github.com/metehan777/semrush-mcp\", \"topics\": [\"ai\", \"claude\", \"mcp\", \"semrush\", \"seo\"], \"data_sources\": [\"github\"]}", "target": "", "id": "metehan777/semrush-mcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"mcp-agg\", \"server_id\": \"moosh3/mcp-agg\", \"description\": \"Aggregate MCP server\", \"readme\": \"# MCP-Agg: Multi-Channel Platform Aggregator\\n\\n[![Python](https://img.shields.io/badge/Python-3.12-blue)](https://www.python.org/)\\n[![FastAPI](https://img.shields.io/badge/FastAPI-0.104.0-green)](https://fastapi.tiangolo.com/)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n\\nMCP-Agg is a powerful API service that provides unified access to multiple tools and platforms through a single, consistent interface. It enables seamless integration with various services like GitHub, Slack, and more, simplifying workflow automation and enhancing productivity.\\n\\n## \\ud83d\\ude80 Features\\n\\n- **Unified Tool Interface**: Access tools from multiple platforms through a standardized API\\n- **Authentication & Authorization**: Secure access to each integrated service\\n- **Extensible Architecture**: Easily add new tools and platforms\\n- **MCP Client Support**: Generate unique URLs for MCP client access\\n- **Comprehensive Documentation**: Well-documented API with Swagger UI\\n\\n## \\ud83d\\udee0\\ufe0f Supported Platforms\\n\\n### GitHub\\n\\n- List repositories\\n- Get repository details\\n- Manage issues and pull requests\\n- Access user profiles\\n\\n### Slack\\n\\n- List channels\\n- Post messages\\n- Reply to threads\\n- Add reactions\\n- Access channel history\\n- Retrieve user profiles\\n\\n## \\ud83d\\udccb Requirements\\n\\n- Python 3.12+\\n- PostgreSQL database\\n- uv package manager\\n\\n## \\ud83d\\udd27 Installation\\n\\n1. Clone the repository:\\n\\n```bash\\ngit clone https://github.com/moosh3/mcp-agg.git\\ncd mcp-agg\\n```\\n\\n2. Set up a virtual environment and install dependencies using uv:\\n\\n```bash\\nuv venv\\nsource .venv/bin/activate  # On Windows: .venv\\\\Scripts\\\\activate\\nuv pip install -r requirements.txt\\n```\\n\\n3. Create a `.env` file based on the `.env.example` template:\\n\\n```bash\\ncp .env.example .env\\n# Edit .env with your configuration settings\\n```\\n\\n4. Run database migrations:\\n\\n```bash\\nalembic upgrade head\\n```\\n\\n## \\ud83d\\ude80 Running the Application\\n\\n### Development Mode\\n\\n```bash\\nuvicorn api.main:app --reload --port 8000\\n```\\n\\n### Production Mode\\n\\n```bash\\nuvicorn api.main:app --host 0.0.0.0 --port 8000\\n```\\n\\n### Using Docker\\n\\n```bash\\ndocker-compose up -d\\n```\\n\\n## \\ud83d\\udcd6 API Documentation\\n\\nOnce the application is running, access the interactive API documentation at:\\n\\n- Swagger UI: http://localhost:8000/docs\\n- ReDoc: http://localhost:8000/redoc\\n\\n## \\ud83d\\udd0c Using the MCP Client\\n\\nTo access all your tools through an MCP client:\\n\\n1. Register and log in to the MCP-Agg service\\n2. Connect your accounts for each supported platform (GitHub, Slack, etc.)\\n3. Navigate to the MCP URL generator endpoint\\n4. Use the generated URL in your MCP client configuration\\n\\n## \\ud83e\\uddea Testing\\n\\nRun tests using pytest:\\n\\n```bash\\npython -m pytest\\n```\\n\\nFor coverage information:\\n\\n```bash\\npython -m pytest --cov=api\\n```\\n\\n## \\ud83e\\udd1d Contributing\\n\\nContributions are welcome! Please feel free to submit a Pull Request.\\n\\n1. Fork the repository\\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\\n4. Push to the branch (`git push origin feature/amazing-feature`)\\n5. Open a Pull Request\\n\\n## \\ud83d\\udcdd License\\n\\nThis project is licensed under the MIT License - see the LICENSE file for details.\\n\\n## \\ud83d\\udcde Contact\\n\\nProject maintainer: [moosh3](https://github.com/moosh3)\\n\\n---\\n\\nBuilt with \\u2764\\ufe0f using FastAPI and Python\\n\", \"tools\": [], \"tools_count\": 0, \"homepage\": \"\", \"url\": \"https://github.com/moosh3/mcp-agg\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "moosh3/mcp-agg", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"cli-mcp-server\", \"server_id\": \"mladensu/cli-mcp-server\", \"description\": \"Command line interface for MCP clients with secure execution and customizable security policies\", \"readme\": \"# CLI MCP Server\\n\\n---\\n\\nA secure Model Context Protocol (MCP) server implementation for executing controlled command-line operations with\\ncomprehensive security features.\\n\\n![License](https://img.shields.io/badge/license-MIT-blue.svg)\\n![Python Version](https://img.shields.io/badge/python-3.10%2B-blue)\\n![MCP Protocol](https://img.shields.io/badge/MCP-Compatible-green)\\n[![smithery badge](https://smithery.ai/badge/cli-mcp-server)](https://smithery.ai/protocol/cli-mcp-server)\\n[![Python Tests](https://github.com/MladenSU/cli-mcp-server/actions/workflows/python-tests.yml/badge.svg)](https://github.com/MladenSU/cli-mcp-server/actions/workflows/python-tests.yml)\\n\\n<a href=\\\"https://glama.ai/mcp/servers/q89277vzl1\\\"><img width=\\\"380\\\" height=\\\"200\\\" src=\\\"https://glama.ai/mcp/servers/q89277vzl1/badge\\\" /></a>\\n\\n---\\n\\n# Table of Contents\\n\\n1. [Overview](#overview)\\n2. [Features](#features)\\n3. [Configuration](#configuration)\\n4. [Available Tools](#available-tools)\\n    - [run_command](#run_command)\\n    - [show_security_rules](#show_security_rules)\\n5. [Usage with Claude Desktop](#usage-with-claude-desktop)\\n    - [Development/Unpublished Servers Configuration](#developmentunpublished-servers-configuration)\\n    - [Published Servers Configuration](#published-servers-configuration)\\n6. [Security Features](#security-features)\\n7. [Error Handling](#error-handling)\\n8. [Development](#development)\\n    - [Prerequisites](#prerequisites)\\n    - [Building and Publishing](#building-and-publishing)\\n    - [Debugging](#debugging)\\n9. [License](#license)\\n\\n---\\n\\n## Overview\\n\\nThis MCP server enables secure command-line execution with robust security measures including command whitelisting, path\\nvalidation, and execution controls. Perfect for providing controlled CLI access to LLM applications while maintaining security.\\n\\n## Features\\n\\n- \\ud83d\\udd12 Secure command execution with strict validation\\n- \\u2699\\ufe0f Configurable command and flag whitelisting with 'all' option\\n- \\ud83d\\udee1\\ufe0f Path traversal prevention and validation\\n- \\ud83d\\udeab Shell operator injection protection\\n- \\u23f1\\ufe0f Execution timeouts and length limits\\n- \\ud83d\\udcdd Detailed error reporting\\n- \\ud83d\\udd04 Async operation support\\n- \\ud83c\\udfaf Working directory restriction and validation\\n\\n## Configuration\\n\\nConfigure the server using environment variables:\\n\\n| Variable             | Description                                          | Default            |\\n|---------------------|------------------------------------------------------|-------------------|\\n| `ALLOWED_DIR`       | Base directory for command execution (Required)      | None (Required)   |\\n| `ALLOWED_COMMANDS`  | Comma-separated list of allowed commands or 'all'    | `ls,cat,pwd`      |\\n| `ALLOWED_FLAGS`     | Comma-separated list of allowed flags or 'all'       | `-l,-a,--help`    |\\n| `MAX_COMMAND_LENGTH`| Maximum command string length                        | `1024`            |\\n| `COMMAND_TIMEOUT`   | Command execution timeout (seconds)                  | `30`              |\\n| `ALLOW_SHELL_OPERATORS` | Allow shell operators (&&, \\\\|\\\\|, \\\\|, >, etc.)    | `false`           |\\n\\nNote: Setting `ALLOWED_COMMANDS` or `ALLOWED_FLAGS` to 'all' will allow any command or flag respectively.\\n\\n## Installation\\n\\nTo install CLI MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/protocol/cli-mcp-server):\\n\\n```bash\\nnpx @smithery/cli install cli-mcp-server --client claude\\n```\\n\\n## Available Tools\\n\\n### run_command\\n\\nExecutes whitelisted CLI commands within allowed directories.\\n\\n**Input Schema:**\\n```json\\n{\\n  \\\"command\\\": {\\n    \\\"type\\\": \\\"string\\\",\\n    \\\"description\\\": \\\"Single command to execute (e.g., 'ls -l' or 'cat file.txt')\\\"\\n  }\\n}\\n```\\n\\n**Security Notes:**\\n- Shell operators (&&, |, >, >>) are not supported by default, but can be enabled with `ALLOW_SHELL_OPERATORS=true`\\n- Commands must be whitelisted unless ALLOWED_COMMANDS='all'\\n- Flags must be whitelisted unless ALLOWED_FLAGS='all'\\n- All paths are validated to be within ALLOWED_DIR\\n\\n### show_security_rules\\n\\nDisplays current security configuration and restrictions, including:\\n- Working directory\\n- Allowed commands\\n- Allowed flags\\n- Security limits (max command length and timeout)\\n\\n## Usage with Claude Desktop\\n\\nAdd to your `~/Library/Application\\\\ Support/Claude/claude_desktop_config.json`:\\n\\n> Development/Unpublished Servers Configuration\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"cli-mcp-server\\\": {\\n      \\\"command\\\": \\\"uv\\\",\\n      \\\"args\\\": [\\n        \\\"--directory\\\",\\n        \\\"<path/to/the/repo>/cli-mcp-server\\\",\\n        \\\"run\\\",\\n        \\\"cli-mcp-server\\\"\\n      ],\\n      \\\"env\\\": {\\n        \\\"ALLOWED_DIR\\\": \\\"</your/desired/dir>\\\",\\n        \\\"ALLOWED_COMMANDS\\\": \\\"ls,cat,pwd,echo\\\",\\n        \\\"ALLOWED_FLAGS\\\": \\\"-l,-a,--help,--version\\\",\\n        \\\"MAX_COMMAND_LENGTH\\\": \\\"1024\\\",\\n        \\\"COMMAND_TIMEOUT\\\": \\\"30\\\",\\n        \\\"ALLOW_SHELL_OPERATORS\\\": \\\"false\\\"\\n      }\\n    }\\n  }\\n}\\n```\\n\\n> Published Servers Configuration\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"cli-mcp-server\\\": {\\n      \\\"command\\\": \\\"uvx\\\",\\n      \\\"args\\\": [\\n        \\\"cli-mcp-server\\\"\\n      ],\\n      \\\"env\\\": {\\n        \\\"ALLOWED_DIR\\\": \\\"</your/desired/dir>\\\",\\n        \\n[...truncated for length...]\", \"tools\": [{\"name\": \"ALLOWED_DIR\", \"description\": \"| Base directory for command execution (Required)      | None (Required)   |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for ALLOWED_DIR\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"ALLOWED_COMMANDS\", \"description\": \"| Comma-separated list of allowed commands or 'all'    | `ls,cat,pwd`      |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for ALLOWED_COMMANDS\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"ALLOWED_FLAGS\", \"description\": \"| Comma-separated list of allowed flags or 'all'       | `-l,-a,--help`    |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for ALLOWED_FLAGS\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"MAX_COMMAND_LENGTH\", \"description\": \"| Maximum command string length                        | `1024`            |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for MAX_COMMAND_LENGTH\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"COMMAND_TIMEOUT\", \"description\": \"| Command execution timeout (seconds)                  | `30`              |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for COMMAND_TIMEOUT\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"ALLOW_SHELL_OPERATORS\", \"description\": \"| Allow shell operators (&&, \\\\|\\\\|, \\\\|, >, etc.)    | `false`           |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for ALLOW_SHELL_OPERATORS\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"npm\", \"description\": \"](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for npm\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}], \"tools_count\": 7, \"homepage\": \"\", \"url\": \"https://github.com/MladenSU/cli-mcp-server\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "mladensu/cli-mcp-server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"chroma-mcp-server\", \"server_id\": \"phanithlim/chroma-mcp-server\", \"description\": \"Template for a FastAPI application that serves as a server inspector for ChromaDB, providing endpoints to interact with collections and documents.\", \"readme\": \"# Chroma MCP Server\\nTemplate for a FastAPI application that serves as a server inspector for ChromaDB, providing endpoints to interact with collections and documents.\\n\\n## Prerequisites\\nAssume that you have ChromaDB in docker or host on any Cloud provider. If you don't have it, you can run it locally using Docker:\\n\\n```bash\\ndocker run -v ./chroma-data:/data -p 8000:8000 chromadb/chroma\\n```\\nAnd for text embedding, we use `nomic-embed-text` from Ollama. But can be replaced with any other embedding model from any provider. If you don't have Ollama installed, you can install and pull text embedding model with the following commands:\\n\\n```bash\\nollama pull nomic-embed-text\\n```\\n\\n## Installation\\nInstall UV package manager:\\n```bash\\ncurl -LsSf https://astral.sh/uv/install.sh | sh\\n```\\nor pipx\\n```bash\\npip install uv\\n```\\n\\n## Install Dependencies\\n```bash\\nuv sync\\n```\\n\\n## Usage\\nRun MCP Server Inspector:\\n```bash\\nmake mcp-dev\\n```\\nRun the FastAPI application:\\n```bash\\nmake dev\\n```\\n## Project Structure\\n\\n```\\n\\u251c\\u2500\\u2500 app.py            # FastAPI application entry point\\n\\u251c\\u2500\\u2500 Dockerfile        # Containerization support\\n\\u251c\\u2500\\u2500 pyproject.toml    # Project metadata and dependencies\\n\\u251c\\u2500\\u2500 uv.lock           # uv dependency lock file\\n\\u251c\\u2500\\u2500 resource/\\n\\u2502   \\u251c\\u2500\\u2500 __init__.py  # Resource contain static files\\n\\u251c\\u2500\\u2500 tools/\\n\\u2502   \\u251c\\u2500\\u2500 server.py     # Server logic for FastMCP\\n\\u2502   \\u251c\\u2500\\u2500 model.py      # Response models for FastMCP\\n\\u2502   \\u251c\\u2500\\u2500 helpers.py    # Helper functions for FastMCP\\n\\u2502   \\u2514\\u2500\\u2500 __init__.py\\n\\u2514\\u2500\\u2500 README.md          # Project documentation\\n```\\n\\n## Features\\n- `get_all_collections`: Retrieve all collections from the database.\\n- `get_collection_info`: Get information about a specific collection.\\n- `get_collection_items`: Fetch items from a specific collection.\\n- `get_collection_count`: Count items in a specific collection.\\n- `query_documents`: Query documents across collections with optional filters.\\n\\n## Deployment\\n### Docker\\nBuild the Docker image:\\n```bash\\ndocker build -t mcp-server .\\n```\\nRun the Docker container:\\n```bash\\ndocker run -d -p 8000:8000 mcp-server\\n```\\n- MCP server url: `http://localhost:8000/mcp-server/mcp`\\n### Gradio UI\\nTo run the Gradio UI, you can use the following command:\\n```bash\\nuv run gradio_ui.py\\n```\", \"tools\": [{\"name\": \"get_all_collections\", \"description\": \"Retrieve all collections from the database.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_all_collections\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_collection_info\", \"description\": \"Get information about a specific collection.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_collection_info\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_collection_items\", \"description\": \"Fetch items from a specific collection.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_collection_items\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_collection_count\", \"description\": \"Count items in a specific collection.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_collection_count\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"query_documents\", \"description\": \"Query documents across collections with optional filters.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}}, \"required\": [\"query\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 5, \"homepage\": \"\", \"url\": \"https://github.com/phanithlim/chroma-mcp-server\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "phanithlim/chroma-mcp-server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"mcp-file-operations-server\", \"server_id\": \"bsmi021/mcp-file-operations-server\", \"description\": \"A Model Context Protocol (MCP) server that provides enhanced file operation capabilities with streaming, patching, and change tracking support.\", \"readme\": \"# File Operations MCP Server\\n\\n[![smithery badge](https://smithery.ai/badge/@bsmi021/mcp-file-operations-server)](https://smithery.ai/server/@bsmi021/mcp-file-operations-server)\\n\\nA Model Context Protocol (MCP) server that provides enhanced file operation capabilities with streaming, patching, and change tracking support.\\n\\n<a href=\\\"https://glama.ai/mcp/servers/7b750si00d\\\">\\n  <img width=\\\"380\\\" height=\\\"200\\\" src=\\\"https://glama.ai/mcp/servers/7b750si00d/badge\\\" alt=\\\"File Operations Server MCP server\\\" />\\n</a>\\n\\n## Features\\n\\n- **Basic File Operations**: Copy, read, write, move, and delete files\\n- **Directory Operations**: Create, remove, and copy directories\\n- **File Watching**: Monitor files and directories for changes\\n- **Change Tracking**: Track and query file operation history\\n- **Streaming Support**: Handle large files efficiently with streaming\\n- **Resource Support**: Access files and directories through MCP resources\\n- **Progress Reporting**: Real-time progress updates for long operations\\n- **Rate Limiting**: Protection against excessive requests\\n- **Enhanced Security**: Path validation and input sanitization\\n- **Robust Error Handling**: Comprehensive error handling and reporting\\n- **Type Safety**: Full TypeScript support with strict type checking\\n\\n## Installation\\n\\n### Installing via Smithery\\n\\nTo install File Operations Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@bsmi021/mcp-file-operations-server):\\n\\n```bash\\nnpx -y @smithery/cli install @bsmi021/mcp-file-operations-server --client claude\\n```\\n\\n### Manual Installation\\n```bash\\nnpm install\\n```\\n\\n## Usage\\n\\n### Starting the Server\\n\\n```bash\\nnpm start\\n```\\n\\nFor development with auto-reloading:\\n\\n```bash\\nnpm run dev\\n```\\n\\n### Available Tools\\n\\n#### Basic File Operations\\n\\n- `copy_file`: Copy a file to a new location\\n- `read_file`: Read content from a file\\n- `write_file`: Write content to a file\\n- `move_file`: Move/rename a file\\n- `delete_file`: Delete a file\\n- `append_file`: Append content to a file\\n\\n#### Directory Operations\\n\\n- `make_directory`: Create a directory\\n- `remove_directory`: Remove a directory\\n- `copy_directory`: Copy a directory recursively (with progress reporting)\\n\\n#### Watch Operations\\n\\n- `watch_directory`: Start watching a directory for changes\\n- `unwatch_directory`: Stop watching a directory\\n\\n#### Change Tracking\\n\\n- `get_changes`: Get the list of recorded changes\\n- `clear_changes`: Clear all recorded changes\\n\\n### Available Resources\\n\\n#### Static Resources\\n\\n- `file:///recent-changes`: List of recent file system changes\\n\\n#### Resource Templates\\n\\n- `file://{path}`: Access file contents\\n- `metadata://{path}`: Access file metadata\\n- `directory://{path}`: List directory contents\\n\\n### Example Usage\\n\\n```typescript\\n// Copy a file\\nawait fileOperations.copyFile({\\n    source: 'source.txt',\\n    destination: 'destination.txt',\\n    overwrite: false\\n});\\n\\n// Watch a directory\\nawait fileOperations.watchDirectory({\\n    path: './watched-dir',\\n    recursive: true\\n});\\n\\n// Access file contents through resource\\nconst resource = await mcp.readResource('file:///path/to/file.txt');\\nconsole.log(resource.contents[0].text);\\n\\n// Copy directory with progress tracking\\nconst result = await fileOperations.copyDirectory({\\n    source: './source-dir',\\n    destination: './dest-dir',\\n    overwrite: false\\n});\\n// Progress token in result can be used to track progress\\nconsole.log(result.progressToken);\\n```\\n\\n## Rate Limits\\n\\nThe server implements rate limiting to prevent abuse:\\n\\n- **Tools**: 100 requests per minute\\n- **Resources**: 200 requests per minute\\n- **Watch Operations**: 20 operations per minute\\n\\nRate limit errors include a retry-after period in the error message.\\n\\n## Security Features\\n\\n### Path Validation\\n\\nAll file paths are validated to prevent directory traversal attacks:\\n\\n- No parent directory references (`../`)\\n- Proper path normalization\\n- Input sanitization\\n\\n### Resource Protection\\n\\n- Rate limiting on all operations\\n- Proper error handling and logging\\n- Input validation on all parameters\\n- Safe resource cleanup\\n\\n## Progress Reporting\\n\\nLong-running operations like directory copying provide progress updates:\\n\\n```typescript\\ninterface ProgressUpdate {\\n    token: string | number;\\n    message: string;\\n    percentage: number;\\n}\\n```\\n\\nProgress can be tracked through the progress token returned in the operation result.\\n\\n## Development\\n\\n### Building\\n\\n```bash\\nnpm run build\\n```\\n\\n### Linting\\n\\n```bash\\nnpm run lint\\n```\\n\\n### Formatting\\n\\n```bash\\nnpm run format\\n```\\n\\n### Testing\\n\\n```bash\\nnpm test\\n```\\n\\n## Configuration\\n\\nThe server can be configured through various settings:\\n\\n- **Rate Limiting**: Configure request limits and windows\\n- **Progress Reporting**: Control update frequency and detail level\\n- **Resource Access**: Configure resource permissions and limits\\n- **Security Settings**: Configure path validation rules\\n- **Change Tracking**: Set retention periods and storage options\\n- **Watch Settings**: Configure debounce times and recursive watching\\n\\n## Error Handling\\n\\n[...truncated for length...]\", \"tools\": [{\"name\": \"copy_file\", \"description\": \"Copy a file to a new location\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"read_file\", \"description\": \"Read content from a file\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}, \"message\": {\"type\": \"string\", \"description\": \"Text content or message\"}}, \"required\": [\"file_path\", \"message\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"write_file\", \"description\": \"Write content to a file\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}, \"message\": {\"type\": \"string\", \"description\": \"Text content or message\"}}, \"required\": [\"file_path\", \"message\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"move_file\", \"description\": \"Move/rename a file\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"delete_file\", \"description\": \"Delete a file\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"append_file\", \"description\": \"Append content to a file\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}, \"message\": {\"type\": \"string\", \"description\": \"Text content or message\"}}, \"required\": [\"file_path\", \"message\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"make_directory\", \"description\": \"Create a directory\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for make_directory\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"remove_directory\", \"description\": \"Remove a directory\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for remove_directory\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"copy_directory\", \"description\": \"Copy a directory recursively (with progress reporting)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for copy_directory\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"watch_directory\", \"description\": \"Start watching a directory for changes\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for watch_directory\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"unwatch_directory\", \"description\": \"Stop watching a directory\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for unwatch_directory\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_changes\", \"description\": \"Get the list of recorded changes\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_changes\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"clear_changes\", \"description\": \"Clear all recorded changes\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for clear_changes\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"FileOperationError\", \"description\": \"class and MCP error codes:\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"InvalidRequest\", \"description\": \"Invalid parameters or request format\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for InvalidRequest\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"MethodNotFound\", \"description\": \"Unknown tool or resource requested\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for MethodNotFound\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"InvalidParams\", \"description\": \"Invalid parameters (e.g., path validation failure)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"InternalError\", \"description\": \"Server-side errors\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for InternalError\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 18, \"homepage\": \"\", \"url\": \"https://github.com/bsmi021/mcp-file-operations-server\", \"topics\": [\"claude\", \"mcp\", \"mcp-server\", \"modelcontextprotocol\"], \"data_sources\": [\"github\"]}", "target": "", "id": "bsmi021/mcp-file-operations-server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"claude-desktop-multi-instance\", \"server_id\": \"weidwonder/claude-desktop-multi-instance\", \"description\": \"\\ud83d\\ude80 Run multiple Claude Desktop instances simultaneously on macOS with independent configurations, accounts, and MCP server settings\", \"readme\": \"# Claude Desktop Multi-Instance Launcher\\n\\n> \\ud83d\\ude80 Run multiple Claude Desktop instances simultaneously on macOS with independent configurations, accounts, and MCP server settings\\n\\n**\\ud83d\\udcd6 Documentation Language / \\u6587\\u6863\\u8bed\\u8a00:**\\n- **English**: You are reading the English version\\n- **\\u4e2d\\u6587**: [\\u4e2d\\u6587\\u6587\\u6863 (Chinese Documentation)](README_CN.md)\\n\\n## \\ud83d\\udcf8 Screenshots\\n\\n### Multi-Window Running Effect\\n![Multi-instance demo](docs/screenshots/demo.png)\\n\\n### Spotlight Search Integration\\n![Spotlight search showing multiple Claude instances](docs/screenshots/spotlight.png)\\n\\n*Use Spotlight (\\u2318+Space) to quickly find and launch different Claude instances. Each app wrapper shows up as a separate application that maintains its login state and configuration.*\\n\\n### Custom Display Names in Dock\\n![First instance name](docs/screenshots/icon-name1.png) ![Second instance name](docs/screenshots/icon-name2.png)\\n\\n*When hovering over icons in the Dock, each instance displays its own custom name instead of just \\\"Claude\\\"*\\n\\n## \\u2728 Features\\n\\n- \\ud83d\\udd04 **Multi-Instance Management** - Run multiple independent Claude Desktop instances on the same machine\\n- \\ud83c\\udff7\\ufe0f **Custom Display Names** - Show different app names in Dock (e.g., \\\"Claude Work\\\", \\\"Claude Personal\\\")\\n- \\u2699\\ufe0f **Independent Configurations** - Each instance has its own MCP server config and login credentials\\n- \\ud83d\\udcf1 **App Wrappers** - Create independent app icons for direct Launchpad access\\n- \\ud83d\\udd0d **Spotlight Integration** - Find and launch instances quickly using Spotlight search (\\u2318+Space)\\n- \\ud83d\\udee0\\ufe0f **Smart Diagnostics** - Built-in problem diagnosis and repair tools\\n- \\ud83d\\udca1 **User-Friendly** - Both interactive menu and command-line interfaces\\n\\n## \\ud83d\\udccb System Requirements\\n\\n- macOS 11 (Big Sur) or later\\n- Claude Desktop app (download from [claude.ai/download](https://claude.ai/download))\\n- Bash shell (built into macOS)\\n\\n## \\ud83d\\ude80 Quick Start\\n\\n### 1. Download and Setup\\n\\n```bash\\n# Clone the repository\\ngit clone https://github.com/weidwonder/claude-desktop-multi-instance.git\\ncd claude-desktop-multi-instance\\n\\n# Make script executable\\nchmod +x claude_quick.sh\\n```\\n\\nOr download the script directly:\\n\\n```bash\\n# Download single script file\\ncurl -O https://raw.githubusercontent.com/weidwonder/claude-desktop-multi-instance/main/claude_quick.sh\\nchmod +x claude_quick.sh\\n```\\n\\n### 2. First Use\\n\\n```bash\\n# Run script to show menu\\n./claude_quick.sh\\n\\n# Or directly create and launch an instance\\n./claude_quick.sh work\\n```\\n\\n## \\ud83d\\udcd6 Usage Guide\\n\\n### Interactive Menu Mode\\n\\nRun `./claude_quick.sh` to display the menu:\\n\\n```\\n======================================\\n    Claude Desktop Quick Launcher\\n======================================\\n\\nAvailable options:\\n1. Launch default instance\\n2. Select existing instance\\n3. Create new instance\\n4. Delete specified instance\\n5. Create app wrapper (independent icon)\\n6. Restore original configuration\\n7. Diagnose problems\\n8. Fix wrappers\\n```\\n\\n### Command Line Mode\\n\\n```bash\\n# Launch or create instance\\n./claude_quick.sh [instance_name]\\n\\n# Management commands\\n./claude_quick.sh list                 # List all instances\\n./claude_quick.sh delete [instance]    # Delete instance\\n./claude_quick.sh wrapper [instance]   # Create app wrapper\\n./claude_quick.sh diagnose             # Diagnose problems\\n./claude_quick.sh fix                  # Fix wrappers\\n./claude_quick.sh restore              # Restore original config\\n```\\n\\n## \\ud83d\\udcbc Use Cases\\n\\n### Scenario 1: Separate Work and Personal Accounts\\n\\n```bash\\n# Create work instance\\n./claude_quick.sh work\\n# Login with work account, configure work-related MCP servers\\n\\n# Create personal instance\\n./claude_quick.sh personal\\n# Login with personal account, configure personal MCP servers\\n```\\n\\n### Scenario 2: Different Project Configurations\\n\\n```bash\\n# Project A - with filesystem and web search MCP\\n./claude_quick.sh project-a\\n\\n# Project B - with database and API MCP\\n./claude_quick.sh project-b\\n\\n# Development environment - with Git and testing tools MCP\\n./claude_quick.sh dev\\n```\\n\\n### Scenario 3: Create App Wrappers\\n\\n```bash\\n# Create independent app icon for work instance\\n./claude_quick.sh wrapper work\\n# Enter display name: Claude Work\\n\\n# Now you can launch \\\"Claude Work\\\" directly from Launchpad or Spotlight\\n# It will show as \\\"Claude Work\\\" instead of \\\"Claude\\\" in Dock\\n# Each wrapper maintains its own login state and configuration\\n```\\n\\n## \\ud83d\\udcc1 File Structure\\n\\n```\\n~/.claude-instances/                    # Instance data directory\\n\\u251c\\u2500\\u2500 work/                              # Work instance\\n\\u2502   \\u2514\\u2500\\u2500 Application Support/Claude/\\n\\u2502       \\u2514\\u2500\\u2500 claude_desktop_config.json\\n\\u251c\\u2500\\u2500 personal/                          # Personal instance\\n\\u2502   \\u2514\\u2500\\u2500 Application Support/Claude/\\n\\u2502       \\u2514\\u2500\\u2500 claude_desktop_config.json\\n\\u2514\\u2500\\u2500 scripts/                           # Helper scripts\\n    \\u251c\\u2500\\u2500 restore.sh                     # Quick restore config\\n    \\u2514\\u2500\\u2500 list.sh                        # List all instances\\n\\n/Applications/                          # App wrappers\\n\\u251c\\u2500\\u2500 Claude.app                         # Original app\\n\\u251c\\u2500\\u2500 Claude-work.app                    # Work instance wrapper\\n\\u2514\\u2500\\u2500 Clau\\n[...truncated for length...]\", \"tools\": [], \"tools_count\": 0, \"homepage\": \"\", \"url\": \"https://github.com/weidwonder/claude-desktop-multi-instance\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "weidwonder/claude-desktop-multi-instance", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"mcp-codex-keeper\", \"server_id\": \"aindreyway/mcp-codex-keeper\", \"description\": \"An intelligent MCP server that serves as a guardian of development knowledge, providing Cline assistants with curated access to latest documentation and best practices across the software development landscape\", \"readme\": \"# Aindreyway MCP Codex Keeper\\n\\n![MCP Server](https://img.shields.io/badge/MCP-Server-blue)\\n![Version](https://img.shields.io/badge/version-1.1.10-green)\\n![License](https://img.shields.io/badge/license-MIT-blue)\\n\\nAn intelligent MCP server that serves as a guardian of development knowledge, providing AI assistants with curated access to latest documentation and best practices.\\n\\n<a href=\\\"https://glama.ai/mcp/servers/bo39uifs3k\\\"><img width=\\\"380\\\" height=\\\"200\\\" src=\\\"https://glama.ai/mcp/servers/bo39uifs3k/badge\\\" alt=\\\"mcp-codex-keeper MCP server\\\" /></a>\\n\\n## \\ud83d\\ude80 Quick Start\\n\\n### Prerequisites\\n\\n1. Make sure you have Node.js installed (version 18 or higher):\\n\\n   ```bash\\n   node --version\\n   ```\\n\\n2. Install or update npm (comes with Node.js):\\n\\n   ```bash\\n   npm install -g npm@latest\\n   ```\\n\\n3. Verify npx is available:\\n   ```bash\\n   npx --version\\n   ```\\n   If not found, install it:\\n   ```bash\\n   npm install -g npx\\n   ```\\n\\n### Configuration\\n\\nAdd this to your Cline/Sonnet configuration:\\n\\n```json\\n\\\"aindreyway-codex-keeper\\\": {\\n  \\\"command\\\": \\\"npx\\\",\\n  \\\"args\\\": [\\\"-y\\\", \\\"@aindreyway/mcp-codex-keeper@latest\\\"],\\n  \\\"disabled\\\": false,\\n  \\\"env\\\": {\\n    \\\"npm_config_cache_max\\\": \\\"1024000000\\\",\\n    \\\"NODE_OPTIONS\\\": \\\"--max-old-space-size=256\\\"\\n  }\\n}\\n```\\n\\nThat's it! The assistant will handle everything automatically.\\n\\n> **Note:** This server uses `npx` for direct npm package execution, which is optimal for Node.js/TypeScript MCP servers, providing seamless integration with the npm ecosystem and TypeScript tooling.\\n\\n## \\ud83c\\udfaf What Your Assistant Can Do\\n\\nAsk your assistant to:\\n\\n- \\\"Show me the latest React documentation\\\"\\n- \\\"Find best practices for TypeScript development\\\"\\n- \\\"Update documentation for Node.js\\\"\\n- \\\"Search for information about async/await\\\"\\n\\n## \\ud83d\\udee0 Available Tools\\n\\n### list_documentation\\n\\nLists all available documentation sources with optional category filtering.\\n\\n### add_documentation\\n\\nAdd new documentation sources to the knowledge base.\\n\\n### update_documentation\\n\\nUpdate existing documentation to get the latest content.\\n\\n### search_documentation\\n\\nSearch through documentation with category filtering.\\n\\n## \\ud83d\\udcda Documentation Categories\\n\\n- Frontend\\n- Backend\\n- Language\\n- MCP\\n- MCP-Guide\\n- Database\\n- DevOps\\n- Security\\n- Testing\\n- Architecture\\n- Mobile\\n- AI\\n- Cloud\\n\\n## \\ud83d\\udd27 Features\\n\\nThe server automatically:\\n\\n- Manages documentation from various sources\\n- Keeps track of latest development best practices\\n- Provides intelligent search capabilities\\n- Updates documentation automatically\\n- Supports tagging and categorization\\n- Optimizes memory usage:\\n  - Uses streaming for large files\\n  - Automatic cache cleanup\\n  - Memory-efficient search\\n  - Size and age limits for cached files\\n  - Limited heap size (256MB)\\n\\n## \\ud83d\\udcdd License\\n\\nMIT License - feel free to use this in your projects!\\n\\n## \\ud83d\\udc64 Author\\n\\n**aindreyway**\\n\\n- GitHub: [@aindreyway](https://github.com/aindreyway)\\n\\n## \\ud83d\\udcd6 Documentation\\n\\n- [User Guide](README.md) - Installation and usage instructions\\n- [Contributing Guide](CONTRIBUTING.md) - How to contribute to the project\\n- [Technical Documentation](PROJECT_SUMMARY.md) - Detailed technical information\\n\\n## \\u2b50\\ufe0f Support\\n\\nGive a \\u2b50\\ufe0f if this project helped you! If you want to contribute, please check our [Contributing Guide](CONTRIBUTING.md).\\n\", \"tools\": [{\"name\": \"npx\", \"description\": \"for direct npm package execution, which is optimal for Node.js/TypeScript MCP servers, providing seamless integration with the npm ecosystem and TypeScript tooling.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for npx\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 1, \"homepage\": \"\", \"url\": \"https://github.com/aindreyway/mcp-codex-keeper\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "aindreyway/mcp-codex-keeper", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"unplugin-mcp\", \"server_id\": \"situ2001/unplugin-mcp\", \"description\": \"A unified plugin for developers integrating MCP servers into modern JavaScript build tools, including Webpack, Rollup, Vite, and more.\", \"readme\": \"# unplugin-mcp\\n\\n[![GitHub Repo](https://img.shields.io/badge/GitHub-repo-080f12?style=flat&logo=github&logoColor=white)](https://github.com/situ2001/unplugin-mcp)\\n[![npm version](https://img.shields.io/npm/v/unplugin-mcp?style=flat&colorA=080f12&colorB=1fa669)](https://www.npmjs.com/package/unplugin-mcp)\\n[![npm download](https://img.shields.io/npm/dt/unplugin-mcp?style=flat&colorA=080f12&colorB=1fa669)](https://www.npmjs.com/package/unplugin-mcp)\\n![npm license](https://img.shields.io/npm/l/unplugin-mcp?style=flat&colorA=080f12&colorB=1fa669)\\n\\n> [!IMPORTANT]\\n> This is a work in progress. Not ready for production use yet. If you are interested in and want to help, feel free to open an issue or PR.\\n\\nA unified MCP (Model Context Protocol) plugin that creates and manages an MCP Server and provides MCP tools by which AI can know more about your codebase, build tools, and even control the build process. It works with multiple JavaScript build tools supported by unplugin, including Rollup, Vite, Webpack, and others.\\n\\nHere is the vision of this plugin, to provide a unified MCP Server and MCP tools to MCP Client.\\n\\n```mermaid\\nflowchart LR\\n    subgraph \\\"Build tools\\\"\\n        Rollup[\\\"Rollup\\\"]\\n        Vite[\\\"Vite\\\"]\\n        ESBuild[\\\"ESBuild\\\"]\\n        Webpack[\\\"Webpack\\\"]\\n        Rspack[\\\"Rspack\\\"]\\n        Rolldown[\\\"Rolldown\\\"]\\n    end\\n\\n    subgraph \\\"unplugin-mcp (This plugin)\\\"\\n        unplugin[\\\"unplugin\\\"]\\n        McpTool[\\\"UnpluginMcpTool\\\"]\\n        McpServer[\\\"MCP Server\\\"]\\n        HTTPServer[\\\"HTTP Server\\\"]\\n    end\\n\\n    subgraph \\\"MCP Clients\\\"\\n        Cursor[\\\"Cursor\\\"]\\n        VSCode[\\\"VSCode\\\"]\\n        More[\\\"More\\\"]\\n    end\\n\\n    Rollup & Webpack & Vite & ESBuild & Rspack & Rolldown --> unplugin\\n    unplugin --> McpTool\\n    McpTool --> McpServer\\n    McpServer --> HTTPServer\\n    HTTPServer --> Cursor & VSCode & More\\n```\\n\\n## Features\\n\\n- \\ud83d\\ude80 **Cross-Platform MCP Integration**: Creates and manages an MCP server seamlessly across multiple build tools.\\n- \\ud83e\\udde9 **Bi-directional AI Integration**: Not only provides context to AI assistants about your codebase, but also enables AI to actively modify and control your build process.\\n- \\ud83e\\uddf0 **Rich built-in tools**: Collection of built-in tools for analyzing module dependencies, inspecting build configuration, debugging error messages, and so on.\\n- \\ud83d\\udee0\\ufe0f **Extensible Tool Framework**: Create custom MCP tools with the simple `UnpluginMcpTool` interface to expose project-specific information or functionality.\\n- \\ud83d\\udd0d **Build Process Integration**: Seamlessly integrates at any point in the plugin chain and hooks of your build tools like Rollup.\\n- \\ud83d\\udd04 **Persistent Server**: Keeps running even after build completion in watch mode, enabling continuous AI interaction.\\n- \\ud83c\\udf10 **Standard Transport Layer**: Uses HTTP and Server-Sent Events (SSE) for broad compatibility with AI assistants implementing the MCP protocol.\\n\\n## Installation\\n\\n```bash\\n# Install the plugin\\npnpm add -D unplugin-mcp\\n\\n# or install bundler-specific one, it shares the same codebase but only exports the plugin for the specific bundler\\npnpm add -D rollup-plugin-mcp\\n```\\n\\n## Usage\\n\\n### Build Tool Integration\\n\\nHere is an example of how to use the plugin with Rollup. The server will be started automatically when you run `rollup` in watch mode (`rollup -w`).\\n\\n```js\\n// rollup.config.js\\nimport { defineConfig } from 'rollup';\\nimport { rollupPlugin as mcp } from 'unplugin-mcp';\\n\\n// import some built-in tools\\nimport { ModuleTool, BuildConfigTool, BuildErrorTool } from 'unplugin-mcp/tools';\\n\\nexport default defineConfig({\\n  plugins: [\\n    // other plugins...\\n    mcp({\\n      provideUnpluginMcpTools: () => [\\n        new ModuleTool(),\\n        new BuildConfigTool(),\\n        new BuildErrorTool()\\n      ]\\n    }),\\n    // other plugins...\\n  ]\\n});\\n```\\n\\n\\ud83d\\udea7 Usage on other bundlers is on the way.\\n\\n### Usage in Cursor\\n\\nJust add a MCP Server to Cursor Settings. For example, in `~/.config/cursor/mcp.json`:\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"rollup\\\": {\\n      \\\"url\\\": \\\"http://localhost:14514/mcp/sse\\\"\\n    }\\n  }\\n}\\n```\\n\\n### Options\\n\\nCheck `McpPluginOptions` in [types file](./lib/src/types.ts) for all available options.\\n\\n## Built-in Tools Compatibility\\n\\n> Notes: Currently, implementation of built-in tools is relatively simple and may not cover all edge cases.\\n\\n| Tool              | Description                             | Rollup | Webpack |\\n| ----------------- | --------------------------------------- | :----: | :-----: |\\n| `ModuleTool`      | Analyze module dependencies and imports |   \\u2705    |    \\u274c    |\\n| `BuildConfigTool` | Inspect build configuration             |   \\u2705    |    \\u2705    |\\n| `BuildErrorTool`  | Debug build errors                      |   \\u2705    |    \\u2705    |\\n| `BundleSizeTool`  | Inspect size of bundle and its modules  |   \\u2705    |    \\u274c    |\\n\\n- \\u2705 = Supported\\n- \\u274c = Not yet implemented\\n\\n## Custom Tools\\n\\nYou can extend the plugin with custom tools implementing the `UnpluginMcpTool` interface:\\n\\n```typescript\\nimport { InputOptions } from \\\"rollup\\\";\\nimport { UnpluginMcpTool, UnpluginMcpToolSetupOptio\\n[...truncated for length...]\", \"tools\": [{\"name\": \"UnpluginMcpTool\", \"description\": \"interface to expose project-specific information or functionality.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for UnpluginMcpTool\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"rollup\", \"description\": \"in watch mode (`rollup -w`).\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for rollup\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"McpPluginOptions\", \"description\": \"in [types file](./lib/src/types.ts) for all available options.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"ModuleTool\", \"description\": \"| Analyze module dependencies and imports |   \\u2705    |    \\u274c    |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for ModuleTool\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"BuildConfigTool\", \"description\": \"| Inspect build configuration             |   \\u2705    |    \\u2705    |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for BuildConfigTool\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"BuildErrorTool\", \"description\": \"| Debug build errors                      |   \\u2705    |    \\u2705    |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for BuildErrorTool\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"BundleSizeTool\", \"description\": \"| Inspect size of bundle and its modules  |   \\u2705    |    \\u274c    |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for BundleSizeTool\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 7, \"homepage\": \"\", \"url\": \"https://github.com/situ2001/unplugin-mcp\", \"topics\": [\"mcp\", \"mcp-server\", \"modelcontextprotocol\", \"rollup\", \"rollup-plugin\", \"unplugin\", \"webpack-plugin\"], \"data_sources\": [\"github\"]}", "target": "", "id": "situ2001/unplugin-mcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"mcp-bamm\", \"server_id\": \"iqaicom/mcp-bamm\", \"description\": \"Model Context Protocol Server for Borrow Automated Market Maker\", \"readme\": \"# MCP-BAMM: Model Context Protocol Server for Borrow Automated Market Maker\\n\\nThis project implements a Model Context Protocol (MCP) server to interact with Borrow Automated Market Maker (BAMM) contracts on the Fraxtal blockchain. It allows MCP-compatible clients (like AI assistants, IDE extensions, or custom applications) to manage BAMM positions, borrow against LP tokens, and perform other operations related to the BAMM protocol.\\n\\nThis server is built using TypeScript and `fastmcp`.\\n\\n## Features (MCP Tools)\\n\\nThe server exposes the following tools that MCP clients can utilize:\\n\\n* **`ADD_COLLATERAL`**: Add collateral to your BAMM position.\\n  * Parameters: `bammAddress` (string), `amount` (string), `collateralToken` (string, optional), `collateralTokenSymbol` (string, optional)\\n  * Requires `WALLET_PRIVATE_KEY` in the environment.\\n\\n* **`BORROW`**: Borrow tokens from a BAMM position.\\n  * Parameters: `bammAddress` (string), `amount` (string), `borrowToken` (string, optional), `borrowTokenSymbol` (string, optional)\\n  * Requires `WALLET_PRIVATE_KEY` in the environment.\\n\\n* **`REPAY`**: Repay borrowed tokens to a BAMM position.\\n  * Parameters: `bammAddress` (string), `amount` (string), `borrowToken` (string, optional), `borrowTokenSymbol` (string, optional)\\n  * Requires `WALLET_PRIVATE_KEY` in the environment.\\n\\n* **`LEND`**: Lend Fraxswap LP tokens to a BAMM contract.\\n  * Parameters: `bammAddress` (string), `amount` (string)\\n  * Requires `WALLET_PRIVATE_KEY` in the environment.\\n\\n* **`WITHDRAW`**: Withdraw LP tokens from a BAMM contract by redeeming BAMM tokens.\\n  * Parameters: `bammAddress` (string), `amount` (string)\\n  * Requires `WALLET_PRIVATE_KEY` in the environment.\\n\\n* **`REMOVE_COLLATERAL`**: Remove collateral from your BAMM position.\\n  * Parameters: `bammAddress` (string), `amount` (string), `collateralToken` (string, optional), `collateralTokenSymbol` (string, optional)\\n  * Requires `WALLET_PRIVATE_KEY` in the environment.\\n\\n* **`GET_POSITIONS`**: Get all your active BAMM positions.\\n  * Requires `WALLET_PRIVATE_KEY` in the environment.\\n\\n* **`POOL_STATS`**: Get statistics for all BAMM pools.\\n  * Requires `WALLET_PRIVATE_KEY` in the environment.\\n\\n## Prerequisites\\n\\n* Node.js (v18 or newer recommended)\\n* pnpm\\n\\n## Installation\\n\\nThere are a few ways to use `mcp-bamm`:\\n\\n**1. Using `pnpm dlx` (Recommended for most MCP client setups):**\\n\\nYou can run the server directly using `pnpm dlx` without needing a global installation. This is often the easiest way to integrate with MCP clients.\\n\\n**2. Global Installation from npm (via pnpm):**\\n\\nInstall the package globally to make the `mcp-bamm` command available system-wide:\\n\\n```bash\\npnpm add -g mcp-bamm\\n```\\n\\n**3. Building from Source (for development or custom modifications):**\\n\\n1. **Clone the repository:**\\n\\n   ```bash\\n   git clone https://github.com/your-org/mcp-bamm.git\\n   cd mcp-bamm\\n   ```\\n\\n2. **Install dependencies:**\\n\\n   ```bash\\n   pnpm install\\n   ```\\n\\n3. **Set up your wallet private key:**\\n\\n   Set the `WALLET_PRIVATE_KEY` environment variable with your wallet's private key (without 0x prefix):\\n\\n   ```bash\\n   export WALLET_PRIVATE_KEY=your_private_key_here\\n   ```\\n\\n   For persistent configuration, add this to your shell profile or use a `.env` file (make sure to add the `.env` file to `.gitignore`).\\n\\n4. **Build the project:**\\n\\n   ```bash\\n   pnpm run build\\n   ```\\n\\n5. **Start the server:**\\n\\n   ```bash\\n   pnpm run start\\n   ```\\n\\n## Configuration (Environment Variables)\\n\\nThis MCP server requires certain environment variables to be set by the MCP client that runs it. These are typically configured in the client's MCP server definition (e.g., in a `mcp.json` file for Cursor, or similar for other clients).\\n\\n* **`WALLET_PRIVATE_KEY`**: (Required for all blockchain operations)\\n  * The private key of the wallet to be used for interacting with BAMM contracts (signing transactions for lending, borrowing, etc.).\\n  * **Security Note:** Handle this private key with extreme care. Ensure it is stored securely and only provided to trusted MCP client configurations.\\n\\n## Running the Server with an MCP Client\\n\\nMCP clients (like AI assistants, IDE extensions, etc.) will run this server as a background process. You need to configure the client to tell it how to start your server. Below is an example configuration snippet that an MCP client might use (e.g., in a `mcp_servers.json` or similar configuration file). This example shows how to run the server using the published npm package via `pnpm dlx`.\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"bamm-mcp-server\\\": {\\n      \\\"command\\\": \\\"pnpm\\\",\\n      \\\"args\\\": [\\\"dlx\\\", \\\"mcp-bamm\\\"],\\n      \\\"env\\\": {\\n        \\\"WALLET_PRIVATE_KEY\\\": \\\"your_wallet_private_key_here\\\"\\n      }\\n    }\\n  }\\n}\\n```\\n\\n**Alternative if Globally Installed:**\\nIf you have installed `mcp-bamm` globally (`pnpm add -g mcp-bamm`), you can simplify the `command` and `args`:\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"bamm-mcp-server\\\": {\\n      \\\"command\\\": \\\"mcp-bamm\\\",\\n      \\\"args\\\": [],\\n      \\\"env\\\": {\\n        \\\"WALLET_PRIVATE_K\\n[...truncated for length...]\", \"tools\": [{\"name\": \"fastmcp\", \"description\": \".\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for fastmcp\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"ADD_COLLATERAL\", \"description\": \"**: Add collateral to your BAMM position.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for ADD_COLLATERAL\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"bammAddress\", \"description\": \"(string), `amount` (string), `collateralToken` (string, optional), `collateralTokenSymbol` (string, optional)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"amount\": {\"type\": \"number\", \"description\": \"Numeric amount or value\"}}, \"required\": [\"amount\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"WALLET_PRIVATE_KEY\", \"description\": \"in the environment.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for WALLET_PRIVATE_KEY\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"BORROW\", \"description\": \"**: Borrow tokens from a BAMM position.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for BORROW\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"REPAY\", \"description\": \"**: Repay borrowed tokens to a BAMM position.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for REPAY\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"LEND\", \"description\": \"**: Lend Fraxswap LP tokens to a BAMM contract.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for LEND\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"WITHDRAW\", \"description\": \"**: Withdraw LP tokens from a BAMM contract by redeeming BAMM tokens.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for WITHDRAW\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"REMOVE_COLLATERAL\", \"description\": \"**: Remove collateral from your BAMM position.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for REMOVE_COLLATERAL\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"GET_POSITIONS\", \"description\": \"**: Get all your active BAMM positions.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for GET_POSITIONS\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"POOL_STATS\", \"description\": \"**: Get statistics for all BAMM pools.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for POOL_STATS\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"command\", \"description\": \"and `args`:\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for command\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"args\", \"description\": \"**: An array of arguments to pass to the command.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for args\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"env\", \"description\": \"**: An object containing environment variables to be set when the server process starts. This is where you provide `WALLET_PRIVATE_KEY`.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for env\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"tsx\", \"description\": \"(hot-reloading for TypeScript).\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for tsx\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 15, \"homepage\": \"https://www.npmjs.com/package/@iqai/mcp-bamm\", \"url\": \"https://github.com/IQAIcom/mcp-bamm\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "iqaicom/mcp-bamm", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"MCPXcode\", \"server_id\": \"everettjf/mcpxcode\", \"description\": \"MCP server for Xcode\", \"readme\": \"# MCPXcode\\n\\n*!!! This Project is in Active Development, So May Have Unexpected Issues*\\n\\n\\n## Introduction\\n\\nMCPXcode is an open-source implementation of the [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) for Xcode. It enables seamless integration between Xcode and AI assistants by providing a structured protocol for context exchange and tool execution within the Xcode environment.\\n\\nFollowing the MCP specification, this project creates a bridge between Xcode's development environment and AI tools, allowing for enhanced developer workflows through contextual understanding and programmable interactions. It wraps common command-line tools (`xcrun`, `xctrace`) and leverages macOS accessibility features to enable AI-assisted automation of Xcode operations.\\n\\n\\n## Screenshots\\n\\n<p align=\\\"center\\\">\\n  <img src=\\\"assets/screenshot01.png\\\" width=\\\"49%\\\" />\\n  <img src=\\\"assets/screenshot02.png\\\" width=\\\"49%\\\" />\\n</p>\\n\\n\\n## Installation\\n\\n```bash\\n\\n# Install uv\\ncurl -LsSf https://astral.sh/uv/install.sh | sh\\n\\n# Clone the repository\\ngit clone https://github.com/everettjf/MCPXcode.git\\ncd MCPXcode\\nsource .venv/bin/activate\\nuv add \\\"mcp[cli]\\\"\\n```\\n\\n## Configuration\\n\\n\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"MCPXcode\\\": {\\n      \\\"command\\\": \\\"uv\\\", # may use full path\\n      \\\"args\\\": [\\n        \\\"--directory\\\",\\n        \\\"<Path>/MCPXcode\\\", # change to your full path\\n        \\\"run\\\",\\n        \\\"main.py\\\"\\n      ]\\n    }\\n  }\\n}\\n```\\n\\n\\n\\n## Features\\n\\n### Current MCP Tool Integrations\\n\\n- **xcrun Tool Extensions**\\n  - Context-aware interfaces for common xcrun commands\\n  - Structured output formatting for AI consumption\\n  - Semantic error handling and diagnostic reporting\\n\\n- **xctrace Tool Extensions**\\n  - Context-enhanced profiling and tracing for iOS/macOS applications\\n  - Structured performance metrics collection for AI analysis\\n  - Trace data processing with semantic context\\n\\n### Planned Extensions\\n\\n- **Accessibility Tool Extensions**\\n  - Context-aware UI interactions within Xcode\\n  - Semantic triggers for build, run, and test operations\\n  - Structured project navigation capabilities\\n  - Enhanced context extraction from Xcode UI\\n\\n- **MCP HTTP Server**\\n  - Full MCP specification compliance over HTTP\\n  - Standardized tool execution protocol\\n  - Context-preserving webhooks for build events\\n  - Seamless integration with AI-powered CI/CD pipelines\\n\\n- **MCP Client Libraries**\\n  - Language-specific SDKs implementing the MCP specification\\n  - Simplified context exchange between AI assistants and Xcode\\n\\n\\n## Tool Documentation\\n\\n### Simulator Control Tools\\n\\n| Tool | Description | Example Prompt |\\n|------|-------------|----------------|\\n| `list_devices` | List all available simulator devices with detailed information | \\\"Show me all available iOS simulator devices and their status.\\\" |\\n| `boot_device` | Boot a specific simulator device identified by its UDID | \\\"Boot the iPhone 14 Pro simulator with UDID A1B2C3D4-E5F6-7890-1234-567890ABCDEF.\\\" |\\n| `shutdown_device` | Shutdown a running simulator device | \\\"Shutdown the currently running iPhone simulator with UDID A1B2C3D4-E5F6-7890-1234-567890ABCDEF.\\\" |\\n| `install_app` | Install an application on a simulator device | \\\"Install the app at path /Users/username/MyApp.app on the iPhone 14 simulator.\\\" |\\n| `launch_app` | Launch an installed application on a simulator device | \\\"Launch the app with bundle ID com.example.myapp on the iPhone 14 simulator.\\\" |\\n\\n### SDK Tools\\n\\n| Tool | Description | Example Prompt |\\n|------|-------------|----------------|\\n| `get_sdk_path` | Get the path of the current SDK | \\\"What is the path to the current iOS SDK?\\\" |\\n| `get_sdk_version` | Get the version of the current SDK | \\\"What version of the iOS SDK am I using?\\\" |\\n| `get_sdk_platform_path` | Get the platform path of the current SDK | \\\"Where are the iOS platform files located?\\\" |\\n| `find_developer_tool` | Find the path of a specific developer tool | \\\"Where is the 'lldb' binary located in the Xcode toolchain?\\\" |\\n| `run_tool_with_sdk` | Run a developer tool with a specific SDK | \\\"Run the 'clang' tool with the iOS SDK to compile my source file.\\\" |\\n\\n### xcrun Tools\\n\\n| Tool | Description | Example Prompt |\\n|------|-------------|----------------|\\n| `xcrun_list_sdks` | List all available SDKs with detailed information | \\\"Show me all available SDKs I can build against.\\\" |\\n| `xcrun_list_schemes` | List all schemes in a specified Xcode project | \\\"What are all the build schemes in my MyApp.xcodeproj project?\\\" |\\n| `xcrun_build` | Build an Xcode project with specified scheme and configuration | \\\"Build my MyApp.xcodeproj project using the Debug configuration for the iPhone simulator.\\\" |\\n| `xcrun_validate_app` | Validate an app before submission to App Store | \\\"Validate my MyApp.ipa file before submitting it to the App Store.\\\" |\\n| `xcrun_upload_app` | Upload an app to App Store Connect | \\\"Upload my validated MyApp.ipa file to App Store Connect for review.\\\" |\\n| `xcrun_swift_symbols` | Extract Swift symbols from a binary file | \\\"Extract and show me all S\\n[...truncated for length...]\", \"tools\": [{\"name\": \"xcrun\", \"description\": \", `xctrace`) and leverages macOS accessibility features to enable AI-assisted automation of Xcode operations.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for xcrun\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"list_devices\", \"description\": \"| List all available simulator devices with detailed information | \\\"Show me all available iOS simulator devices and their status.\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for list_devices\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"boot_device\", \"description\": \"| Boot a specific simulator device identified by its UDID | \\\"Boot the iPhone 14 Pro simulator with UDID A1B2C3D4-E5F6-7890-1234-567890ABCDEF.\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for boot_device\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"shutdown_device\", \"description\": \"| Shutdown a running simulator device | \\\"Shutdown the currently running iPhone simulator with UDID A1B2C3D4-E5F6-7890-1234-567890ABCDEF.\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for shutdown_device\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"install_app\", \"description\": \"| Install an application on a simulator device | \\\"Install the app at path /Users/username/MyApp.app on the iPhone 14 simulator.\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"launch_app\", \"description\": \"| Launch an installed application on a simulator device | \\\"Launch the app with bundle ID com.example.myapp on the iPhone 14 simulator.\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for launch_app\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"get_sdk_path\", \"description\": \"| Get the path of the current SDK | \\\"What is the path to the current iOS SDK?\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_sdk_version\", \"description\": \"| Get the version of the current SDK | \\\"What version of the iOS SDK am I using?\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_sdk_version\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_sdk_platform_path\", \"description\": \"| Get the platform path of the current SDK | \\\"Where are the iOS platform files located?\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"find_developer_tool\", \"description\": \"| Find the path of a specific developer tool | \\\"Where is the 'lldb' binary located in the Xcode toolchain?\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}, \"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}}, \"required\": [\"file_path\", \"query\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"run_tool_with_sdk\", \"description\": \"| Run a developer tool with a specific SDK | \\\"Run the 'clang' tool with the iOS SDK to compile my source file.\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"xcrun_list_sdks\", \"description\": \"| List all available SDKs with detailed information | \\\"Show me all available SDKs I can build against.\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for xcrun_list_sdks\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"xcrun_list_schemes\", \"description\": \"| List all schemes in a specified Xcode project | \\\"What are all the build schemes in my MyApp.xcodeproj project?\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for xcrun_list_schemes\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"xcrun_build\", \"description\": \"| Build an Xcode project with specified scheme and configuration | \\\"Build my MyApp.xcodeproj project using the Debug configuration for the iPhone simulator.\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for xcrun_build\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"xcrun_validate_app\", \"description\": \"| Validate an app before submission to App Store | \\\"Validate my MyApp.ipa file before submitting it to the App Store.\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"xcrun_upload_app\", \"description\": \"| Upload an app to App Store Connect | \\\"Upload my validated MyApp.ipa file to App Store Connect for review.\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"xcrun_swift_symbols\", \"description\": \"| Extract Swift symbols from a binary file | \\\"Extract and show me all Swift symbols from my app's binary.\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"xcrun_otool_headers\", \"description\": \"| Show Mach-O headers of a binary file | \\\"Show me the Mach-O headers of my app's binary file.\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"xcrun_otool_libraries\", \"description\": \"| Show linked libraries of a binary file | \\\"What libraries is my app's binary linked against?\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}, \"url\": {\"type\": \"string\", \"description\": \"URL or link to process\"}}, \"required\": [\"file_path\", \"url\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"xcrun_nm_symbols\", \"description\": \"| Show symbols in a binary file | \\\"Show me all symbols in my app's binary file.\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"xctrace_devices\", \"description\": \"| List available devices for tracing | \\\"Show me all devices I can run performance traces on.\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for xctrace_devices\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"xctrace_templates\", \"description\": \"| List available templates for tracing | \\\"What trace templates are available for performance profiling?\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for xctrace_templates\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"xctrace_record\", \"description\": \"| Record app performance using a specified template | \\\"Record a performance trace of my app using the Time Profiler template.\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"xctrace_record_advanced\", \"description\": \"| Record app performance with advanced options | \\\"Record a performance trace with custom template options and set the environment variable DEBUG=1.\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for xctrace_record_advanced\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"xctrace_attach_process\", \"description\": \"| Attach to a running process for tracing | \\\"Attach a performance tracer to my running app with process ID 12345.\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for xctrace_attach_process\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"xctrace_export\", \"description\": \"| Export trace data to a specified format | \\\"Export my trace.trace file to JSON format for analysis.\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"xctrace_diagnose\", \"description\": \"| Diagnose a trace archive for issues | \\\"Analyze my trace file for any performance issues or problems.\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"xctrace_document\", \"description\": \"| Generate documentation for a template | \\\"Create documentation for the Allocations template so I can understand its metrics.\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for xctrace_document\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"xctrace_analyze\", \"description\": \"| Analyze a trace file and generate performance reports | \\\"Generate performance reports from my time profiler trace file.\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"xctrace_compare\", \"description\": \"| Compare two trace files and generate a comparison report | \\\"Compare the performance between trace files from version 1.0 and version 2.0 of my app.\\\" |\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"write\"}], \"tools_count\": 30, \"homepage\": \"\", \"url\": \"https://github.com/everettjf/MCPXcode\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "everettjf/mcpxcode", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"infactory-mcp\", \"server_id\": \"infactory-io/infactory-mcp\", \"description\": \"Infactory MCP Server\", \"readme\": \"# Infactory MCP Server\\n\\nAn MCP (Model Context Protocol) server for interacting with Infactory APIs using Claude and other LLMs. This server enables language models to access and manipulate data in your Infactory environment.\\n\\n## Features\\n\\n- **Project Management**: List, retrieve, and create projects\\n- **Query Programs**: List and execute query programs\\n- **Datasources**: List, retrieve, and create datasources\\n- **User & Team Management**: Get current user information and list teams\\n\\n## Getting Started\\n\\n### Prerequisites\\n\\n- An Infactory API key\\n- Node.js 18+ (for local installation)\\n\\n### Installation\\n\\n#### Using NPX (Recommended)\\n\\n```bash\\nnpx -y @infactory/infactory-mcp\\n```\\n\\n#### Using Docker\\n\\n```bash\\ndocker run -i --rm \\\\\\n  -e NF_API_KEY=\\\"your_api_key_here\\\" \\\\\\n  @infactory/infactory-mcp\\n```\\n\\n### Environment Variables\\n\\n- `NF_API_KEY` (required): Your Infactory API key\\n- `NF_BASE_URL` (optional): Custom API endpoint if using a different environment\\n\\n## Available Tools\\n\\n### Project Tools\\n\\n- **list_projects**: List all available projects\\n\\n  - No parameters required\\n\\n- **get_project**: Get details of a specific project\\n\\n  - Parameters:\\n    - `project_id` (string): ID of the project to retrieve\\n\\n- **create_project**: Create a new project\\n  - Parameters:\\n    - `name` (string): Project name\\n    - `description` (string, optional): Project description\\n    - `team_id` (string): Team ID\\n\\n### Query Program Tools\\n\\n- **list_query_programs**: List query programs in a project\\n\\n  - Parameters:\\n    - `project_id` (string): ID of the project\\n\\n- **execute_query_program**: Execute a query program\\n  - Parameters:\\n    - `queryprogram_id` (string): ID of the query program to execute\\n    - `input_data` (object, optional): Input data for the query program\\n\\n### Datasource Tools\\n\\n- **list_datasources**: List datasources in a project\\n\\n  - Parameters:\\n    - `project_id` (string): ID of the project\\n\\n- **get_datasource**: Get details of a specific datasource\\n\\n  - Parameters:\\n    - `datasource_id` (string): ID of the datasource\\n\\n- **create_datasource**: Create a new datasource\\n  - Parameters:\\n    - `name` (string): Datasource name\\n    - `project_id` (string): ID of the project\\n    - `type` (string): Datasource type\\n\\n### User and Team Tools\\n\\n- **get_current_user**: Get information about the current user\\n\\n  - No parameters required\\n\\n- **list_teams**: List teams in an organization\\n  - Parameters:\\n    - `organization_id` (string): ID of the organization\\n\\n## Usage with Claude Desktop + Windsurf + Cursor\\n\\nHere is the likely location of your MCP configuration file:\\n\\n- Claude Desktop - Add this to your `claude_desktop_config.json`:\\n- Windsurf - Add this to your `~/.codeium/windsurf/mcp_config.json`:\\n- Cursor - Add this to your `~/.cursor/mcp.json`:\\n\\nAdd this to your MCP configuration:\\n\\n```json\\n{\\n  \\\"version\\\": \\\"0.1\\\",\\n  \\\"mcpServers\\\": {\\n    \\\"infactory-mcp\\\": {\\n      \\\"command\\\": \\\"npx\\\",\\n      \\\"args\\\": [\\\"-y\\\", \\\"@infactory/infactory-mcp\\\"],\\n      \\\"env\\\": {\\n        \\\"NF_API_KEY\\\": \\\"nf-************************\\\"\\n      }\\n    }\\n  }\\n}\\n```\\n\\nOr if you are doing development:\\n\\n```json\\n{\\n  \\\"version\\\": \\\"0.1\\\",\\n  \\\"mcpServers\\\": {\\n    \\\"infactory-mcp\\\": {\\n      \\\"command\\\": \\\"node\\\",\\n      \\\"args\\\": [\\\"FULL_PATH_TO/infactory-mcp/dist/index.js\\\"],\\n      \\\"env\\\": {\\n        \\\"NF_API_KEY\\\": \\\"nf-************************\\\"\\n      }\\n    }\\n  }\\n}\\n```\\n\\n## Example Prompts\\n\\nOnce your MCP server is configured, you can use prompts like these with Claude:\\n\\n- \\\"Show me a list of all my Infactory projects\\\"\\n- \\\"Get the details for project proj-123abc\\\"\\n- \\\"Create a new project called 'Data Analysis' in team team-456xyz\\\"\\n- \\\"List all query programs in project proj-123abc\\\"\\n- \\\"Execute query program qp-789def\\\"\\n- \\\"Tell me about myself (my user account)\\\"\\n\\n## Building from Source\\n\\n```bash\\n# Clone the repository\\ngit clone https://github.com/yourusername/mcp-server-infactory.git\\ncd mcp-server-infactory\\n\\n# Install dependencies\\nnpm install\\n\\n# Build\\nnpm run build\\n\\n# Start the server\\nnpm start\\n\\n# Optional - start inspector (for debugging)\\nnpx @modelcontextprotocol/inspector -e \\\"NF_API_KEY=$NF_API_KEY\\\" node -- dist/index.js\\n```\\n\\n## License\\n\\nMIT License\\n\", \"tools\": [{\"name\": \"NF_API_KEY\", \"description\": \"(required): Your Infactory API key\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for NF_API_KEY\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"NF_BASE_URL\", \"description\": \"(optional): Custom API endpoint if using a different environment\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"URL or link to process\"}}, \"required\": [\"url\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"project_id\", \"description\": \"(string): ID of the project to retrieve\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for project_id\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"name\", \"description\": \"(string): Project name\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for name\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"description\", \"description\": \"(string, optional): Project description\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for description\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"team_id\", \"description\": \"(string): Team ID\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for team_id\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"queryprogram_id\", \"description\": \"(string): ID of the query program to execute\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}}, \"required\": [\"query\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"input_data\", \"description\": \"(object, optional): Input data for the query program\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}, \"message\": {\"type\": \"string\", \"description\": \"Text content or message\"}}, \"required\": [\"query\", \"message\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"datasource_id\", \"description\": \"(string): ID of the datasource\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for datasource_id\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"type\", \"description\": \"(string): Datasource type\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for type\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"organization_id\", \"description\": \"(string): ID of the organization\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for organization_id\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 11, \"homepage\": \"\", \"url\": \"https://github.com/infactory-io/infactory-mcp\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "infactory-io/infactory-mcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"swift-developer-mcp-server\", \"server_id\": \"edgeengineer/swift-developer-mcp-server\", \"description\": \"A Local MCP server useful for Cross Platform Swift Development\", \"readme\": \"# Swift Developer MCP Server\\n\\nA comprehensive Model Context Protocol (MCP) server that provides Swift development tools, debugging capabilities, and project management features for macOS and Linux environments. This server enables AI assistants to interact with Swift projects, build systems, and development tools.\\n\\n## Features\\n\\n### \\ud83d\\udd28 Build & Test Tools\\n- **`swift_build`** - Build Swift projects with configuration options (debug/release, specific targets, verbose output)\\n- **`swift_test`** - Run Swift tests with filtering, parallel execution control, and verbose output\\n- **`run_target`** - Execute specific Swift targets with custom arguments\\n\\n### \\ud83d\\udc1b Debugging Tools\\n- **`debug_start`** - Start debugging sessions for Swift targets\\n- **`debug_set_breakpoint`** - Set breakpoints with optional conditions\\n- **`debug_step`** - Step through code (over, into, out)\\n- **`debug_continue`** - Continue execution until next breakpoint\\n- **`debug_inspect_variable`** - Inspect variables and evaluate expressions\\n\\n### \\ud83d\\udce6 Swift Package Management\\n- **`get_package_info`** - Get comprehensive Swift package information and dependencies\\n- **`print_dependency_public_api`** - Extract and display the public API of any dependency\\n\\n### \\ud83d\\udd27 Swiftly Toolchain Management\\n- **`swiftly_install`** - Install Swift toolchains from different channels\\n- **`swiftly_list`** - List installed Swift toolchains\\n- **`swiftly_list_available`** - List available Swift versions to install\\n- **`swiftly_use`** - Switch between Swift versions globally or per-project\\n- **`swiftly_run`** - Run commands with specific Swift versions\\n- **`swiftly_uninstall`** - Remove Swift toolchains\\n\\n### \\ud83d\\udcca Resources\\n- **`swift://project/info`** - Current project information and structure\\n- **`swift://build/status`** - Build status and history\\n- **`swift://debug/sessions`** - Active debug sessions and breakpoints\\n\\n### \\ud83d\\udca1 Prompts\\n- **`swift_debug_session`** - Guided debugging session setup with target-specific recommendations\\n- **`swift_build_analysis`** - Intelligent build error analysis and solution suggestions\\n\\n## Installation\\n\\n### Prerequisites\\n\\n1. **Swift**: Install Swift 5.9+ or use [Swiftly](https://github.com/swift-server/swiftly) for version management\\n2. **macOS or Linux**: This server supports both macOS and Linux environments\\n3. **Make**: For using the convenient build targets\\n\\n### Quick Setup\\n\\n1. Clone the repository:\\n   ```bash\\n   git clone https://github.com/edgeengineer/swift-developer-mcp-server.git\\n   cd swift-developer-mcp-server\\n   ```\\n\\n2. **Build and get path** (copies to clipboard automatically):\\n   ```bash\\n   make path\\n   ```\\n\\n   This will:\\n   - \\u2705 Build the server in release mode\\n   - \\u2705 Show the executable path\\n   - \\u2705 Copy the path to your clipboard\\n   - \\u2705 Display configuration examples for popular AI clients\\n\\n### Other Make Targets\\n\\n```bash\\nmake build    # Build the server in release mode\\nmake clean    # Clean build artifacts\\nmake install  # Install to /usr/local/bin\\nmake help     # Show all available targets\\n```\\n\\n## Configuration for AI Clients\\n\\n### Cursor\\n\\nAdd to your Cursor settings (`.cursor-settings/settings.json`):\\n\\n```json\\n{\\n  \\\"mcp\\\": {\\n    \\\"servers\\\": {\\n      \\\"swift-developer\\\": {\\n        \\\"command\\\": \\\"PASTE_PATH_FROM_CLIPBOARD_HERE\\\",\\n        \\\"args\\\": [],\\n        \\\"env\\\": {}\\n      }\\n    }\\n  }\\n}\\n```\\n\\n### Windsurf\\n\\nAdd to your Windsurf configuration (`.windsurf/mcp_servers.json`):\\n\\n```json\\n{\\n  \\\"servers\\\": {\\n    \\\"swift-developer\\\": {\\n      \\\"command\\\": \\\"PASTE_PATH_FROM_CLIPBOARD_HERE\\\",\\n      \\\"args\\\": [],\\n      \\\"env\\\": {}\\n    }\\n  }\\n}\\n```\\n\\n### Claude Desktop\\n\\nAdd to your Claude Desktop configuration:\\n- **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\\n- **Linux**: `~/.config/claude/claude_desktop_config.json`\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"swift-developer\\\": {\\n      \\\"command\\\": \\\"PASTE_PATH_FROM_CLIPBOARD_HERE\\\",\\n      \\\"args\\\": [],\\n      \\\"env\\\": {}\\n    }\\n  }\\n}\\n```\\n\\n### Claude Code (Terminal Application)\\n\\nAdd to your Claude Code configuration (in the terminal application):\\n\\n```\\nclaude mcp add swift-developer PASTE_PATH_FROM_CLIPBOARD_HERE\\n``` \\n\\n### Claude Code (VS Code Extension)\\n\\nAdd to your VS Code settings (`.vscode/settings.json`):\\n\\n```json\\n{\\n  \\\"claude-dev.mcpServers\\\": {\\n    \\\"swift-developer\\\": {\\n      \\\"command\\\": \\\"PASTE_PATH_FROM_CLIPBOARD_HERE\\\",\\n      \\\"args\\\": [],\\n      \\\"env\\\": {}\\n    }\\n  }\\n}\\n```\\n\\n> \\ud83d\\udca1 **Pro Tip**: Run `make path` to get ready-to-copy configuration examples for each client!\\n\\n## Usage Examples\\n\\n### Building a Swift Project\\n\\n```\\nUse the swift_build tool to build the current project in release mode with verbose output.\\n```\\n\\n### Running Tests\\n\\n```\\nUse the swift_test tool to run all tests in parallel with verbose output.\\n```\\n\\n### Starting a Debug Session\\n\\n```\\nUse the swift_debug_session prompt to set up debugging for the \\\"MyApp\\\" target, focusing on the \\\"ViewController.swift\\\" file.\\n```\\n\\n### Managing Swift Versions\\n\\n```\\nUse swiftly_list to see installed Swift versions, then swiftly_use to switch to Swift 5.9.\\n```\\n\\n### Extracting Dependency \\n[...truncated for length...]\", \"tools\": [{\"name\": \"swift_build\", \"description\": \"** - Build Swift projects with configuration options (debug/release, specific targets, verbose output)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for swift_build\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"swift_test\", \"description\": \"** - Run Swift tests with filtering, parallel execution control, and verbose output\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for swift_test\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"run_target\", \"description\": \"** - Execute specific Swift targets with custom arguments\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for run_target\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"debug_start\", \"description\": \"** - Start debugging sessions for Swift targets\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for debug_start\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"debug_set_breakpoint\", \"description\": \"** - Set breakpoints with optional conditions\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for debug_set_breakpoint\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"debug_step\", \"description\": \"** - Step through code (over, into, out)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for debug_step\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"debug_continue\", \"description\": \"** - Continue execution until next breakpoint\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for debug_continue\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"debug_inspect_variable\", \"description\": \"** - Inspect variables and evaluate expressions\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for debug_inspect_variable\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_package_info\", \"description\": \"** - Get comprehensive Swift package information and dependencies\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_package_info\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"print_dependency_public_api\", \"description\": \"** - Extract and display the public API of any dependency\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for print_dependency_public_api\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"swiftly_install\", \"description\": \"** - Install Swift toolchains from different channels\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for swiftly_install\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"swiftly_list\", \"description\": \"** - List installed Swift toolchains\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for swiftly_list\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"swiftly_list_available\", \"description\": \"** - List available Swift versions to install\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for swiftly_list_available\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"swiftly_use\", \"description\": \"** - Switch between Swift versions globally or per-project\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for swiftly_use\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"swiftly_run\", \"description\": \"** - Run commands with specific Swift versions\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for swiftly_run\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"swiftly_uninstall\", \"description\": \"** - Remove Swift toolchains\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for swiftly_uninstall\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"swift_debug_session\", \"description\": \"** - Guided debugging session setup with target-specific recommendations\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for swift_debug_session\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"swift_build_analysis\", \"description\": \"** - Intelligent build error analysis and solution suggestions\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for swift_build_analysis\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"ListTools\", \"description\": \"handler in `main.swift`\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for ListTools\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"CallTool\", \"description\": \"switch statement\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for CallTool\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"swiftly\", \"description\": \"to manage Swift versions if you have multiple installations.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for swiftly\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}], \"tools_count\": 21, \"homepage\": \"\", \"url\": \"https://github.com/edgeengineer/swift-developer-mcp-server\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "edgeengineer/swift-developer-mcp-server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"Augmented-Nature-PubChem-MCP-Server\", \"server_id\": \"augmented-nature/augmented-nature-pubchem-mcp-server\", \"description\": \"\", \"readme\": \"![PubChem MCP Server Logo](pubchem-mcp-server-logo.png)\\n# Unofficial PubChem MCP Server\\n\\nA comprehensive Model Context Protocol (MCP) server for accessing the PubChem chemical database. This server provides access to over 110 million chemical compounds with extensive molecular properties, bioassay data, and chemical informatics tools.\\n\\n## Features\\n\\n### \\ud83d\\udd0d **Chemical Search & Retrieval (6 tools)**\\n\\n- **search_compounds** - Search by name, CAS number, formula, or identifier\\n- **get_compound_info** - Detailed compound information by CID\\n- **search_by_smiles** - Exact SMILES string matching\\n- **search_by_inchi** - InChI/InChI key search\\n- **search_by_cas_number** - CAS Registry Number lookup\\n- **get_compound_synonyms** - All names and synonyms\\n\\n### \\ud83e\\uddec **Structure Analysis & Similarity (5 tools)**\\n\\n- **search_similar_compounds** - Tanimoto similarity search\\n- **substructure_search** - Find compounds containing substructures\\n- **superstructure_search** - Find larger compounds containing query\\n- **get_3d_conformers** - 3D structural information\\n- **analyze_stereochemistry** - Chirality and isomer analysis\\n\\n### \\u2697\\ufe0f **Chemical Properties & Descriptors (6 tools)**\\n\\n- **get_compound_properties** - Molecular weight, logP, TPSA, etc.\\n- **calculate_descriptors** - Comprehensive molecular descriptors\\n- **predict_admet_properties** - ADMET predictions\\n- **assess_drug_likeness** - Lipinski Rule of Five analysis\\n- **analyze_molecular_complexity** - Synthetic accessibility\\n- **get_pharmacophore_features** - Pharmacophore mapping\\n\\n### \\ud83e\\uddea **Bioassay & Activity Data (5 tools)**\\n\\n- **search_bioassays** - Find biological assays\\n- **get_assay_info** - Detailed assay protocols\\n- **get_compound_bioactivities** - All activity data for compounds\\n- **search_by_target** - Find compounds tested against targets\\n- **compare_activity_profiles** - Cross-compound comparisons\\n\\n### \\u26a0\\ufe0f **Safety & Toxicity (4 tools)**\\n\\n- **get_safety_data** - GHS hazard classifications\\n- **get_toxicity_info** - LD50, carcinogenicity data\\n- **assess_environmental_fate** - Biodegradation analysis\\n- **get_regulatory_info** - FDA, EPA regulations\\n\\n### \\ud83d\\udd17 **Cross-References & Integration (4 tools)**\\n\\n- **get_external_references** - Links to ChEMBL, DrugBank, etc.\\n- **search_patents** - Chemical patent information\\n- **get_literature_references** - PubMed citations\\n- **batch_compound_lookup** - Bulk processing (up to 200 compounds)\\n\\n## Resource Templates\\n\\nAccess PubChem data through URI patterns:\\n\\n- `pubchem://compound/{cid}` - Complete compound data\\n- `pubchem://structure/{cid}` - 2D/3D structure information\\n- `pubchem://properties/{cid}` - Molecular properties\\n- `pubchem://bioassay/{aid}` - Bioassay data\\n- `pubchem://similarity/{smiles}` - Similarity search results\\n- `pubchem://safety/{cid}` - Safety and toxicity data\\n\\n## Installation\\n\\n```bash\\n# Clone or create the server directory\\ncd pubchem-server\\n\\n# Install dependencies\\nnpm install\\n\\n# Build the server\\nnpm run build\\n\\n# Run the server\\nnpm start\\n```\\n\\n## Usage\\n\\n### Basic Compound Search\\n\\n```javascript\\n// Search for compounds by name\\n{\\n  \\\"tool\\\": \\\"search_compounds\\\",\\n  \\\"arguments\\\": {\\n    \\\"query\\\": \\\"aspirin\\\",\\n    \\\"max_records\\\": 10\\n  }\\n}\\n\\n// Get detailed compound information\\n{\\n  \\\"tool\\\": \\\"get_compound_info\\\",\\n  \\\"arguments\\\": {\\n    \\\"cid\\\": 2244\\n  }\\n}\\n```\\n\\n### Structure Analysis\\n\\n```javascript\\n// Find similar compounds\\n{\\n  \\\"tool\\\": \\\"search_similar_compounds\\\",\\n  \\\"arguments\\\": {\\n    \\\"smiles\\\": \\\"CC(=O)OC1=CC=CC=C1C(=O)O\\\",\\n    \\\"threshold\\\": 85,\\n    \\\"max_records\\\": 50\\n  }\\n}\\n\\n// Analyze molecular properties\\n{\\n  \\\"tool\\\": \\\"get_compound_properties\\\",\\n  \\\"arguments\\\": {\\n    \\\"cid\\\": 2244,\\n    \\\"properties\\\": [\\\"MolecularWeight\\\", \\\"XLogP\\\", \\\"TPSA\\\"]\\n  }\\n}\\n```\\n\\n### Bioactivity Analysis\\n\\n```javascript\\n// Get bioassay information\\n{\\n  \\\"tool\\\": \\\"get_assay_info\\\",\\n  \\\"arguments\\\": {\\n    \\\"aid\\\": 1159607\\n  }\\n}\\n\\n// Search compounds by target\\n{\\n  \\\"tool\\\": \\\"search_by_target\\\",\\n  \\\"arguments\\\": {\\n    \\\"target\\\": \\\"cyclooxygenase\\\",\\n    \\\"max_records\\\": 100\\n  }\\n}\\n```\\n\\n### Safety Information\\n\\n```javascript\\n// Get safety classifications\\n{\\n  \\\"tool\\\": \\\"get_safety_data\\\",\\n  \\\"arguments\\\": {\\n    \\\"cid\\\": 2244\\n  }\\n}\\n```\\n\\n### Batch Processing\\n\\n```javascript\\n// Process multiple compounds\\n{\\n  \\\"tool\\\": \\\"batch_compound_lookup\\\",\\n  \\\"arguments\\\": {\\n    \\\"cids\\\": [2244, 5090, 3672],\\n    \\\"operation\\\": \\\"property\\\"\\n  }\\n}\\n```\\n\\n## Integration with Other MCP Servers\\n\\nThis PubChem server integrates perfectly with other chemical/biological databases:\\n\\n### Complete Chemical Informatics Pipeline\\n\\n```\\n1. Target Discovery: UniProt \\u2192 STRING \\u2192 AlphaFold\\n2. Chemical Discovery: PubChem \\u2190 \\u2192 ChEMBL\\n3. Complete Workflow: Protein \\u2192 Structure \\u2192 Interactions \\u2192 Small Molecules \\u2192 Bioactivity\\n```\\n\\n### Cross-Database Workflows\\n\\n- **UniProt \\u2192 PubChem**: Find protein targets \\u2192 Find small molecule ligands\\n- **PubChem \\u2192 ChEMBL**: Discover compounds \\u2192 Analyze bioactivity data\\n- **STRING \\u2192 PubChem**: Protein interactions \\u2192 Chemical modulators\\n\\n## API Rate Limits\\n\\nPubChem API guidelines:\\n\\n- **5 requests per second**\\n- **400 requests per minute maximum\\n[...truncated for length...]\", \"tools\": [], \"tools_count\": 0, \"homepage\": \"\", \"url\": \"https://github.com/Augmented-Nature/Augmented-Nature-PubChem-MCP-Server\", \"topics\": [\"cheminformatics\", \"mcp-server\", \"pubchem\"], \"data_sources\": [\"github\"]}", "target": "", "id": "augmented-nature/augmented-nature-pubchem-mcp-server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"quizAgent\", \"server_id\": \"ridiculousbuffal/quizagent\", \"description\": \"AI-empowered QuizAgent support OPENAI ,MCP Server ,SSO login\", \"readme\": \"# Future Quiz\\n\\n> Future Quiz \\u662f\\u4e00\\u4e2a\\u73b0\\u4ee3\\u5316\\u7684\\u667a\\u80fd\\u95ee\\u5377\\u7cfb\\u7edf\\uff0c\\u5229\\u7528\\u4eba\\u5de5\\u667a\\u80fd\\u6280\\u672f\\u5e2e\\u52a9\\u7528\\u6237\\u8f7b\\u677e\\u521b\\u5efa\\u3001\\u7ba1\\u7406\\u548c\\u5206\\u6790\\u95ee\\u5377\\u3002\\u7cfb\\u7edf\\u96c6\\u6210\\u4e86\\u5148\\u8fdb\\u7684 AI\\n> \\u80fd\\u529b\\uff0c\\u652f\\u6301\\u667a\\u80fd\\u751f\\u6210\\u95ee\\u9898\\u548c\\u6df1\\u5ea6\\u5206\\u6790\\u95ee\\u5377\\u7ed3\\u679c\\uff0c\\u5927\\u5e45\\u63d0\\u5347\\u4e86\\u95ee\\u5377\\u8bbe\\u8ba1\\u548c\\u6570\\u636e\\u5206\\u6790\\u7684\\u6548\\u7387\\u3002\\n\\n> \\ud83c\\udd98 \\u8be5\\u7cfb\\u7edf\\u65e8\\u5728\\u670d\\u52a1\\u4e1c\\u534e\\u5927\\u5b662025\\u5e74\\u8f6f\\u4ef6\\u5de5\\u7a0b\\u5b9e\\u8bad\\u8bfe\\u7a0b,\\u65e8\\u5728\\u63a2\\u7d22AI\\u5728\\u95ee\\u5377\\u9886\\u57df\\u7684\\u5e94\\u7528,\\u6211\\u4eec\\u7ed9\\u7cfb\\u7edf\\u914d\\u5907\\u4e86\\u57fa\\u672c\\u7684\\u5b89\\u5168\\u8ba4\\u8bc1\\u529f\\u80fd,\\u4f46\\u90e8\\u5206\\u529f\\u80fd\\u5c1a\\u672a\\u5b8c\\u5584\\uff0c\\u5207\\u52ff\\u76f4\\u63a5\\u7528\\u4e8e\\u751f\\u4ea7\\u73af\\u5883\\u3002\\n\\n[![Ask DeepWiki](https://deepwiki.com/badge.svg)](https://deepwiki.com/RidiculousBuffal/quizAgent)\\n\\n# \\u9879\\u76ee\\u5c55\\u793a\\n\\n> PPT\\u4e0b\\u8f7d\\u94fe\\u63a5:[\\u3010\\u91d1\\u5c71\\u6587\\u6863 | WPS\\u4e91\\u6587\\u6863\\u3011 FutureQuiz ](https://kdocs.cn/l/cdnORUBURMQn)\\n\\n> \\u89c6\\u9891\\u6f14\\u793a:\\n\\n[![\\u89c6\\u9891\\u6807\\u9898](https://zlcminio.ridiculousbuffal.com/dhu/cover.png)](https://zlcminio.ridiculousbuffal.com/dhu/futurequiz.mp4)\\n\\n## Logto \\u5355\\u70b9\\u767b\\u5f55\\n\\n- \\u7cfb\\u7edf\\u96c6\\u6210\\u57fa\\u672c\\u7684`logto`\\u5355\\u70b9\\u767b\\u5f55\\uff0c\\u652f\\u6301\\u5728`logto`\\u4e2d\\u4f7f\\u7528\\u90ae\\u7bb1\\u767b\\u5f55,`github`\\u767b\\u5f55\\u7b49.\\n  ![logto1.png](img%2Flogto1.png)\\n- \\u540c\\u65f6\\u4f7f\\u7528Satoken\\u6765\\u5411\\u524d\\u7aef\\u7b7e\\u53d1`token`,\\u5177\\u4f53\\u67b6\\u6784\\u5982\\u4e0b\\n  ![logto2.png](img%2Flogto2.png)\\n- logto \\u9700\\u8981\\u4f7f\\u7528\\u81ea\\u5b9a\\u4e49JWT,\\u8bbe\\u7f6eAPI\\u7aef\\u70b9\\n  ![img.png](img%2Flogto%2Fimg.png)\\n  ![img_1.png](img%2Flogto%2Fimg_1.png)\\n\\n## \\u95ee\\u5377\\u4e2d\\u5fc3\\n\\n- \\u63d0\\u4f9b\\u57fa\\u672c\\u7684\\u95ee\\u5377\\u4e2d\\u5fc3\\u7ba1\\u7406\\u95ee\\u5377\\n  ![quizCenter.png](img%2FquizCenter.png)\\n- \\u652f\\u6301\\u8bbe\\u7f6e\\u95ee\\u5377\\u6807\\u9898,\\u5f00\\u59cb\\u4e0e\\u7ed3\\u675f\\u65e5\\u671f\\u7b49,\\u4e5f\\u652f\\u6301\\u5bf9\\u5176\\u8fdb\\u884c\\u7f16\\u8f91\\u548c\\u5220\\u9664\\n  ![quizCenter2.png](img%2FquizCenter2.png)\\n\\n## MainDesign \\u95ee\\u5377\\u8bbe\\u8ba1\\u4e2d\\u5fc3\\n\\n- \\u652f\\u6301\\u5355\\u9009,\\u591a\\u9009,\\u586b\\u7a7a,\\u7b80\\u7b54,\\u6587\\u4ef6\\u4e0a\\u4f20\\n  ![Snipaste_2025-05-05_21-13-07.png](img%2Fquizdesign%2FSnipaste_2025-05-05_21-13-07.png)\\n  ![Snipaste_2025-05-05_21-13-13.png](img%2Fquizdesign%2FSnipaste_2025-05-05_21-13-13.png)\\n  ![Snipaste_2025-05-05_21-13-20.png](img%2Fquizdesign%2FSnipaste_2025-05-05_21-13-20.png)\\n  ![Snipaste_2025-05-05_21-13-28.png](img%2Fquizdesign%2FSnipaste_2025-05-05_21-13-28.png)\\n  ![Snipaste_2025-05-05_21-13-34.png](img%2Fquizdesign%2FSnipaste_2025-05-05_21-13-34.png)\\n- \\u63d0\\u4f9b\\u9884\\u89c8\\u7ec4\\u4ef6(\\u4e5f\\u662f\\u4f5c\\u7b54\\u7ec4\\u4ef6\\u5728\\u7ebf\\u9884\\u89c8)\\n  ![Snipaste_2025-05-05_21-15-17.png](img%2Fquizdesign%2Fpreview%2FSnipaste_2025-05-05_21-15-17.png)\\n  ![Snipaste_2025-05-05_21-15-21.png](img%2Fquizdesign%2Fpreview%2FSnipaste_2025-05-05_21-15-21.png)\\n  ![Snipaste_2025-05-05_21-15-24.png](img%2Fquizdesign%2Fpreview%2FSnipaste_2025-05-05_21-15-24.png)\\n- \\u6587\\u4ef6\\u4e0a\\u4f20\\u9898\\u652f\\u6301\\u4f7f\\u7528`llama-index` \\u5bf9pdf,doc,docx,ppt,pptx,xls,xlsx\\u6587\\u4ef6\\u8f6c\\u6362\\u6210markdown \\u65b9\\u4fbfAI\\u5206\\u6790\\n  ![Snipaste_2025-05-05_21-15-35.png](img%2Fquizdesign%2Fpreview%2FSnipaste_2025-05-05_21-15-35.png)\\n- \\u7b80\\u7b54\\u9898\\u652f\\u6301\\u5168\\u529f\\u80fd\\u6587\\u672c`markdown`\\u7f16\\u8f91\\u5668\\n  ![b73d69f421bd1fe848b6693c91058cb2.png](img%2Fquizdesign%2Fpreview%2Fb73d69f421bd1fe848b6693c91058cb2.png)\\n\\n## AI\\u9a71\\u52a8\\u7684\\u95ee\\u5377\\u751f\\u6210\\n\\n- \\u652f\\u6301\\u5524\\u51faAI\\u9762\\u677f\\u667a\\u80fd\\u751f\\u6210\\u9898\\u76ee\\n  ![Snipaste_2025-04-30_14-46-59.png](img%2Fquizdesign%2FSnipaste_2025-04-30_14-46-59.png)\\n\\n## \\u95ee\\u5377\\u53d1\\u5e03\\u4e0e\\u4f5c\\u7b54\\n\\n- \\u652f\\u6301\\u914d\\u7f6e\\u516c\\u5f00\\u8bbf\\u95ee\\u4e0e\\u6307\\u5b9a\\u4eba\\u8bbf\\u95ee2\\u79cd\\u6743\\u9650\\n  ![img.png](img%2Fquizpublish%2Fimg.png)\\n\\n## \\u95ee\\u5377\\u5e7f\\u573a\\n\\n- \\u516c\\u5f00\\u7684\\u95ee\\u5377\\u652f\\u6301\\u901a\\u8fc7\\u95ee\\u5377\\u5e7f\\u573a\\u76f4\\u63a5\\u53c2\\u4e0e\\u8c03\\u67e5\\n  ![img.png](img%2Fquizdesign%2FquizSquare%2Fimg.png)\\n\\n## \\u95ee\\u5377\\u7684\\u56de\\u6536/AI\\u5206\\u6790\\n\\n- \\u9488\\u5bf9\\u81f3\\u5c11\\u67091\\u4efd\\u56de\\u7b54\\u7684\\u95ee\\u5377\\u53ef\\u5728`\\u6536\\u5230\\u7684\\u95ee\\u5377`\\u677f\\u5757\\u67e5\\u770b\\n- \\u652f\\u6301AI\\u5bf9\\u56de\\u6536\\u7ed3\\u679c\\u8fdb\\u884c\\u5206\\u6790,markdown\\u8f93\\u51fa,mermaid\\u516c\\u5f0f\\u6e32\\u67d3\\n- \\u5bf9\\u4e8e\\u4f7f\\u7528llama-index\\u5904\\u7406\\u7684\\u6587\\u4ef6\\u9898,\\u9664\\u4e86\\u652f\\u6301\\u4e0b\\u8f7d\\u4ee5\\u5916,\\u8fd8\\u652f\\u6301\\u663e\\u793amarkdown\\u5185\\u5bb9\\n  ![img.png](img%2Fquizdesign%2Fdisplay%2Fimg.png)\\n  ![Snipaste_2025-05-05_21-23-22.png](img%2Fquizdesign%2Fdisplay%2FSnipaste_2025-05-05_21-23-22.png)\\n  ![Snipaste_2025-05-05_21-23-26.png](img%2Fquizdesign%2Fdisplay%2FSnipaste_2025-05-05_21-23-26.png)\\n  ![Snipaste_2025-05-05_21-23-34.png](img%2Fquizdesign%2Fdisplay%2FSnipaste_2025-05-05_21-23-34.png)\\n  ![Snipaste_2025-05-05_21-23-44.png](img%2Fquizdesign%2Fdisplay%2FSnipaste_2025-05-05_21-23-44.png)\\n\\n## \\u95ee\\u5377\\u5206\\u6790\\u56fe\\u8868\\n\\n- \\u5bf9\\u95ee\\u5377\\u67091\\u4e2a\\u57fa\\u672c\\u7684\\u5206\\u6790,\\u5305\\u62ec\\u751f\\u6210\\u997c\\u56fe,\\u67f1\\u72b6\\u56fe,\\u8bcd\\u4e91\\u56fe\\u7b49\\n  ![Snipaste_2025-05-05_21-26-35.png](img%2Fquizdesign%2Fanalysis%2FSnipaste_2025-05-05_21-26-35.png)\\n  ![Snipaste_2025-05-05_21-26-46.png](img%2Fquizdesign%2Fanalysis%2FSnipaste_2025-05-05_21-26-46.png)\\n  ![Snipaste_2025-05-05_21-26-54.png](img%2Fquizdesign%2Fanalysis%2FSnipaste_2025-05-05_21-26-54.png)\\n\\n## \\u95ee\\u5377\\u56de\\u7b54\\u9875\\u9762\\n\\n![Snipaste_2025-05-05_21-40-19.png](img%2FSnipaste_2025-05-05_21-40-19.png)\\n![img_1.png](img%2Fimg_1.png)\\n\\n## MCP\\u652f\\u6301\\n\\n- \\u4ece0.1.7\\u7248\\u672c\\u4ee5\\u540ejava\\u5ba2\\u6237\\u7aef\\u5185\\u7f6eMcp\\u670d\\u52a1\\u5668,\\u4f7f\\u7528java\\u540e\\u53f0\\u5730\\u5740+`/sse`\\u94fe\\u63a5\\u5373\\u53ef\\n  ![img.png](img%2Fmcp%2Fimg.png)\\n  ![img_2.png](img%2Fmcp%2Fimg_2.png)\\n  ![img_1.png](img%2Fmcp%2Fimg_1.png)\\n\\n## \\u6574\\u4f53\\u67b6\\u6784\\n\\n- \\u524d\\u7aef\\u6574\\u4f53\\u662f\\u4e00\\u4e2a\\u5de5\\u5382\\u6a21\\u5f0f,\\u5982\\u56fe\\n  ![img.png](img%2Fquizdesign%2Fimg.png)\\n\\n## \\u7528\\u6237\\u5934\\u50cf\\u4fee\\u6539\\n\\n- \\u652f\\u6301\\u5728\\u6211\\u7684\\u8d26\\u6237\\u5904\\u4fee\\u6539\\u5934\\u50cf\\n  ![img.png](img%2Fimg.png)\\n\\n# \\u6784\\u5efa\\u548c\\u90e8\\u7f72\\n\\n## \\u524d\\u63d0\\u6761\\u4ef6\\n\\n- \\u4e00\\u4e2alogto\\u5b9e\\u4f8b\\n- \\u4e00\\u4e2amysql\\u5b9e\\u4f8b\\n- \\u4e00\\u4e2aminioS3\\u5b9e\\u4f8b\\n- Aihubmix API-KEY\\n- \\u4e00\\u4e2aredis\\u5b9e\\u4f8b\\n\\n## \\u6570\\u636e\\u5e93\\n\\n- \\u4f7f\\u7528[full-0505.sql](src%2Fmain%2Fresources%2Fsql%2Ffull-0505.sql)\\u521b\\u5efa\\u6570\\u636e\\u5e93\\n\\n## \\u542f\\u52a8\\u540e\\u7aef\\n\\n- \\u9996\\u5148\\u51c6\\u5907`application.yaml`\\u53c2\\u8003:\\n  [application.example.yaml](src%2Fmain%2Fresources%2Fapplication.example.yaml)\\n- \\u53ef\\u4ee5\\u4f7f\\u7528\\u6211\\u4eec\\u6784\\u5efa\\u7684`docker`\\u955c\\u50cf\\n\\n```bash\\ndocker run -d \\\\\\n  --name futurequizbe \\\\\\n  -v /path/to/your/application.yaml:/etc/featurequiz/application.yaml \\\\\\n  ridiculousbuffalo/futurequizbe:latest\\n```\\n\\n## \\u542f\\u52a8\\u524d\\u7aef\\n\\n> \\ud83c\\udd98\\ud83c\\udd98\\ud83c\\udd98\\u6ce8\\u610f\\u8be5\\u7cfb\\u7edf\\u7684`llama_index API_KEY`\\u4f1a\\u76f4\\u63a5\\u66b4\\u9732\\u5728\\u524d\\u7aef\\u7684\\u73af\\u5883\\u53d8\\u91cf\\u4e2d\\n\\n```bash\\ndocker run -d --name futurequizfe \\\\\\n  -p 8080:80 \\\\\\n  -e VITE_APP_LOGTO_ENDPOINT=https://logto.dev \\\\\\n  -e VITE_APP_LOGTO_APPID=abc123 \\\\\\n  -e VITE_APP_URL=https://myapp.example \\\\  # \\u524d\\u7aef\\u7684\\u57df\\u540d or url\\n  -e VITE_APP_API_URL=https://api.example \\\\  # \\u540e\\u7aef\\u7684url\\n  -e VITE_APP_LLAMA_INDEX_BASE_URL= /api/llamaindex \\\\ # \\u56fa\\u5b9a\\u7684\\n  -e VITE_APP_LLAMA_INDEX_KEY=sk-demo... \\\\\\n  ridiculousbuffalo/futurequizfe:latest\\n```\\n\\n## \\u4ee3\\u7801\\u884c\\u7edf\\u8ba1\\n`.\\\\cloc-2.02.exe . --exclude-dir=.venv,node_modules,.idea,.git,.mvn,dist --exclude-ext=xml,json`\\n```markdown\\n-------------------------------------------------------------------------------\\nLanguage                     files          blank        comment           code\\n-------------------------------------------------------------------------------\\nTy\\n[...truncated for length...]\", \"tools\": [{\"name\": \"logto\", \"description\": \"\\u5355\\u70b9\\u767b\\u5f55\\uff0c\\u652f\\u6301\\u5728`logto`\\u4e2d\\u4f7f\\u7528\\u90ae\\u7bb1\\u767b\\u5f55,`github`\\u767b\\u5f55\\u7b49.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for logto\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"token\", \"description\": \",\\u5177\\u4f53\\u67b6\\u6784\\u5982\\u4e0b\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for token\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"markdown\", \"description\": \"\\u7f16\\u8f91\\u5668\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for markdown\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"docker\", \"description\": \"\\u955c\\u50cf\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for docker\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 4, \"homepage\": \"https://futurequizfe.zeabur.app\", \"url\": \"https://github.com/RidiculousBuffal/quizAgent\", \"topics\": [\"ai\", \"form\", \"quizapp\", \"sso\"], \"data_sources\": [\"github\"]}", "target": "", "id": "ridiculousbuffal/quizagent", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"mcp-server\", \"server_id\": \"hubspot/mcp-server\", \"description\": \"MCP Server for HubSpot\", \"readme\": \"\", \"tools\": [], \"tools_count\": 0, \"homepage\": \"\", \"url\": \"https://github.com/HubSpot/mcp-server\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "hubspot/mcp-server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"mcp-servers-jos\", \"server_id\": \"josmithiii/mcp-servers-jos\", \"description\": \"MCP servers by JOS, starting from MCP Template https://github.com/josmithiii/mcp-template\", \"readme\": \"# mcp-servers-jos\\n\\n[Model Context\\nProtocol](https://modelcontextprotocol.io/tutorials/building-mcp-with-llms)\\n(MCP) servers by [JOS](https://github.com/josmithiii), starting from\\nan [MCP Template](https://github.com/josmithiii/mcp-template)\\n\\n## Contents\\n\\n* [juce-docs-mcp-server](./juce-docs-mcp-server/README.md) - access JUCE Framework C++ class documentation\\n\\n\", \"tools\": [], \"tools_count\": 0, \"homepage\": \"\", \"url\": \"https://github.com/josmithiii/mcp-servers-jos\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "josmithiii/mcp-servers-jos", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"craftgate_mcp_server\", \"server_id\": \"semihshn/craftgate_mcp_server\", \"description\": \"Bu MCP sunucu projesinde, Craftgate\\u2019in \\u00f6deme listeleme arac\\u0131 entegre edilmi\\u015ftir. Bu ara\\u00e7 sayesinde \\u00f6demeler sorgulanabilir ve \\u00f6demeler hakk\\u0131nda LLM (Large Language Model) deste\\u011fiyle analiz yap\\u0131labilir.\", \"readme\": \"# MCP Craftgate Projesi\\n\\n## Proje Nedir?\\n\\nBu proje, **Craftgate** \\u00f6deme altyap\\u0131s\\u0131 ile entegre \\u00e7al\\u0131\\u015fan bir **MCP (Model Context Protocol) sunucusudur**. Yani, \\u00f6deme i\\u015flemlerini sorgulamak, raporlamak ve y\\u00f6netmek i\\u00e7in bir aray\\u00fcz sa\\u011flar. Proje, Spring Boot ile yaz\\u0131lm\\u0131\\u015ft\\u0131r ve Craftgate API'sine ba\\u011flanarak \\u00f6deme verilerini i\\u015fler.\\n\\nK\\u0131saca:\\n- Craftgate ile yap\\u0131lan \\u00f6demeleri sorgulamak ve raporlamak i\\u00e7in kullan\\u0131l\\u0131r.\\n- Bir sunucu olarak \\u00e7al\\u0131\\u015f\\u0131r, d\\u0131\\u015far\\u0131dan gelen istekleri i\\u015fler.\\n- MCP protokol\\u00fc ile uyumludur.\\n\\n## Proje Yap\\u0131s\\u0131\\n\\n- `src/main/java/`: Java kaynak kodlar\\u0131 burada.\\n- `src/main/resources/application.properties`: Konfig\\u00fcrasyon dosyas\\u0131 (API anahtarlar\\u0131 burada tutulur).\\n- `build.gradle`: Projenin ba\\u011f\\u0131ml\\u0131l\\u0131klar\\u0131 ve derleme ayarlar\\u0131.\\n- `build/libs/`: Derlenen JAR dosyas\\u0131 burada olu\\u015fur.\\n\\n## Gereksinimler\\n\\n- Java 17 veya \\u00fczeri\\n- Gradle (veya projenin i\\u00e7indeki `gradlew` scripti)\\n- \\u0130nternet ba\\u011flant\\u0131s\\u0131 (ba\\u011f\\u0131ml\\u0131l\\u0131klar\\u0131 indirmek i\\u00e7in)\\n\\n## Ad\\u0131m Ad\\u0131m Kurulum ve \\u00c7al\\u0131\\u015ft\\u0131rma\\n\\n### 1. Kaynak Kodunu \\u0130ndir\\n\\nProjeyi bir klas\\u00f6re klonla veya indir.\\n\\n### 2. API Anahtarlar\\u0131n\\u0131 Ayarla\\n\\n`src/main/resources/application.properties` dosyas\\u0131nda a\\u015fa\\u011f\\u0131daki sat\\u0131rlar\\u0131 g\\u00f6receksin:\\n\\n```\\ncraftgate.api-key=dummy-api-key\\ncraftgate.secret-key=dummy-secret-key\\ncraftgate.base-url=https://sandbox-api.craftgate.io\\n```\\n\\nGer\\u00e7ek anahtarlar\\u0131n\\u0131 kullanacaksan, `dummy-api-key` ve `dummy-secret-key` yerine kendi Craftgate API anahtarlar\\u0131n\\u0131 yazmal\\u0131s\\u0131n. (Test i\\u00e7in dummy de\\u011ferlerle b\\u0131rakabilirsin.)\\n\\n### 3. JAR Dosyas\\u0131n\\u0131 Olu\\u015ftur\\n\\nTerminali a\\u00e7 ve proje klas\\u00f6r\\u00fcne gir. Ard\\u0131ndan a\\u015fa\\u011f\\u0131daki komutu \\u00e7al\\u0131\\u015ft\\u0131r:\\n\\n```\\n./gradlew clean build\\n```\\n\\n- Windows kullan\\u0131yorsan: `gradlew.bat clean build`\\n- Bu komut, projenin derlenmesini ve \\u00e7al\\u0131\\u015ft\\u0131r\\u0131labilir bir JAR dosyas\\u0131 olu\\u015fturulmas\\u0131n\\u0131 sa\\u011flar.\\n\\nOlu\\u015fan JAR dosyas\\u0131n\\u0131 \\u015fu klas\\u00f6rde bulacaks\\u0131n:\\n\\n```\\nbuild/libs/mcp_craftgate-0.0.1-SNAPSHOT.jar\\n```\\n\\n### 4. JAR Dosyas\\u0131n\\u0131 \\u00c7al\\u0131\\u015ft\\u0131r\\n\\nTerminalde a\\u015fa\\u011f\\u0131daki komutu kullanabilirsin:\\n\\n```\\njava -jar build/libs/mcp_craftgate-0.0.1-SNAPSHOT.jar\\n```\\n\\nBu komut, MCP Craftgate sunucusunu ba\\u015flat\\u0131r.\\n\\n### 5. MCP Konfig\\u00fcrasyon Dosyas\\u0131 Nas\\u0131l Olmal\\u0131?\\n\\nMCP ortam\\u0131nda bu JAR dosyas\\u0131n\\u0131 kullanmak i\\u00e7in, konfig\\u00fcrasyon dosyan\\u0131 a\\u015fa\\u011f\\u0131daki gibi ayarlamal\\u0131s\\u0131n. \\u00d6zellikle `command` ve `args` alanlar\\u0131na dikkat et:\\n\\n```json\\n\\\"craftgate-mcp\\\": {\\n  \\\"command\\\": \\\"java\\\",\\n  \\\"args\\\": [\\n    \\\"-Dspring.ai.mcp.server.stdio=true\\\",\\n    \\\"-jar\\\",\\n    \\\"/tam/yol/build/libs/mcp_craftgate-0.0.1-SNAPSHOT.jar\\\"\\n  ]\\n}\\n```\\n\\n- `command`: \\u00c7al\\u0131\\u015ft\\u0131r\\u0131lacak ana komut (burada `java`).\\n- `args`: Komuta g\\u00f6nderilecek arg\\u00fcmanlar. \\n  - `-Dspring.ai.mcp.server.stdio=true` parametresi MCP ile uyumlu \\u00e7al\\u0131\\u015fmas\\u0131 i\\u00e7in gereklidir.\\n  - `-jar` ve ard\\u0131ndan JAR dosyas\\u0131n\\u0131n tam yolu gelmelidir.\\n- `/tam/yol/` k\\u0131sm\\u0131n\\u0131 kendi bilgisayar\\u0131ndaki ger\\u00e7ek dizin ile de\\u011fi\\u015ftirmen gerekir.\\n\\n> MCP ortam\\u0131nda bu konfig\\u00fcrasyon ile Craftgate arac\\u0131 otomatik olarak ba\\u015flat\\u0131l\\u0131r ve kullan\\u0131labilir.\\n\\n### 6. Sunucunun \\u00c7al\\u0131\\u015ft\\u0131\\u011f\\u0131n\\u0131 Kontrol Et\\n\\nSunucu ba\\u015flat\\u0131ld\\u0131ktan sonra, loglarda hata yoksa ve port \\u00e7ak\\u0131\\u015fmas\\u0131 ya\\u015fanm\\u0131yorsa, MCP ortam\\u0131nda bu arac\\u0131 kullanabilirsin.\\n\\n---\\n\\n## S\\u0131k\\u00e7a Sorulan Sorular\\n\\n**S: API anahtarlar\\u0131m\\u0131 nereden alaca\\u011f\\u0131m?**  \\nC: Craftgate panelinden veya y\\u00f6neticinden alabilirsin.\\n\\n**S: JAR dosyas\\u0131n\\u0131 ba\\u015fka bir yere ta\\u015f\\u0131rsam ne olur?**  \\nC: MCP konfig\\u00fcrasyon dosyas\\u0131ndaki JAR yolunu yeni konuma g\\u00f6re g\\u00fcncellemelisin.\\n\\n**S: Ba\\u011f\\u0131ml\\u0131l\\u0131klar otomatik mi iniyor?**  \\nC: Evet, Gradle ilk derlemede t\\u00fcm ba\\u011f\\u0131ml\\u0131l\\u0131klar\\u0131 otomatik indirir.\\n\\n---\\n\\n## Ekstra Bilgiler\\n\\n- Proje Spring Boot ile yaz\\u0131lm\\u0131\\u015ft\\u0131r, yani klasik bir Java uygulamas\\u0131 gibi \\u00e7al\\u0131\\u015f\\u0131r.\\n- Testler i\\u00e7in `./gradlew test` komutunu kullanabilirsin.\\n- Loglar, `model-context-protocol/craftgate/starter-stdio-server/target/mcp-craftgate-stdio-server.log` dosyas\\u0131na yaz\\u0131l\\u0131r.\\n\\n---\\n\\nT\\u00fcm ad\\u0131mlar\\u0131 takip ederek projenin JAR dosyas\\u0131n\\u0131 olu\\u015fturabilir ve MCP ortam\\u0131nda kullanabilirsin. Tak\\u0131ld\\u0131\\u011f\\u0131n bir yer olursa, ad\\u0131m ad\\u0131m tekrar kontrol edebilir veya yard\\u0131m isteyebilirsin! \", \"tools\": [{\"name\": \"gradlew\", \"description\": \"scripti)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for gradlew\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"command\", \"description\": \"ve `args` alanlar\\u0131na dikkat et:\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for command\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"args\", \"description\": \"Komuta g\\u00f6nderilecek arg\\u00fcmanlar.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for args\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 3, \"homepage\": \"\", \"url\": \"https://github.com/semihshn/craftgate_mcp_server\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "semihshn/craftgate_mcp_server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"mcp-fastify-server\", \"server_id\": \"bgaurav7/mcp-fastify-server\", \"description\": \"Sample Model Context Protocol (MCP) Server\", \"readme\": \"# mcp-fastify-server\\n\", \"tools\": [], \"tools_count\": 0, \"homepage\": \"\", \"url\": \"https://github.com/bgaurav7/mcp-fastify-server\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "bgaurav7/mcp-fastify-server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"browser-mcp-over-cdp\", \"server_id\": \"dumitrubogdanmihai/browser-mcp-over-cdp\", \"description\": \"MCP Server that manages a Chrome browser using the Chrome DevTools Protocol (CDP)\", \"readme\": \"# Browser MCP over CDP\\n\\nMCP Server that manages a Chrome browser using the Chrome DevTools Protocol (CDP)\\n\\nThis project exposes tools to navigate, interact and access a browser tab. The browser is controller using CDP and because of this:\\n1. the page is exported as full height screenshoot, accessibility tree and enriched deep DOM\\n    1. the screenshoot captures whole page, not just the visible scrolled are\\n    2. the accessibility tree contains most relevand parts\\n    3. the enriched deep DOM contains\\n        1. nested iframes, shadow DOM, pseudo-elements, etc.\\n        3. per element attached listeners (for e.g. onClick, onKeyDown, etc), including the callback function code (for better or for worse)\\n        4. per element relevant resolved styles\\n2. the page is interactable via click, keys and input value update functions \\n3. the page is navigable with basic open URL, back, forward and reload functions\\n\\n![Page visual snapshot enhanced with boxes for interactible elemenents](./doc/visual-enhanced-snapshot.png.png)\\n![Page text snapshot enhanced with event listeners for interactible elemenents](./doc/text-enhanced-snapshot.png)\\n![Page text snapshot footer that contains page links](./doc/text-enhanced-snapshot-footer.png)\\n\\n# Prereq\\n1. NodeJS\\n\\n# Use with local Chrome\\n1. npm install\\n4. put config-example.json configuration inside Cloude, VS Code, Cursor, wherever you want.\\n    1. for Cloude see https://modelcontextprotocol.io/quickstart/user\\n    2. for Cursor see https://docs.cursor.com/context/model-context-protocol#configuring-mcp-servers\\n\\n# Use with remote Chrome\\n1. run Selenoid Selenium Hub by running the below command inside \\\"selenoid\\\" dir:\\n    ```\\n    docker pull selenoid/vnc_chrome:128.0\\n    docker pull selenoid/hub\\n    docker pull aerokube/selenoid-ui\\n    docker-compose up -d\\n    ```\\n2. specify the Selenium HUB address via SELENIUM_HUB_URL env var by adding inside config-example.json/mcpServers/browser the following:\\n    ```\\n    \\\"env\\\": {\\n        \\\"SELENIUM_HUB_URL\\\": \\\"http://localhost:4444/wd/hub\\\"\\n    }\\n    ```\\n3. to see the live browser go to http://localhost:8080/\\n\\n# Warnings\\nThe Selenoid Selenium Hub configuration uses docker.sock from the host, so it has full control over Docker.\\n\\n# Troubleshoot\\n[npx @modelcontextprotocol/inspector npx tsx /Users/bogdan/devel/browser-mcp-over-cdp/src/MCP.ts](https://modelcontextprotocol.io/docs/tools/inspector#npm-package)\", \"tools\": [], \"tools_count\": 0, \"homepage\": \"\", \"url\": \"https://github.com/dumitrubogdanmihai/browser-mcp-over-cdp\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "dumitrubogdanmihai/browser-mcp-over-cdp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"mcp-terminal\", \"server_id\": \"geli2001/mcp-terminal\", \"description\": \"run and use mcp servers in your terminal\", \"readme\": \"# MCP Terminal\\n\\nA terminal-based interactive client for Model Context Protocol (MCP) servers.\\n\\n## Installation\\n\\n```bash\\nnpm install -g mcp-terminal\\n```\\n\\n## Features\\n\\n- Connect to multiple MCP servers simultaneously\\n- Interactive terminal for sending messages to models\\n- Easy configuration management\\n- Support for both stdio and SSE transports\\n- Switch between connected servers\\n\\n## Configuration\\n\\nBefore using MCP CLI, you need to configure at least one server:\\n\\n```bash\\nmcp-terminal configure\\n```\\n\\nThis will open your default editor with a configuration file where you can define MCP servers.\\n\\nExample configuration:\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"local-sse\\\": {\\n      \\\"command\\\": \\\"npx @anthropic-ai/mcp-server@latest\\\",\\n      \\\"args\\\": [],\\n      \\\"url\\\": \\\"http://localhost:8765/sse\\\"\\n    },\\n    \\\"local-stdio\\\": {\\n      \\\"command\\\": \\\"npx @anthropic-ai/mcp-server@latest\\\",\\n      \\\"args\\\": [\\\"--stdio\\\"]\\n    },\\n    \\\"shopify\\\": {\\n      \\\"command\\\": \\\"npx\\\",\\n      \\\"args\\\": [\\n        \\\"shopify-mcp\\\",\\n        \\\"--accessToken\\\",\\n        \\\"your-shopify-access-token\\\",\\n        \\\"--domain\\\",\\n        \\\"your-store.myshopify.com\\\"\\n      ]\\n    }\\n  }\\n}\\n```\\n\\nNotice that servers can be configured with:\\n\\n- Both `command` and `url` for servers that need to be started locally but use SSE transport\\n- Just `command` for servers that use stdio transport\\n- Just `url` for connecting to remote servers\\n\\n## Usage\\n\\n### Configure MCP servers\\n\\n```bash\\nmcp-terminal configure\\n```\\n\\nThis will open your default editor to configure MCP servers.\\n\\n### Start MCP server\\n\\n```bash\\nmcp-terminal start\\n```\\n\\nThis will start the configured MCP server. You can have multiple servers configured.\\n\\n### Interactive Chat with AI using MCP tools\\n\\n```bash\\nmcp-terminal chat\\n```\\n\\nThis starts an interactive chat session with an AI model that can use MCP tools from your configured server. The LLM can interact with the MCP server tools to help answer your questions and perform actions.\\n\\nYou can specify which server to use:\\n\\n```bash\\nmcp-terminal chat -s local-stdio\\n```\\n\\n#### Server Types\\n\\nThe chat command supports two types of server configurations:\\n\\n1. **URL-based servers** - Servers with a URL configured will connect via HTTP/SSE\\n2. **Command-based servers** - Servers with only a command will be started automatically and use stdio transport\\n\\n#### Requirements\\n\\nTo use the chat feature, you need:\\n\\n1. An OpenAI API key (set as `OPENAI_API_KEY` environment variable or in a `.env` file)\\n2. A configured MCP server (configure using `mcp-terminal configure`)\\n\\n#### Example usage\\n\\n```\\n$ mcp-terminal chat\\nStarting chat session with LLM...\\nType 'exit' or 'quit' to end the session.\\n\\nUsing MCP server: local-stdio\\nStarting MCP server: local-stdio\\nServer is running...\\nConnected to MCP server via stdio transport\\n\\nYou: What's the weather in New York today?\\nAI is thinking...\\nAI: I'd like to check the weather in New York for you, but I need to use a tool to get that information.\\n\\nI attempted to use a weather tool, but we're currently connected via stdio transport, which doesn't allow me to directly access external tools. In a full implementation with the appropriate tools configured, I would be able to fetch real-time weather data for New York.\\n\\nTo get the actual weather in New York today, you could:\\n1. Use a different MCP server configured with HTTP/SSE transport and weather tools\\n2. Check a weather website or app directly\\n3. Ask me a different question I can answer without external tools\\n\\nCan I help you with something else?\\n\\nYou: What is MCP?\\nAI is thinking...\\nAI: MCP stands for Model Context Protocol. It's an open standard protocol designed to connect AI language models (LLMs) like me with external tools, data sources, and APIs.\\n\\nHere's what makes MCP important:\\n\\n1. It allows AI models to extend their capabilities beyond their training data by accessing external tools and real-time information.\\n\\n2. It provides a standardized way for developers to create tools that AI models can interact with, making integration simpler.\\n\\n3. It enables AI assistants to perform actions in the real world - things like searching the web, accessing databases, running code, or interacting with services like the weather example you asked about earlier.\\n\\n4. It can work through different transport methods, such as HTTP/SSE (Server-Sent Events) or stdio (standard input/output), depending on the implementation.\\n\\nThe MCP-terminal tool you're using right now is a client that helps manage MCP servers and facilitates communication between users, AI models, and the tools provided by those servers.\\n\\nYou: exit\\n\\n## License\\n\\nMIT\\n```\\n\", \"tools\": [{\"name\": \"command\", \"description\": \"and `url` for servers that need to be started locally but use SSE transport\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"URL or link to process\"}}, \"required\": [\"url\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"url\", \"description\": \"for connecting to remote servers\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"URL or link to process\"}}, \"required\": [\"url\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"OPENAI_API_KEY\", \"description\": \"environment variable or in a `.env` file)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 3, \"homepage\": \"https://www.npmjs.com/package/mcp-terminal\", \"url\": \"https://github.com/GeLi2001/mcp-terminal\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "geli2001/mcp-terminal", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"label-studio-mcp-server\", \"server_id\": \"humansignal/label-studio-mcp-server\", \"description\": \"Open Source data labeling platform.\", \"readme\": \"# Label Studio MCP Server\\n\\n## Overview\\n\\nThis project provides a Model Context Protocol (MCP) server that allows interaction with a [Label Studio](https://labelstud.io/) instance using the `label-studio-sdk`. It enables programmatic management of labeling projects, tasks, and predictions via natural language or structured calls from MCP clients. Using this MCP Server, you can make requests like: \\n\\n* \\\"Create a project in label studio with this data ...\\\" \\n* \\\"How many tasks are labeled in my RAG review project?\\\" \\n* \\\"Add predictions for my tasks.\\\" \\n* \\\"Update my labeling template to include a comment box.\\\" \\n\\n<img src=\\\"./static/example.png\\\" alt=\\\"Example usage of Label Studio MCP Server\\\" width=\\\"600\\\">\\n\\n## Features\\n\\n*   **Project Management**: Create, update, list, and view details/configurations of Label Studio projects.\\n*   **Task Management**: Import tasks from files, list tasks within projects, and retrieve task data/annotations.\\n*   **Prediction Integration**: Add model predictions to specific tasks.\\n*   **SDK Integration**: Leverages the official `label-studio-sdk` for communication.\\n\\n## Prerequisites\\n\\n1.  **Running Label Studio Instance:** You need a running instance of Label Studio accessible from where this MCP server will run.\\n2.  **API Key:** Obtain an API key from your user account settings in Label Studio.\\n\\n## Configuration\\n\\nThe MCP server requires [the URL and API key for your Label Studio instance](https://labelstud.io/guide/access_tokens). If launching the server via an MCP client configuration file, you can specify the environment variables directly within the server definition. This is often preferred for client-managed servers.\\n\\nAdd the following JSON entry to your `claude_desktop_config.json` file or Cursor MCP settings:\\n\\n```json\\n{\\n    \\\"mcpServers\\\": {\\n        \\\"label-studio\\\": {\\n            \\\"command\\\": \\\"uvx\\\",\\n            \\\"args\\\": [\\n                \\\"--from\\\",\\n                \\\"git+https://github.com/HumanSignal/label-studio-mcp-server\\\",\\n                \\\"mcp-label-studio\\\"\\n            ],\\n            \\\"env\\\": {\\n                \\\"LABEL_STUDIO_API_KEY\\\": \\\"your_actual_api_key_here\\\", // <-- Your API key\\n                \\\"LABEL_STUDIO_URL\\\": \\\"http://localhost:8080\\\"\\n            }\\n        }\\n    }\\n}\\n```\\n<!-- \\n## Installation\\nFollow these instructions to install the server. \\n```bash\\ngit clone https://github.com/HumanSignal/label-studio-mcp-server.git \\ncd label-studio-mcp-server\\n\\n# Install dependencies using uv\\nuv venv\\nsource .venv/bin/activate \\nuv sync\\n```\\n\\n\\n    ```json\\n    {\\n      \\\"mcpServers\\\": {\\n        \\\"label-studio\\\": {\\n            \\\"command\\\": \\\"uv\\\",\\n            \\\"args\\\": [\\n                \\\"--directory\\\",\\n                \\\"/path/to/your/label-studio-mcp-server\\\", // <-- Update this path\\n                \\\"run\\\",\\n                \\\"label-studio-mcp.py\\\"\\n            ],\\n            \\\"env\\\": {\\n                \\\"LABEL_STUDIO_API_KEY\\\": \\\"your_actual_api_key_here\\\", // <-- Your API key\\n                \\\"LABEL_STUDIO_URL\\\": \\\"http://localhost:8080\\\"\\n            }\\n        }\\n      }\\n    }\\n    ```\\n    When configured this way, the `env` block injects the variables into the server process environment, and the script's `os.getenv()` calls will pick them up. -->\\n\\n## Tools\\n\\nThe MCP server exposes the following tools:\\n\\n### Project Management\\n\\n*   **`get_label_studio_projects_tool()`**: Lists available projects (ID, title, task count).\\n*   **`get_label_studio_project_details_tool(project_id: int)`**: Retrieves detailed information for a specific project.\\n*   **`get_label_studio_project_config_tool(project_id: int)`**: Fetches the XML labeling configuration for a project.\\n*   **`create_label_studio_project_tool(title: str, label_config: str, ...)`**: Creates a new project with a title, XML config, and optional settings. Returns project details including a URL.\\n*   **`update_label_studio_project_config_tool(project_id: int, new_label_config: str)`**: Updates the XML labeling configuration for an existing project.\\n\\n### Task Management\\n\\n*   **`list_label_studio_project_tasks_tool(project_id: int)`**: Lists task IDs within a project (up to 100).\\n*   **`get_label_studio_task_data_tool(project_id: int, task_id: int)`**: Retrieves the data payload for a specific task.\\n*   **`get_label_studio_task_annotations_tool(project_id: int, task_id: int)`**: Fetches existing annotations for a specific task.\\n*   **`import_label_studio_project_tasks_tool(project_id: int, tasks_file_path: str)`**: Imports tasks from a JSON file (containing a list of task objects) into a project. Returns import summary and project URL.\\n\\n### Predictions\\n\\n*   **`create_label_studio_prediction_tool(task_id: int, result: List[Dict[str, Any]], ...)`**: Creates a prediction for a specific task. Requires the prediction result as a list of dictionaries matching the Label Studio format. Optional `model_version` and `score`.\\n\\n## Example Use Case\\n\\n1.  Create a new project using `create_label_studio_project_tool`.\\n2.  Prepare a JSON file (`tasks.json`) with task data.\\n3.  Import tasks using `import_label_stu\\n[...truncated for length...]\", \"tools\": [{\"name\": \"env\", \"description\": \"block injects the variables into the server process environment, and the script's `os.getenv()` calls will pick them up. -->\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for env\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"model_version\", \"description\": \"and `score`.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for model_version\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"create_label_studio_project_tool\", \"description\": \".\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for create_label_studio_project_tool\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"import_label_studio_project_tasks_tool\", \"description\": \", providing the project ID from step 1 and the path to `tasks.json`.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"list_label_studio_project_tasks_tool\", \"description\": \".\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for list_label_studio_project_tasks_tool\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_label_studio_task_data_tool\", \"description\": \".\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_label_studio_task_data_tool\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"create_label_studio_prediction_tool\", \"description\": \".\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for create_label_studio_prediction_tool\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}], \"tools_count\": 7, \"homepage\": \"\", \"url\": \"https://github.com/HumanSignal/label-studio-mcp-server\", \"topics\": [], \"data_sources\": [\"github\", \"official\"]}", "target": "", "id": "humansignal/label-studio-mcp-server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"toio-mcp\", \"server_id\": \"comoc/toio-mcp\", \"description\": \"toio-mcp is a MCP server for toio\\u2122\", \"readme\": \"# toio-mcp\\r\\n\\r\\ntoio-mcp is a Model Context Protocol (MCP) server for toio Core Cube. It provides a set of tools to control toio Core Cubes via the MCP protocol.\\r\\n\\r\\n## Features\\r\\n\\r\\n- Scan and connect to toio Core Cubes\\r\\n- Control motors\\r\\n- Control LED indicators (including repeated patterns and turning off)\\r\\n- Get position information\\r\\n- Play sounds (sound effects and MIDI notes)\\r\\n- Get button state\\r\\n- Get battery level\\r\\n- Get sensor information (motion detection, posture angle, magnetic sensor)\\r\\n\\r\\n## Installation\\r\\n\\r\\n### Requirements\\r\\n\\r\\n- Python 3.11 or higher\\r\\n- [toio.py](https://github.com/toio/toio.py)\\r\\n- [uv](https://docs.astral.sh/uv/)\\r\\n- [MCP Python SDK](https://github.com/modelcontextprotocol/python-sdk) 1.7.1 or higher\\r\\n\\r\\n### Step 1. Install `uv`\\r\\nFollow the `Getting started` guide for `uv` to install it.\\r\\n\\r\\n### Step 2. Clone the toio-mcp repository\\r\\n```bash\\r\\ngit clone https://github.com/comoc/toio-mcp.git\\r\\ncd toio-mcp\\r\\n```\\r\\n\\r\\n### Step 3. Install dependencies\\r\\n```bash\\r\\nuv sync\\r\\n```\\r\\n\\r\\n## Usage\\r\\n\\r\\n### Usage with Cline or Roo Code\\r\\n\\r\\nAdd the following configuration to your MCP settings file:\\r\\n\\r\\n```json\\r\\n{\\r\\n  \\\"mcpServers\\\": {\\r\\n    \\\"toio-mcp\\\": {\\r\\n      \\\"command\\\": \\\"uv\\\",\\r\\n      \\\"args\\\": [\\r\\n        \\\"--directory\\\",\\r\\n        \\\"<path to toio-mcp directory>\\\",\\r\\n        \\\"run\\\",\\r\\n        \\\"server.py\\\"\\r\\n      ],\\r\\n      \\\"alwaysAllow\\\": [\\r\\n        \\\"add\\\"\\r\\n      ],\\r\\n      \\\"disabled\\\": false\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n### Available tools\\r\\n\\r\\n#### Scanner tools\\r\\n\\r\\n- `scan_cubes`: Scan for toio Core Cubes\\r\\n- `connect_cube`: Connect to a toio Core Cube\\r\\n- `disconnect_cube`: Disconnect from a toio Core Cube\\r\\n- `get_connected_cubes`: Get a list of connected cubes\\r\\n\\r\\n#### Motor tools\\r\\n\\r\\n- `motor_control`: Control the motors of a toio Core Cube\\r\\n- `motor_stop`: Stop the motors of a toio Core Cube\\r\\n\\r\\n#### LED tools\\r\\n\\r\\n- `set_indicator`: Set the LED color of a toio Core Cube\\r\\n- `set_repeated_indicator`: Set repeated LED indicator patterns\\r\\n- `turn_off_indicator`: Turn off LED indicators\\r\\n\\r\\n#### Position tools\\r\\n\\r\\n- `get_position`: Get the position of a toio Core Cube\\r\\n\\r\\n#### Sound tools\\r\\n\\r\\n- `play_sound_effect`: Play a sound effect\\r\\n- `play_midi`: Play a MIDI note\\r\\n- `stop_sound`: Stop sound playback\\r\\n\\r\\n#### Button tools\\r\\n\\r\\n- `get_button_state`: Get the button state\\r\\n\\r\\n#### Battery tools\\r\\n\\r\\n- `get_battery_level`: Get the battery level\\r\\n\\r\\n#### Sensor tools\\r\\n\\r\\n- `get_motion_detection`: Get motion detection information\\r\\n- `get_posture_angle`: Get posture angle information\\r\\n- `get_magnetic_sensor`: Get magnetic sensor information\\r\\n\\r\\n## License\\r\\n\\r\\nThis project is licensed under the MIT License - see the LICENSE file for details.\\r\\n\\r\\n---\\r\\n\\r\\n# toio-mcp (\\u65e5\\u672c\\u8a9e)\\r\\n\\r\\ntoio-mcp \\u306f\\u3001toio Core Cube \\u7528\\u306e Model Context Protocol (MCP) \\u30b5\\u30fc\\u30d0\\u30fc\\u3067\\u3059\\u3002MCP\\u30d7\\u30ed\\u30c8\\u30b3\\u30eb\\u3092\\u901a\\u3058\\u3066toio Core Cube\\u3092\\u5236\\u5fa1\\u3059\\u308b\\u305f\\u3081\\u306e\\u30c4\\u30fc\\u30eb\\u30bb\\u30c3\\u30c8\\u3092\\u63d0\\u4f9b\\u3057\\u307e\\u3059\\u3002\\r\\n\\r\\n## \\u7279\\u5fb4\\r\\n\\r\\n- toio Core Cube\\u306e\\u30b9\\u30ad\\u30e3\\u30f3\\u3068\\u63a5\\u7d9a\\r\\n- \\u30e2\\u30fc\\u30bf\\u30fc\\u5236\\u5fa1\\r\\n- LED\\u5236\\u5fa1\\uff08\\u7e70\\u308a\\u8fd4\\u3057\\u30d1\\u30bf\\u30fc\\u30f3\\u3084\\u6d88\\u706f\\u3092\\u542b\\u3080\\uff09\\r\\n- \\u4f4d\\u7f6e\\u60c5\\u5831\\u306e\\u53d6\\u5f97\\r\\n- \\u30b5\\u30a6\\u30f3\\u30c9\\u518d\\u751f\\uff08\\u52b9\\u679c\\u97f3\\u3084MIDI\\u97f3\\uff09\\r\\n- \\u30dc\\u30bf\\u30f3\\u72b6\\u614b\\u306e\\u53d6\\u5f97\\r\\n- \\u30d0\\u30c3\\u30c6\\u30ea\\u30fc\\u6b8b\\u91cf\\u306e\\u53d6\\u5f97\\r\\n- \\u30bb\\u30f3\\u30b5\\u30fc\\u60c5\\u5831\\u306e\\u53d6\\u5f97\\uff08\\u30e2\\u30fc\\u30b7\\u30e7\\u30f3\\u691c\\u51fa\\u3001\\u59ff\\u52e2\\u89d2\\u5ea6\\u3001\\u78c1\\u6c17\\u30bb\\u30f3\\u30b5\\u30fc\\uff09\\r\\n\\r\\n## \\u30a4\\u30f3\\u30b9\\u30c8\\u30fc\\u30eb\\r\\n\\r\\n### \\u5fc5\\u8981\\u6761\\u4ef6\\r\\n\\r\\n- Python 3.11\\u4ee5\\u4e0a\\r\\n- [toio.py](https://github.com/toio/toio.py)\\r\\n- [uv](https://docs.astral.sh/uv/)\\r\\n- [MCP Python SDK](https://github.com/modelcontextprotocol/python-sdk) 1.7.1\\u4ee5\\u4e0a\\r\\n\\r\\n### \\u30b9\\u30c6\\u30c3\\u30d71. uv\\u306e\\u30a4\\u30f3\\u30b9\\u30c8\\u30fc\\u30eb\\r\\n`uv`\\u306eGetting started\\u306b\\u5f93\\u3063\\u3066`uv`\\u30a4\\u30f3\\u30b9\\u30c8\\u30fc\\u30eb\\u3057\\u3066\\u304f\\u3060\\u3055\\u3044\\u3002\\r\\n\\r\\n### \\u30b9\\u30c6\\u30c3\\u30d72. toio-mcp\\u30ec\\u30dd\\u30b8\\u30c8\\u30ea\\u306e\\u30af\\u30ed\\u30fc\\u30f3\\r\\n```bash\\r\\ngit clone https://github.com/comoc/toio-mcp.git\\r\\ncd toio-mcp\\r\\n```\\r\\n\\r\\n### \\u30b9\\u30c6\\u30c3\\u30d73. \\u4f9d\\u5b58\\u95a2\\u4fc2\\u306e\\u30a4\\u30f3\\u30b9\\u30c8\\u30fc\\u30eb\\r\\n```bash\\r\\nuv sync\\r\\n```\\r\\n\\r\\n## \\u4f7f\\u7528\\u65b9\\u6cd5\\r\\n\\r\\n### Cline\\u3084Roo Code\\u3067\\u306e\\u4f7f\\u7528\\r\\n\\r\\nMCP\\u306e\\u8a2d\\u5b9a\\u30d5\\u30a1\\u30a4\\u30eb\\u306b\\u4ee5\\u4e0b\\u306e\\u8a2d\\u5b9a\\u3092\\u8ffd\\u52a0\\u3057\\u307e\\u3059\\uff1a\\r\\n\\r\\n```json\\r\\n{\\r\\n  \\\"mcpServers\\\": {\\r\\n    \\\"toio-mcp\\\": {\\r\\n      \\\"command\\\": \\\"uv\\\",\\r\\n      \\\"args\\\": [\\r\\n        \\\"--directory\\\",\\r\\n        \\\"<toio-mcp\\u30c7\\u30a3\\u30ec\\u30af\\u30c8\\u30ea\\u3078\\u306e\\u30d1\\u30b9>\\\",\\r\\n        \\\"run\\\",\\r\\n        \\\"server.py\\\"\\r\\n      ],\\r\\n      \\\"alwaysAllow\\\": [\\r\\n        \\\"add\\\"\\r\\n      ],\\r\\n      \\\"disabled\\\": false\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n### \\u5229\\u7528\\u53ef\\u80fd\\u306a\\u30c4\\u30fc\\u30eb\\r\\n\\r\\n#### \\u30b9\\u30ad\\u30e3\\u30ca\\u30fc\\u30c4\\u30fc\\u30eb\\r\\n\\r\\n- `scan_cubes`: toio Core Cube\\u3092\\u30b9\\u30ad\\u30e3\\u30f3\\r\\n- `connect_cube`: toio Core Cube\\u306b\\u63a5\\u7d9a\\r\\n- `disconnect_cube`: toio Core Cube\\u304b\\u3089\\u5207\\u65ad\\r\\n- `get_connected_cubes`: \\u63a5\\u7d9a\\u3055\\u308c\\u3066\\u3044\\u308bCube\\u306e\\u30ea\\u30b9\\u30c8\\u3092\\u53d6\\u5f97\\r\\n\\r\\n#### \\u30e2\\u30fc\\u30bf\\u30fc\\u30c4\\u30fc\\u30eb\\r\\n\\r\\n- `motor_control`: toio Core Cube\\u306e\\u30e2\\u30fc\\u30bf\\u30fc\\u3092\\u5236\\u5fa1\\r\\n- `motor_stop`: toio Core Cube\\u306e\\u30e2\\u30fc\\u30bf\\u30fc\\u3092\\u505c\\u6b62\\r\\n\\r\\n#### LED\\u30c4\\u30fc\\u30eb\\r\\n\\r\\n- `set_indicator`: toio Core Cube\\u306eLED\\u306e\\u8272\\u3092\\u8a2d\\u5b9a\\r\\n- `set_repeated_indicator`: \\u7e70\\u308a\\u8fd4\\u3057LED\\u30a4\\u30f3\\u30b8\\u30b1\\u30fc\\u30bf\\u30fc\\u30d1\\u30bf\\u30fc\\u30f3\\u3092\\u8a2d\\u5b9a\\r\\n- `turn_off_indicator`: LED\\u30a4\\u30f3\\u30b8\\u30b1\\u30fc\\u30bf\\u30fc\\u3092\\u6d88\\u706f\\r\\n\\r\\n#### \\u4f4d\\u7f6e\\u60c5\\u5831\\u30c4\\u30fc\\u30eb\\r\\n\\r\\n- `get_position`: toio Core Cube\\u306e\\u4f4d\\u7f6e\\u60c5\\u5831\\u3092\\u53d6\\u5f97\\r\\n\\r\\n#### \\u30b5\\u30a6\\u30f3\\u30c9\\u30c4\\u30fc\\u30eb\\r\\n\\r\\n- `play_sound_effect`: \\u52b9\\u679c\\u97f3\\u3092\\u518d\\u751f\\r\\n- `play_midi`: MIDI\\u97f3\\u3092\\u518d\\u751f\\r\\n- `stop_sound`: \\u30b5\\u30a6\\u30f3\\u30c9\\u518d\\u751f\\u3092\\u505c\\u6b62\\r\\n\\r\\n#### \\u30dc\\u30bf\\u30f3\\u30c4\\u30fc\\u30eb\\r\\n\\r\\n- `get_button_state`: \\u30dc\\u30bf\\u30f3\\u306e\\u72b6\\u614b\\u3092\\u53d6\\u5f97\\r\\n\\r\\n#### \\u30d0\\u30c3\\u30c6\\u30ea\\u30fc\\u30c4\\u30fc\\u30eb\\r\\n\\r\\n- `get_battery_level`: \\u30d0\\u30c3\\u30c6\\u30ea\\u30fc\\u6b8b\\u91cf\\u3092\\u53d6\\u5f97\\r\\n\\r\\n#### \\u30bb\\u30f3\\u30b5\\u30fc\\u30c4\\u30fc\\u30eb\\r\\n\\r\\n- `get_motion_detection`: \\u30e2\\u30fc\\u30b7\\u30e7\\u30f3\\u691c\\u51fa\\u60c5\\u5831\\u3092\\u53d6\\u5f97\\r\\n- `get_posture_angle`: \\u59ff\\u52e2\\u89d2\\u5ea6\\u60c5\\u5831\\u3092\\u53d6\\u5f97\\r\\n- `get_magnetic_sensor`: \\u78c1\\u6c17\\u30bb\\u30f3\\u30b5\\u30fc\\u60c5\\u5831\\u3092\\u53d6\\u5f97\\r\\n\\r\\n## \\u30e9\\u30a4\\u30bb\\u30f3\\u30b9\\r\\n\\r\\n\\u3053\\u306e\\u30d7\\u30ed\\u30b8\\u30a7\\u30af\\u30c8\\u306fMIT\\u30e9\\u30a4\\u30bb\\u30f3\\u30b9\\u306e\\u4e0b\\u3067\\u63d0\\u4f9b\\u3055\\u308c\\u3066\\u3044\\u307e\\u3059 - \\u8a73\\u7d30\\u306fLICENSE\\u30d5\\u30a1\\u30a4\\u30eb\\u3092\\u53c2\\u7167\\u3057\\u3066\\u304f\\u3060\\u3055\\u3044\\u3002\\r\\n\", \"tools\": [{\"name\": \"scan_cubes\", \"description\": \"Scan for toio Core Cubes\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for scan_cubes\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"connect_cube\", \"description\": \"Connect to a toio Core Cube\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for connect_cube\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"disconnect_cube\", \"description\": \"Disconnect from a toio Core Cube\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for disconnect_cube\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_connected_cubes\", \"description\": \"Get a list of connected cubes\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_connected_cubes\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"uv\", \"description\": \"Follow the `Getting started` guide for `uv` to install it.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for uv\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"motor_control\", \"description\": \"Control the motors of a toio Core Cube\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for motor_control\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"motor_stop\", \"description\": \"Stop the motors of a toio Core Cube\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for motor_stop\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"set_indicator\", \"description\": \"Set the LED color of a toio Core Cube\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for set_indicator\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"set_repeated_indicator\", \"description\": \"Set repeated LED indicator patterns\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for set_repeated_indicator\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"turn_off_indicator\", \"description\": \"Turn off LED indicators\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for turn_off_indicator\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_position\", \"description\": \"Get the position of a toio Core Cube\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_position\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"play_sound_effect\", \"description\": \"Play a sound effect\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for play_sound_effect\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"play_midi\", \"description\": \"Play a MIDI note\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for play_midi\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"stop_sound\", \"description\": \"Stop sound playback\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for stop_sound\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_button_state\", \"description\": \"Get the button state\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_button_state\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_battery_level\", \"description\": \"Get the battery level\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_battery_level\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_motion_detection\", \"description\": \"Get motion detection information\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_motion_detection\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_posture_angle\", \"description\": \"Get posture angle information\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_posture_angle\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_magnetic_sensor\", \"description\": \"Get magnetic sensor information\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_magnetic_sensor\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 19, \"homepage\": \"\", \"url\": \"https://github.com/comoc/toio-mcp\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "comoc/toio-mcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"mssqlclient-mcp-server\", \"server_id\": \"aadversteeg/mssqlclient-mcp-server\", \"description\": \"A Microsoft SQL Server client implementing the Model Context Protocol (MCP). This server provides SQL query capabilities through a simple MCP interface.\", \"readme\": \"# SQL Server MCP Client\\r\\n\\r\\nA comprehensive Microsoft SQL Server client implementing the Model Context Protocol (MCP). This server provides extensive SQL Server capabilities including query execution, schema discovery, and stored procedure management through a simple MCP interface.\\r\\n\\r\\n## Overview\\r\\n\\r\\nThe SQL Server MCP client is built with .NET Core using the Model Context Protocol C# SDK ([github.com/modelcontextprotocol/csharp-sdk](https://github.com/modelcontextprotocol/csharp-sdk)). It provides tools for executing SQL queries, managing stored procedures, listing tables, and retrieving comprehensive schema information from SQL Server databases. The server is designed to be lightweight yet powerful, demonstrating how to create a robust MCP server with practical database functionality. It can be deployed either directly on a machine or as a Docker container.\\r\\n\\r\\nThe MCP client operates in one of two modes:\\r\\n- **Database Mode**: When a specific database is specified in the connection string, only operations within that database context are available\\r\\n- **Server Mode**: When no database is specified in the connection string, server-wide operations across all databases are available\\r\\n\\r\\n## Features\\r\\n\\r\\n### Core Database Operations\\r\\n- Execute SQL queries on connected SQL Server databases\\r\\n- List all tables with schema and row count information\\r\\n- Retrieve detailed schema information for specific tables\\r\\n- Comprehensive stored procedure management and execution\\r\\n\\r\\n### Stored Procedure Support\\r\\n- **Parameter Discovery**: Get detailed parameter information in table or JSON Schema format\\r\\n- **Type-Safe Execution**: Automatic JSON-to-SQL type conversion based on parameter metadata\\r\\n- **Rich Metadata**: Support for input/output parameters, default values, and data type constraints\\r\\n- **Cross-Database Operations**: Execute procedures across different databases (Server Mode)\\r\\n\\r\\n### Advanced Features\\r\\n- **JSON Schema Output**: Parameter metadata compatible with validation tools\\r\\n- **Case-Insensitive Parameters**: Flexible parameter naming with @ prefix normalization\\r\\n- **SQL Server Feature Detection**: Comprehensive capability reporting\\r\\n- **Two-Mode Architecture**: Optimized for both single-database and multi-database scenarios\\r\\n\\r\\n### Security & Configuration\\r\\n- Configurable tool enablement for security\\r\\n- Environment-based configuration\\r\\n- Comprehensive error handling and validation\\r\\n\\r\\n## Getting Started\\r\\n\\r\\n### Prerequisites\\r\\n\\r\\n- .NET 9.0 (for local development/deployment)\\r\\n- Docker (for container deployment)\\r\\n\\r\\n### Build Instructions (for development)\\r\\n\\r\\nIf you want to build the project from source:\\r\\n\\r\\n1. Clone this repository:\\r\\n   ```bash\\r\\n   git clone https://github.com/aadversteeg/mssqlclient-mcp-server.git\\r\\n   ```\\r\\n\\r\\n2. Navigate to the project root directory:\\r\\n   ```bash\\r\\n   cd mssqlclient-mcp-server\\r\\n   ```\\r\\n\\r\\n3. Build the project using:\\r\\n   ```bash\\r\\n   dotnet build src/mssqlclient.sln\\r\\n   ```\\r\\n\\r\\n4. Run the tests:\\r\\n   ```bash\\r\\n   dotnet test src/mssqlclient.sln\\r\\n   ```\\r\\n\\r\\n## Docker Support\\r\\n\\r\\n### Docker Hub\\r\\n\\r\\nThe SQL Server MCP Client is available on Docker Hub.\\r\\n\\r\\n```bash\\r\\n# Pull the latest version\\r\\ndocker pull aadversteeg/mssqlclient-mcp-server:latest\\r\\n```\\r\\n\\r\\n### Manual Docker Build\\r\\n\\r\\nIf you need to build the Docker image yourself:\\r\\n\\r\\n```bash\\r\\n# Navigate to the repository root\\r\\ncd mssqlclient-mcp-server\\r\\n\\r\\n# Build the Docker image\\r\\ndocker build -f src/Core.Infrastructure.McpServer/Dockerfile -t mssqlclient-mcp-server:latest src/\\r\\n\\r\\n# Run the locally built image\\r\\ndocker run -d --name mssql-mcp -e \\\"MSSQL_CONNECTIONSTRING=Server=your_server;Database=your_db;User Id=your_user;Password=your_password;TrustServerCertificate=True;\\\" mssqlclient-mcp-server:latest\\r\\n```\\r\\n\\r\\n### Local Registry Push\\r\\n\\r\\nTo push to your local registry:\\r\\n\\r\\n```bash\\r\\n# Build the Docker image\\r\\ndocker build -f src/Core.Infrastructure.McpServer/Dockerfile -t localhost:5000/mssqlclient-mcp-server:latest src/\\r\\n\\r\\n# Push to local registry\\r\\ndocker push localhost:5000/mssqlclient-mcp-server:latest\\r\\n```\\r\\n\\r\\n#### Using Local Registry\\r\\n\\r\\nIf you have pushed the image to local registry running on port 5000, you can pull from it:\\r\\n\\r\\n```bash\\r\\n# Pull from local registry\\r\\ndocker pull localhost:5000/mssqlclient-mcp-server:latest\\r\\n```\\r\\n\\r\\n## MCP Protocol Usage\\r\\n\\r\\n### Client Integration\\r\\n\\r\\nTo connect to the SQL Server MCP Client from your applications:\\r\\n\\r\\n1. Use the Model Context Protocol C# SDK or any MCP-compatible client\\r\\n2. Configure your client to connect to the server's endpoint\\r\\n3. Call the available tools described below\\r\\n\\r\\n### Available Tools\\r\\n\\r\\nThe available tools differ depending on which mode the server is operating in, with some tools available in both modes:\\r\\n\\r\\n## Common Tools (Available in Both Modes)\\r\\n\\r\\n#### server_capabilities\\r\\n\\r\\nReturns detailed information about the capabilities and features of the connected SQL Server instance.\\r\\n\\r\\nExample request:\\r\\n```json\\r\\n{\\r\\n  \\\"name\\\": \\\"server_capabilities\\\",\\r\\n  \\\"parameters\\\": {}\\r\\n}\\r\\n```\\r\\n\\r\\nExample response in Server M\\n[...truncated for length...]\", \"tools\": [{\"name\": \"query\", \"description\": \"(required): The SQL query to execute.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}}, \"required\": [\"query\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"tableName\", \"description\": \"(required): The name of the table to get schema information for.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for tableName\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"procedureName\", \"description\": \"(required): The name of the stored procedure.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for procedureName\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"format\", \"description\": \"(optional): Output format - \\\"table\\\" (default) or \\\"json\\\".\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for format\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"parameters\", \"description\": \"(required): JSON string containing parameter values.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"amount\": {\"type\": \"number\", \"description\": \"Numeric amount or value\"}}, \"required\": [\"amount\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"ParameterName\", \"description\": \"formats\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for ParameterName\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"databaseName\", \"description\": \"(required): The name of the database to execute the query in.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}}, \"required\": [\"query\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"EnableExecuteQuery\", \"description\": \"configuration setting to `true`.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}}, \"required\": [\"query\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"EnableExecuteStoredProcedure\", \"description\": \"configuration setting to `true`.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for EnableExecuteStoredProcedure\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"false\", \"description\": \"(the default), the respective execution tools will not be registered and will not be available to clients. This provides additional security layers when you only want to allow read-only operations.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for false\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"MSSQL_CONNECTIONSTRING\", \"description\": \"environment variable:\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for MSSQL_CONNECTIONSTRING\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"mcpServers\", \"description\": \"section in your Claude Desktop configuration:\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for mcpServers\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 12, \"homepage\": \"\", \"url\": \"https://github.com/aadversteeg/mssqlclient-mcp-server\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "aadversteeg/mssqlclient-mcp-server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"mo\", \"server_id\": \"ztfo/mo\", \"description\": \"Linear<>Cursor MCP Server for AI powered project management\", \"readme\": \"# Mo - Linear Task Management for Cursor IDE\\n\\nMo is a task management tool designed as a Model Context Protocol (MCP) server for Cursor IDE. It provides seamless integration with Linear for issue tracking and task management, allowing developers to manage their workflow directly from within Cursor.\\n\\n[![npm version](https://img.shields.io/npm/v/mo-linear-mcp.svg)](https://www.npmjs.com/package/mo-linear-mcp)\\n[![License: ISC](https://img.shields.io/badge/License-ISC-blue.svg)](https://opensource.org/licenses/ISC)\\n\\n## Project Status\\n\\n- **Phase 1**: \\u2705 Completed (March 21, 2024) - Core infrastructure and basic task management\\n- **Phase 2**: \\u2705 Completed (April 5, 2024) - Linear integration and chat tool support\\n- **Phase 3**: \\ud83d\\udd04 In Progress - AI enhancement features\\n- **Phase 4**: \\ud83d\\udcc5 Planned - Advanced features and polish\\n\\nSee the [Project Plan](./docs/PROJECT_PLAN.md) for more details on the project timeline and phases.\\n\\n## Features\\n\\n- **Task Management**: Create, update, and track tasks directly in Cursor\\n- **Context-Awareness**: Create tasks from code selections or current file context\\n- **Protocol Version Handling**: Support for Cursor MCP protocol version compatibility\\n- **Rich Responses**: Markdown-formatted responses with action buttons\\n- **Linear Integration**: Sync tasks with Linear for team collaboration\\n  - Authentication with secure credential storage\\n  - Bidirectional synchronization between local tasks and Linear issues\\n  - Filtering and querying Linear issues\\n  - Support for projects, teams, and workflow states\\n- **Chat Integration**: Use Linear tools directly in Claude chat within Cursor\\n- **Webhook Support**: Register webhooks for real-time issue updates (optional)\\n\\n## Installation\\n\\n### Prerequisites\\n\\n- [Cursor IDE](https://cursor.sh/)\\n- Node.js 16+\\n- Linear account (for Linear integration)\\n\\n### Option 1: Install From npm (Recommended)\\n\\nThe package is available on npm and can be installed globally:\\n\\n```bash\\nnpm install -g mo-linear-mcp\\n```\\n\\nYou can also use it directly without installation via npx:\\n\\n```bash\\nnpx mo-linear-mcp\\n```\\n\\nVisit the package on npm: [mo-linear-mcp](https://www.npmjs.com/package/mo-linear-mcp)\\n\\n### Option 2: Local Development Setup\\n\\n1. Clone this repository:\\n\\n   ```bash\\n   git clone https://github.com/yourusername/mo-linear-mcp.git\\n   cd mo-linear-mcp\\n   ```\\n\\n2. Install dependencies:\\n\\n   ```bash\\n   npm install\\n   ```\\n\\n3. Build the project:\\n\\n   ```bash\\n   npm run build\\n   ```\\n\\n4. Run in development mode:\\n\\n   ```bash\\n   npm run dev\\n   ```\\n\\n## Cursor MCP Configuration\\n\\nTo use Mo in Cursor, you need to configure it in the MCP settings. Here's an example configuration:\\n\\n```json\\n{\\n  \\\"version\\\": \\\"0.1\\\",\\n  \\\"mcps\\\": {\\n    \\\"mo-linear-mcp-dev\\\": {\\n      \\\"name\\\": \\\"Mo Linear MCP (Dev)\\\",\\n      \\\"description\\\": \\\"Linear Task Management for Cursor IDE - Development Mode\\\",\\n      \\\"command\\\": \\\"npm\\\",\\n      \\\"args\\\": [\\\"run\\\", \\\"dev\\\"],\\n      \\\"cwd\\\": \\\"/path/to/your/mo-linear-mcp\\\",\\n      \\\"enabled\\\": true\\n    },\\n    \\\"linear\\\": {\\n      \\\"name\\\": \\\"Linear\\\",\\n      \\\"description\\\": \\\"Linear Task Management for Cursor\\\",\\n      \\\"command\\\": \\\"npx\\\",\\n      \\\"args\\\": [\\\"-y\\\", \\\"mo-linear-mcp\\\"],\\n      \\\"enabled\\\": true\\n    }\\n  }\\n}\\n```\\n\\nTo access the MCP configuration in Cursor:\\n\\n1. Open Cursor IDE\\n2. Go to Settings \\u2192 Extensions \\u2192 MCP Servers\\n3. Click \\\"Edit MCP Config\\\" and paste the configuration above\\n4. Adjust the \\\"cwd\\\" path to match your local repository path (for development mode)\\n\\n## Development and Publishing\\n\\n### Local Development\\n\\nFor rapid development and testing:\\n\\n```bash\\n# Watch for changes\\nnpm run watch\\n\\n# In another terminal, test commands\\necho '{\\\"command\\\": \\\"/mo linear-status\\\"}' | npm run dev\\n```\\n\\n## Usage\\n\\n### Editor Mode Commands\\n\\nMo provides commands that can be used directly in the editor:\\n\\n**Basic Commands**\\n\\n- `/mo tasks` - List all tasks with optional filtering\\n- `/mo new-task` - Create a new task\\n- `/mo update-task` - Update an existing task\\n- `/mo task-details` - View task details\\n- `/mo delete-task` - Delete a task\\n- `/mo help` - Show help information\\n- `/mo settings` - View/update settings\\n\\n**Linear Commands**\\n\\n- `/mo linear-auth` - Authenticate with Linear API\\n- `/mo linear-status` - Check Linear authentication status\\n- `/mo linear-logout` - Log out from Linear API\\n- `/mo linear-teams` - List Linear teams\\n- `/mo linear-projects` - List Linear projects\\n- `/mo linear-states` - List Linear workflow states\\n- `/mo linear-issues` - List Linear issues\\n- `/mo linear-sync` - Synchronize with Linear\\n- `/mo linear-push` - Push tasks to Linear\\n- `/mo linear-pull` - Pull issues from Linear\\n\\n### Chat Mode Tools\\n\\nMo can also be used directly in the Claude chat interface with the following syntax:\\n\\n```\\n@Linear linear_auth key:your_api_key\\n@Linear linear_status\\n@Linear linear_teams\\n@Linear linear_projects team:team-id\\n@Linear linear_issues team:team-id\\n@Linear linear_sync\\n```\\n\\n## Authentication\\n\\nTo use the Linear integration, you need to authenticate with your Linear API key:\\n\\n```\\n/mo linear-auth key:your_linear_api_key\\n```\\n\\nOr in chat \\n[...truncated for length...]\", \"tools\": [], \"tools_count\": 0, \"homepage\": \"\", \"url\": \"https://github.com/ztfo/mo\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "ztfo/mo", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"yandex-tracker-mcp\", \"server_id\": \"urfv/yandex-tracker-mcp\", \"description\": \"MCP Server for Yandex Tracker\", \"readme\": \"# Yandex Tracker MCP Server\\n\\nMCP-\\u0441\\u0435\\u0440\\u0432\\u0435\\u0440 \\u0434\\u043b\\u044f \\u0438\\u043d\\u0442\\u0435\\u0433\\u0440\\u0430\\u0446\\u0438\\u0438 \\u042f\\u043d\\u0434\\u0435\\u043a\\u0441 \\u0422\\u0440\\u0435\\u043a\\u0435\\u0440\\u0430 \\u0441 Claude \\u0447\\u0435\\u0440\\u0435\\u0437 Model Context Protocol (MCP). \\u042d\\u0442\\u043e \\u0431\\u0430\\u0437\\u043e\\u0432\\u0430\\u044f \\u0432\\u0435\\u0440\\u0441\\u0438\\u044f \\u0441 \\u043c\\u0438\\u043d\\u0438\\u043c\\u0443\\u043c\\u043e\\u043c \\u043c\\u0435\\u0442\\u043e\\u0434\\u043e\\u0432, \\u043a\\u043e\\u0442\\u043e\\u0440\\u0430\\u044f \\u043f\\u043e\\u0437\\u0432\\u043e\\u043b\\u044f\\u0435\\u0442 Claude \\u043f\\u0440\\u043e\\u0441\\u043c\\u0430\\u0442\\u0440\\u0438\\u0432\\u0430\\u0442\\u044c \\u0438 \\u0443\\u043f\\u0440\\u0430\\u0432\\u043b\\u044f\\u0442\\u044c \\u0437\\u0430\\u0434\\u0430\\u0447\\u0430\\u043c\\u0438 \\u0432 \\u0432\\u0430\\u0448\\u0435\\u043c \\u042f\\u043d\\u0434\\u0435\\u043a\\u0441 \\u0422\\u0440\\u0435\\u043a\\u0435\\u0440\\u0435. \\u041a\\u043e\\u043d\\u0442\\u0440\\u0438\\u0431\\u044c\\u044e\\u0448\\u0435\\u043d\\u044b \\u0441 \\u043e\\u0441\\u0442\\u0430\\u043b\\u044c\\u043d\\u044b\\u043c\\u0438 \\u043c\\u0435\\u0442\\u043e\\u0434\\u0430\\u043c\\u0438 \\u043f\\u0440\\u0438\\u0432\\u0435\\u0442\\u0441\\u0442\\u0432\\u0443\\u044e\\u0442\\u0441\\u044f! \\n\\n## \\u0414\\u0435\\u043c\\u043e\\u043d\\u0441\\u0442\\u0440\\u0430\\u0446\\u0438\\u044f \\u0440\\u0430\\u0431\\u043e\\u0442\\u044b\\n\\n![2025-05-20_23-23-10](https://github.com/user-attachments/assets/9221fb3c-8298-445a-a4e4-6d39266ddea4)\\n\\n\\n## \\u041d\\u0430\\u0441\\u0442\\u0440\\u043e\\u0439\\u043a\\u0430\\n\\n1. \\u0423\\u0441\\u0442\\u0430\\u043d\\u043e\\u0432\\u0438\\u0442\\u0435 \\u0437\\u0430\\u0432\\u0438\\u0441\\u0438\\u043c\\u043e\\u0441\\u0442\\u0438:\\n```bash\\npip install -r requirements.txt\\n```\\n\\n2. \\u0421\\u043e\\u0437\\u0434\\u0430\\u0439\\u0442\\u0435 \\u0444\\u0430\\u0439\\u043b `.env` \\u0441 \\u0432\\u0430\\u0448\\u0438\\u043c\\u0438 \\u0443\\u0447\\u0435\\u0442\\u043d\\u044b\\u043c\\u0438 \\u0434\\u0430\\u043d\\u043d\\u044b\\u043c\\u0438 \\u042f\\u043d\\u0434\\u0435\\u043a\\u0441 \\u0422\\u0440\\u0435\\u043a\\u0435\\u0440\\u0430:\\n- YANDEX_TRACKER_TOKEN: \\u0412\\u0430\\u0448 \\u0442\\u043e\\u043a\\u0435\\u043d \\u0430\\u0432\\u0442\\u043e\\u0440\\u0438\\u0437\\u0430\\u0446\\u0438\\u0438\\n- YANDEX_TRACKER_ORG_ID: ID \\u0432\\u0430\\u0448\\u0435\\u0439 \\u043e\\u0440\\u0433\\u0430\\u043d\\u0438\\u0437\\u0430\\u0446\\u0438\\u0438\\n\\n## \\u041f\\u043e\\u0434\\u043a\\u043b\\u044e\\u0447\\u0435\\u043d\\u0438\\u0435 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430 \\u043a Claude Desktop\\n\\n```bash\\nmcp install main.py --name \\\"\\u042f\\u043d\\u0434\\u0435\\u043a\\u0441 \\u0422\\u0440\\u0435\\u043a\\u0435\\u0440\\\"\\n```\\n\\n## \\u0414\\u043e\\u0441\\u0442\\u0443\\u043f\\u043d\\u044b\\u0435 \\u0438\\u043d\\u0441\\u0442\\u0440\\u0443\\u043c\\u0435\\u043d\\u0442\\u044b\\n\\n### \\u041f\\u043e\\u043b\\u0443\\u0447\\u0435\\u043d\\u0438\\u0435 \\u043f\\u0440\\u043e\\u0435\\u043a\\u0442\\u0430\\n\\u041f\\u043e\\u043b\\u0443\\u0447\\u0430\\u0435\\u0442 \\u0438\\u043d\\u0444\\u043e\\u0440\\u043c\\u0430\\u0446\\u0438\\u044e \\u043e \\u043f\\u0440\\u043e\\u0435\\u043a\\u0442\\u0435 \\u0438\\u0437 \\u042f\\u043d\\u0434\\u0435\\u043a\\u0441 \\u0422\\u0440\\u0435\\u043a\\u0435\\u0440\\u0430.\\n\\n\\u0412\\u0445\\u043e\\u0434\\u043d\\u044b\\u0435 \\u0434\\u0430\\u043d\\u043d\\u044b\\u0435:\\n```json\\n{\\n    \\\"project_id\\\": \\\"123\\\"\\n}\\n```\\n\\n### \\u041f\\u043e\\u043b\\u0443\\u0447\\u0435\\u043d\\u0438\\u0435 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438\\n\\u041f\\u043e\\u043b\\u0443\\u0447\\u0430\\u0435\\u0442 \\u0438\\u043d\\u0444\\u043e\\u0440\\u043c\\u0430\\u0446\\u0438\\u044e \\u043e \\u0437\\u0430\\u0434\\u0430\\u0447\\u0435 \\u0438\\u0437 \\u042f\\u043d\\u0434\\u0435\\u043a\\u0441 \\u0422\\u0440\\u0435\\u043a\\u0435\\u0440\\u0430.\\n\\n\\u0412\\u0445\\u043e\\u0434\\u043d\\u044b\\u0435 \\u0434\\u0430\\u043d\\u043d\\u044b\\u0435:\\n```json\\n{\\n    \\\"issue_id\\\": \\\"ISSUE-123\\\"\\n}\\n```\\n\\n### \\u0421\\u043e\\u0437\\u0434\\u0430\\u043d\\u0438\\u0435 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438\\n\\u0421\\u043e\\u0437\\u0434\\u0430\\u0435\\u0442 \\u043d\\u043e\\u0432\\u0443\\u044e \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0432 \\u042f\\u043d\\u0434\\u0435\\u043a\\u0441 \\u0422\\u0440\\u0435\\u043a\\u0435\\u0440\\u0435.\\n\\n\\u0412\\u0445\\u043e\\u0434\\u043d\\u044b\\u0435 \\u0434\\u0430\\u043d\\u043d\\u044b\\u0435:\\n```json\\n{\\n    \\\"queue\\\": \\\"TEST\\\",\\n    \\\"summary\\\": \\\"\\u041d\\u043e\\u0432\\u0430\\u044f \\u0437\\u0430\\u0434\\u0430\\u0447\\u0430\\\",\\n    \\\"description\\\": \\\"\\u041e\\u043f\\u0438\\u0441\\u0430\\u043d\\u0438\\u0435 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438\\\",\\n    \\\"type\\\": \\\"task\\\",\\n    \\\"priority\\\": \\\"normal\\\",\\n    \\\"assignee\\\": \\\"user123\\\"\\n}\\n```\\n\\n### \\u0420\\u0435\\u0434\\u0430\\u043a\\u0442\\u0438\\u0440\\u043e\\u0432\\u0430\\u043d\\u0438\\u0435 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438\\n\\u0420\\u0435\\u0434\\u0430\\u043a\\u0442\\u0438\\u0440\\u0443\\u0435\\u0442 \\u0441\\u0443\\u0449\\u0435\\u0441\\u0442\\u0432\\u0443\\u044e\\u0449\\u0443\\u044e \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0432 \\u042f\\u043d\\u0434\\u0435\\u043a\\u0441 \\u0422\\u0440\\u0435\\u043a\\u0435\\u0440\\u0435.\\n\\n\\u0412\\u0445\\u043e\\u0434\\u043d\\u044b\\u0435 \\u0434\\u0430\\u043d\\u043d\\u044b\\u0435:\\n```json\\n{\\n    \\\"issue_id\\\": \\\"ISSUE-123\\\",\\n    \\\"summary\\\": \\\"\\u041e\\u0431\\u043d\\u043e\\u0432\\u043b\\u0435\\u043d\\u043d\\u043e\\u0435 \\u043d\\u0430\\u0437\\u0432\\u0430\\u043d\\u0438\\u0435\\\",\\n    \\\"description\\\": \\\"\\u041d\\u043e\\u0432\\u043e\\u0435 \\u043e\\u043f\\u0438\\u0441\\u0430\\u043d\\u0438\\u0435\\\",\\n    \\\"type\\\": \\\"bug\\\",\\n    \\\"priority\\\": \\\"high\\\",\\n    \\\"assignee\\\": \\\"user456\\\"\\n}\\n```\\n\\n### \\u041f\\u0435\\u0440\\u0435\\u043c\\u0435\\u0449\\u0435\\u043d\\u0438\\u0435 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438\\n\\u041f\\u0435\\u0440\\u0435\\u043c\\u0435\\u0449\\u0430\\u0435\\u0442 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0432 \\u0434\\u0440\\u0443\\u0433\\u0443\\u044e \\u043e\\u0447\\u0435\\u0440\\u0435\\u0434\\u044c.\\n\\n\\u0412\\u0445\\u043e\\u0434\\u043d\\u044b\\u0435 \\u0434\\u0430\\u043d\\u043d\\u044b\\u0435:\\n```json\\n{\\n    \\\"issue_id\\\": \\\"ISSUE-123\\\",\\n    \\\"queue\\\": \\\"NEW-QUEUE\\\"\\n}\\n```\\n\\n### \\u041f\\u043e\\u0434\\u0441\\u0447\\u0435\\u0442 \\u0437\\u0430\\u0434\\u0430\\u0447\\n\\u041f\\u043e\\u0434\\u0441\\u0447\\u0438\\u0442\\u044b\\u0432\\u0430\\u0435\\u0442 \\u043a\\u043e\\u043b\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043e \\u0437\\u0430\\u0434\\u0430\\u0447, \\u0441\\u043e\\u043e\\u0442\\u0432\\u0435\\u0442\\u0441\\u0442\\u0432\\u0443\\u044e\\u0449\\u0438\\u0445 \\u0437\\u0430\\u043f\\u0440\\u043e\\u0441\\u0443.\\n\\n\\u0412\\u0445\\u043e\\u0434\\u043d\\u044b\\u0435 \\u0434\\u0430\\u043d\\u043d\\u044b\\u0435:\\n```json\\n{\\n    \\\"query\\\": \\\"Queue: TEST AND Status: Open\\\"\\n}\\n```\\n\\n### \\u041f\\u043e\\u0438\\u0441\\u043a \\u0437\\u0430\\u0434\\u0430\\u0447\\n\\u0418\\u0449\\u0435\\u0442 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 \\u0441 \\u0438\\u0441\\u043f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u043d\\u0438\\u0435\\u043c \\u044f\\u0437\\u044b\\u043a\\u0430 \\u0437\\u0430\\u043f\\u0440\\u043e\\u0441\\u043e\\u0432 \\u042f\\u043d\\u0434\\u0435\\u043a\\u0441 \\u0422\\u0440\\u0435\\u043a\\u0435\\u0440\\u0430.\\n\\n\\u0412\\u0445\\u043e\\u0434\\u043d\\u044b\\u0435 \\u0434\\u0430\\u043d\\u043d\\u044b\\u0435:\\n```json\\n{\\n    \\\"query\\\": \\\"Queue: TEST AND Status: Open\\\",\\n    \\\"per_page\\\": 50,\\n    \\\"page\\\": 1\\n}\\n```\\n\\n### \\u0421\\u0432\\u044f\\u0437\\u044b\\u0432\\u0430\\u043d\\u0438\\u0435 \\u0437\\u0430\\u0434\\u0430\\u0447\\n\\u0421\\u0432\\u044f\\u0437\\u044b\\u0432\\u0430\\u0435\\u0442 \\u0434\\u0432\\u0435 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 \\u043c\\u0435\\u0436\\u0434\\u0443 \\u0441\\u043e\\u0431\\u043e\\u0439.\\n\\n\\u0412\\u0445\\u043e\\u0434\\u043d\\u044b\\u0435 \\u0434\\u0430\\u043d\\u043d\\u044b\\u0435:\\n```json\\n{\\n    \\\"source_issue\\\": \\\"ISSUE-123\\\",\\n    \\\"target_issue\\\": \\\"ISSUE-456\\\",\\n    \\\"link_type\\\": \\\"relates\\\"\\n}\\n```\\n\\n## \\u0422\\u0435\\u0441\\u0442\\u0438\\u0440\\u043e\\u0432\\u0430\\u043d\\u0438\\u0435\\n\\n\\u0418\\u0441\\u043f\\u043e\\u043b\\u044c\\u0437\\u0443\\u0439\\u0442\\u0435 MCP Inspector \\u0434\\u043b\\u044f \\u0442\\u0435\\u0441\\u0442\\u0438\\u0440\\u043e\\u0432\\u0430\\u043d\\u0438\\u044f \\u0444\\u0443\\u043d\\u043a\\u0446\\u0438\\u043e\\u043d\\u0430\\u043b\\u044c\\u043d\\u043e\\u0441\\u0442\\u0438 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430. \\n\", \"tools\": [], \"tools_count\": 0, \"homepage\": \"\", \"url\": \"https://github.com/urfv/yandex-tracker-mcp\", \"topics\": [\"mcp-server\", \"yandex-tracker\"], \"data_sources\": [\"github\"]}", "target": "", "id": "urfv/yandex-tracker-mcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"vwo-fme-mcp\", \"server_id\": \"wingify/vwo-fme-mcp\", \"description\": \"MCP Server for Feature Management & Experimentation\", \"readme\": \"# MCP Server for VWO Feature Management and Experimentation SDK\\n\\n[![npm version](https://img.shields.io/npm/v/vwo-fme-mcp?style=for-the-badge&color=green&logo=npm)](https://www.npmjs.com/package/vwo-fme-mcp)\\n[![License](https://img.shields.io/github/license/wingify/vwo-fme-mcp?style=for-the-badge&color=blue)](http://www.apache.org/licenses/LICENSE-2.0)\\n\\n## Overview\\n\\nThe VWO FME MCP is a tool that enables you to manage feature flags directly through your AI coding assistant. It integrates VWO's feature management system with AI development tools, allowing you to create, update, and control feature flags seamlessly within your coding environment.\\n\\n### Key Features\\n\\n- **Seamless AI Assistant Integration**: Compatible with Cursor, VS Code, and Claude\\n- **Comprehensive Feature Flag Management**: Easily create, view, list, update, and delete feature flags\\n- **Environment-Specific Controls**: Toggle features on or off across different environments\\n- **Cursor Rule Setup**: Bootstrapping simplifies the configuration of Cursor rules to deliver contextual results and integrate with the SDK\\n\\nThis tool helps developers save time by managing feature flags right where they code, without switching between different tools.\\n\\n### Required Configuration\\n\\nTo use the MCP server, you need to configure two mandatory environment variables:\\n\\n- `VWO_ACCOUNT_ID`: Your VWO Account ID.\\n- `VWO_API_KEY`: Your VWO API Key (Developers Token) for interacting with RESTful APIs\\n\\nThese credentials are required to authenticate and connect with the VWO feature management system.\\n\\n## How to Connect the MCP Server to Your Client\\n\\nYou can use the VWO MCP server with any client that supports the MCP protocol. Below are step-by-step guides for popular tools. Be sure to replace `VWO_ACCOUNT_ID` with your actual VWO API key, and `VWO_API_KEY` with your VWO API URL.\\n\\n### Cursor\\n\\n1. Go to **Cursor Settings** and select the **MCP** section.\\n2. Click on **Add new global MCP server**.\\n3. When prompted, enter the following configuration (make sure to use your real credentials):\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"vwo-fme\\\": {\\n      \\\"command\\\": \\\"npx\\\",\\n      \\\"args\\\": [\\\"-y\\\", \\\"vwo-fme-mcp@latest\\\"],\\n      \\\"env\\\": {\\n        \\\"VWO_ACCOUNT_ID\\\": \\\"VWO_ACCOUNT_ID\\\",\\n        \\\"VWO_API_KEY\\\": \\\"VWO_API_KEY\\\"\\n      }\\n    }\\n  }\\n}\\n```\\n\\n<img src=\\\"./assets/gifs/VWO_Cursor_MCP .gif\\\" />\\n\\n4. Save your changes. If everything is set up correctly, you should see a green status indicator showing the server is active.\\n\\n---\\n\\n### VS Code\\n\\n1. Open your **User Settings (JSON)** in VS Code.\\n2. Add or update the MCP server configuration as shown below:\\n\\n```json\\n\\\"mcp\\\": {\\n  \\\"servers\\\": {\\n    \\\"vwo-fme\\\": {\\n      \\\"command\\\": \\\"npx\\\",\\n      \\\"args\\\": [\\\"-y\\\", \\\"vwo-fme-mcp@latest\\\"],\\n      \\\"env\\\": {\\n        \\\"VWO_ACCOUNT_ID\\\": \\\"VWO_ACCOUNT_ID\\\",\\n        \\\"VWO_API_KEY\\\": \\\"VWO_API_KEY\\\"\\n      }\\n    }\\n  }\\n}\\n```\\n\\n<img src=\\\"./assets/gifs/VWO_VS_Code_MCP.gif\\\" />\\n\\n3. Save the settings file. The MCP server should now be available in VS Code.\\n\\n---\\n\\n### Claude Desktop\\n\\n1. Open the **Settings** menu and go to the **Developer** section.\\n2. Click **Edit Config** to open your `claude_desktop_config.json` file.\\n3. Add the following block to your configuration (replace the placeholders with your actual credentials):\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"vwo-fme\\\": {\\n      \\\"command\\\": \\\"npx\\\",\\n      \\\"args\\\": [\\\"-y\\\", \\\"vwo-fme-mcp@latest\\\"],\\n      \\\"env\\\": {\\n        \\\"VWO_ACCOUNT_ID\\\": \\\"VWO_ACCOUNT_ID\\\",\\n        \\\"VWO_API_KEY\\\": \\\"VWO_API_KEY\\\"\\n      }\\n    }\\n  }\\n}\\n```\\n\\n4. Save the file and restart Claude Desktop. Once connected, you should see a hammer icon in the chat window, confirming the MCP server is active.\\n\\n<img src=\\\"./assets/gifs/VWO_Claude_MCP.gif\\\" />\\n\\n---\\n\\nIf you use a different client, refer to its documentation for how to add a custom MCP server. The configuration pattern will be similar to the examples above.\\n\\n## Available Tools\\n\\nHere's what you can do with our feature flag management tools:\\n\\n### Cursor Bootstrapping with VWO\\n\\n1. **Bootstrap VWO** - Retrieve cursor rules and configuration settings to seamlessly manage feature flags within your project. This enables smooth integration with your SDK and leverages VWO's feature management capabilities.\\n\\n\\ud83d\\udcdd**Note**: Currently supported only in the Cursor IDE. Needs to be called once after setting up VWO FME MCP.\\n\\n### Feature Flags\\n\\n1. **Create Feature Flag** - Launch a new feature flag into your account with custom settings, metrics, and variables.\\n\\n2. **Delete Feature Flag** - Safely remove any feature flag from your account when it's no longer needed.\\n\\n3. **Get Feature Flag** - Dive into the details of any feature flag to see its current configuration and status.\\n\\n4. **List Feature Flags** - Get a bird's-eye view of all your feature flags in one place.\\n\\n5. **Update Feature Flag** - Fine-tune your feature flags by modifying their properties, metrics, and variations.\\n\\n6. **Toggle Feature Flag** - Instantly enable or disable feature flags in different environments with a single click.\\n\\n### Feature Flag Rul\\n[...truncated for length...]\", \"tools\": [{\"name\": \"VWO_ACCOUNT_ID\", \"description\": \"Your VWO Account ID.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for VWO_ACCOUNT_ID\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"VWO_API_KEY\", \"description\": \"Your VWO API Key (Developers Token) for interacting with RESTful APIs\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for VWO_API_KEY\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 2, \"homepage\": \"https://developers.vwo.com/v2/docs/fme-mcp-server\", \"url\": \"https://github.com/wingify/vwo-fme-mcp\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "wingify/vwo-fme-mcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"mcp-containers\", \"server_id\": \"metorial/mcp-containers\", \"description\": \"Containerized versions of hundreds of MCP servers \\ud83d\\udce1 \\ud83e\\udde0\", \"readme\": \"\\n<img src=\\\"./assets/repo-header.png\\\" alt=\\\"MCP Containers\\\" width=\\\"100%\\\" />\\n\\n<h1 align=\\\"center\\\">MCP Containers</h1>\\n\\n<p align=\\\"center\\\">Containerized versions of hundreds of <a href=\\\"https://modelcontextprotocol.io\\\">MCP servers</a> \\ud83d\\udce1 \\ud83e\\udde0</p>\\n\\n## Features\\n\\n- **\\ud83d\\ude80 Simple Setup** - Just pull the Docker image to use any MCP server\\n- **\\ud83d\\udee0\\ufe0f Always Up-to-Date** - We automatically update the images daily\\n- **\\ud83d\\udd12 Secure** - Run MCP servers in isolated containers\\n\\n## Motivation\\n\\nWhile experimenting with Model Context Protocol (MCP) servers, we found that setting them up could be a bit tedious and time-consuming. \\nTo simplify the process, we created containerized versions of these servers\\u2014making it quick, easy, and secure for anyone to get started.\\n\\nThis repository contains the scripts we use to build and manage these containers using [Nixpacks](https://nixpacks.com). \\nNew images are automatically built whenever changes are made to the corresponding server repositories, \\nensuring that our containers are always up-to-date.\\n\\nWe're committed to supporting as many MCP servers as possible. \\nIf there's a specific server you'd like to see included, feel free to open an issue or submit a pull request!\\n\\n## Usage\\n\\nTo use the containers, simply pull the Docker image for the server you want to use. \\nWe have provided a list of available servers below, along with their respective readme files.\\n\\n## Featured Servers\\n\\n- <img src=\\\"https://github.com/21st-dev.png?size=120\\\" width=\\\"12px\\\" height=\\\"12px\\\" /> **[21st.dev Magic AI Agent MCP Server\\n](catalog/21st-dev/magic-mcp/magic-mcp/README.md)** - Magic Component Platform (MCP) is a powerful AI-driven tool that helps developers create beautiful, modern UI components instantly through natural language descriptions. It integrates seamlessly with popular IDEs and provides a streamlined workflow for UI development.\\n\\n- <img src=\\\"https://github.com/apify.png?size=120\\\" width=\\\"12px\\\" height=\\\"12px\\\" /> **[Apify MCP Server\\n](catalog/apify/actors-mcp-server/actors-mcp-server/README.md)** - Implementation of an MCP server for all [Apify Actors](https://apify.com/store).\\n\\n- <img src=\\\"https://github.com/apimatic.png?size=120\\\" width=\\\"12px\\\" height=\\\"12px\\\" /> **[APIMatic Validator MCP Server\\n](catalog/apimatic/apimatic-validator-mcp/apimatic-validator-mcp/README.md)** - This repository provides a Model Context Protocol (MCP) Server for validating OpenAPI specifications using [APIMatic](https://www.apimatic.io/). The server processes OpenAPI files and returns validation summaries by leveraging APIMatic\\u2019s API.\\n\\n- <img src=\\\"https://github.com/AudienseCo.png?size=120\\\" width=\\\"12px\\\" height=\\\"12px\\\" /> **[\\ud83c\\udfc6 Audiense Insights MCP Server\\n](catalog/AudienseCo/mcp-audiense-insights/mcp-audiense-insights/README.md)** - This server, based on the [Model Context Protocol (MCP)](https://github.com/modelcontextprotocol), allows **Claude** or any other MCP-compatible client to interact with your [Audiense Insights](https://www.audiense.com/) account. It extracts **marketing insights and audience analysis** from Audiense reports, covering **demographic, cultural, influencer, and content engagement analysis**.\\n\\n- <img src=\\\"https://github.com/axiomhq.png?size=120\\\" width=\\\"12px\\\" height=\\\"12px\\\" /> **[Axiom MCP Server\\n](catalog/axiomhq/mcp-server-axiom/mcp-server-axiom/README.md)** - A [Model Context Protocol](https://modelcontextprotocol.io/) server implementation for [Axiom](https://axiom.co) that enables AI agents to query your data using Axiom Processing Language (APL).\\n\\n- <img src=\\\"https://github.com/base.png?size=120\\\" width=\\\"12px\\\" height=\\\"12px\\\" /> **[Base MCP Server\\n](catalog/base/base-mcp/base-mcp/README.md)** - A Model Context Protocol (MCP) server that provides onchain tools for AI applications like Claude Desktop and Cursor, allowing them to interact with the Base Network and Coinbase API.\\n\\n- <img src=\\\"https://github.com/browserbase.png?size=120\\\" width=\\\"12px\\\" height=\\\"12px\\\" /> **[Browserbase MCP Server\\n](catalog/browserbase/mcp-server-browserbase/browserbase/README.md)** - This server provides cloud browser automation capabilities using [Browserbase](https://www.browserbase.com/), [Puppeteer](https://pptr.dev/), and [Stagehand](https://github.com/browserbase/stagehand). This server enables LLMs to interact with web pages, take screenshots, and execute JavaScript in a cloud browser environment.\\n\\n- <img src=\\\"https://github.com/chargebee.png?size=120\\\" width=\\\"12px\\\" height=\\\"12px\\\" /> **[Chargebee MCP Server\\n](catalog/chargebee/agentkit/modelcontextprotocol/README.md)** - Model Context Protocol (MCP) is a [standardized protocol](https://modelcontextprotocol.io/introduction) designed to manage context between large language models (LLMs) and external systems.\\n\\n- <img src=\\\"https://github.com/chroma-core.png?size=120\\\" width=\\\"12px\\\" height=\\\"12px\\\" /> **[Chroma MCP Server\\n](catalog/chroma-core/chroma-mcp/chroma-mcp/README.md)** - This server provides data retrieval capabilities powered by Chroma, enabling AI models to create collections over generated \\n[...truncated for length...]\", \"tools\": [], \"tools_count\": 0, \"homepage\": \"https://metorial.com\", \"url\": \"https://github.com/metorial/mcp-containers\", \"topics\": [\"agent\", \"agentic-ai\", \"agentic-workflow\", \"container\", \"docker\", \"mcp\", \"modelcontextprotocol\", \"security\"], \"data_sources\": [\"github\"]}", "target": "", "id": "metorial/mcp-containers", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"mcp_kandinsky\", \"server_id\": \"ai-forever/mcp_kandinsky\", \"description\": \" MCP server for generating images using Kandinsky API.\", \"readme\": \"# MCP Kandinsky\\n\\nMCP Kandinsky \\u2014 \\u044d\\u0442\\u043e MCP (Model Context Protocol) \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440, \\u043f\\u0440\\u0435\\u0434\\u043e\\u0441\\u0442\\u0430\\u0432\\u043b\\u044f\\u044e\\u0449\\u0438\\u0439 \\u0438\\u043d\\u0441\\u0442\\u0440\\u0443\\u043c\\u0435\\u043d\\u0442 \\u0434\\u043b\\u044f \\u0433\\u0435\\u043d\\u0435\\u0440\\u0430\\u0446\\u0438\\u0438 \\u0438\\u0437\\u043e\\u0431\\u0440\\u0430\\u0436\\u0435\\u043d\\u0438\\u0439 \\u0441 \\u043f\\u043e\\u043c\\u043e\\u0449\\u044c\\u044e \\u043d\\u0435\\u0439\\u0440\\u043e\\u0441\\u0435\\u0442\\u0438 [Kandinsky](https://www.sberbank.com/promo/kandinsky/) \\u0447\\u0435\\u0440\\u0435\\u0437 \\u043e\\u0444\\u0438\\u0446\\u0438\\u0430\\u043b\\u044c\\u043d\\u044b\\u0439 API. \\u0412 \\u043d\\u0430\\u0441\\u0442\\u043e\\u044f\\u0449\\u0435\\u0435 \\u0432\\u0440\\u0435\\u043c\\u044f \\u043f\\u043e API \\u0434\\u043e\\u0441\\u0442\\u0443\\u043f\\u043d\\u0430 \\u0432\\u0435\\u0440\\u0441\\u0438\\u044f Kandinsky 3.1.\\n\\n## \\u0412\\u043e\\u0437\\u043c\\u043e\\u0436\\u043d\\u043e\\u0441\\u0442\\u0438\\n- \\u0413\\u0435\\u043d\\u0435\\u0440\\u0430\\u0446\\u0438\\u044f \\u0438\\u0437\\u043e\\u0431\\u0440\\u0430\\u0436\\u0435\\u043d\\u0438\\u0439 \\u043f\\u043e \\u0442\\u0435\\u043a\\u0441\\u0442\\u043e\\u0432\\u043e\\u043c\\u0443 \\u043e\\u043f\\u0438\\u0441\\u0430\\u043d\\u0438\\u044e (prompt)\\n- \\u041f\\u043e\\u0434\\u0434\\u0435\\u0440\\u0436\\u043a\\u0430 \\u0432\\u044b\\u0431\\u043e\\u0440\\u0430 \\u0441\\u0442\\u0438\\u043b\\u044f (DEFAULT, KANDINSKY, UHD, ANIME)\\n- \\u041f\\u043e\\u0434\\u0434\\u0435\\u0440\\u0436\\u043a\\u0430 \\u043d\\u0435\\u0433\\u0430\\u0442\\u0438\\u0432\\u043d\\u044b\\u0445 \\u043f\\u0440\\u043e\\u043c\\u043f\\u0442\\u043e\\u0432\\n- \\u041d\\u0430\\u0441\\u0442\\u0440\\u043e\\u0439\\u043a\\u0430 \\u0440\\u0430\\u0437\\u043c\\u0435\\u0440\\u0430 \\u0438\\u0437\\u043e\\u0431\\u0440\\u0430\\u0436\\u0435\\u043d\\u0438\\u044f (width, height)\\n- \\u0421\\u043e\\u0445\\u0440\\u0430\\u043d\\u0435\\u043d\\u0438\\u0435 \\u0440\\u0435\\u0437\\u0443\\u043b\\u044c\\u0442\\u0430\\u0442\\u0430 \\u0432 \\u0444\\u0430\\u0439\\u043b \\u0441 \\u043a\\u043e\\u043d\\u0442\\u0440\\u043e\\u043b\\u0435\\u043c \\u043f\\u0435\\u0440\\u0435\\u0437\\u0430\\u043f\\u0438\\u0441\\u0438\\n- \\u042f\\u0432\\u043d\\u043e\\u0435 \\u0443\\u043a\\u0430\\u0437\\u0430\\u043d\\u0438\\u0435 \\u043f\\u0430\\u043f\\u043a\\u0438 \\u043f\\u0440\\u043e\\u0435\\u043a\\u0442\\u0430 \\u0434\\u043b\\u044f \\u0441\\u043e\\u0445\\u0440\\u0430\\u043d\\u0435\\u043d\\u0438\\u044f (project_dir)\\n\\n## \\u041f\\u0435\\u0440\\u0435\\u043c\\u0435\\u043d\\u043d\\u044b\\u0435 \\u043e\\u043a\\u0440\\u0443\\u0436\\u0435\\u043d\\u0438\\u044f\\n\\u0414\\u043b\\u044f \\u0440\\u0430\\u0431\\u043e\\u0442\\u044b \\u0441 MCP Kandinsky \\u0432\\u0430\\u043c \\u043f\\u043e\\u043d\\u0430\\u0434\\u043e\\u0431\\u044f\\u0442\\u0441\\u044f \\u0434\\u0430\\u043d\\u043d\\u044b\\u0435 \\u0434\\u043b\\u044f \\u0430\\u0432\\u0442\\u043e\\u0440\\u0438\\u0437\\u0430\\u0446\\u0438\\u0438, \\u043a\\u043e\\u0442\\u043e\\u0440\\u044b\\u0435 \\u043d\\u0443\\u0436\\u043d\\u043e \\u0441\\u043e\\u0445\\u0440\\u0430\\u043d\\u0438\\u0442\\u044c \\u0432 \\u043f\\u0435\\u0440\\u0435\\u043c\\u0435\\u043d\\u043d\\u044b\\u0445 \\u043e\\u043a\\u0440\\u0443\\u0436\\u0435\\u043d\\u0438\\u044f.\\n\\n- `KANDINSKY_API_KEY` \\u2014 \\u0432\\u0430\\u0448 API-\\u043a\\u043b\\u044e\\u0447\\n- `KANDINSKY_SECRET_KEY` \\u2014 \\u0432\\u0430\\u0448 Secret-\\u043a\\u043b\\u044e\\u0447\\n\\n\\u041f\\u043e\\u043b\\u0443\\u0447\\u0438\\u0442\\u044c \\u0430\\u0432\\u0442\\u043e\\u0440\\u0438\\u0437\\u0430\\u0446\\u0438\\u043e\\u043d\\u043d\\u044b\\u0435 \\u0434\\u0430\\u043d\\u043d\\u044b\\u0435 \\u043c\\u043e\\u0436\\u043d\\u043e \\u043f\\u043e\\u0441\\u043b\\u0435 \\u0440\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0430\\u0446\\u0438\\u0438 \\u043d\\u0430 \\u0441\\u0430\\u0439\\u0442\\u0435 [FUSION BRAIN](https://fusionbrain.ai/), \\u043f\\u0435\\u0440\\u0435\\u0439\\u0434\\u044f \\u0432 \\u0440\\u0430\\u0437\\u0434\\u0435\\u043b API.\\n\\n## \\u041a\\u0430\\u043a \\u043f\\u043e\\u0434\\u043a\\u043b\\u044e\\u0447\\u0438\\u0442\\u044c MCP Kandinsky \\u043a \\u0430\\u0433\\u0435\\u043d\\u0442\\u0443 (Cursor, Windsurf \\u0438 \\u0434\\u0440.)\\n\\u0414\\u043e\\u0431\\u0430\\u0432\\u044c\\u0442\\u0435 MCP-\\u0441\\u0435\\u0440\\u0432\\u0435\\u0440 \\u0432 \\u043a\\u043e\\u043d\\u0444\\u0438\\u0433 \\u0430\\u0433\\u0435\\u043d\\u0442\\u0430, \\u043d\\u0430\\u043f\\u0440\\u0438\\u043c\\u0435\\u0440, \\u0432 \\u0444\\u0430\\u0439\\u043b `.cursor/mcp.json` \\u0438\\u043b\\u0438 \\u0430\\u043d\\u0430\\u043b\\u043e\\u0433\\u0438\\u0447\\u043d\\u044b\\u0439 \\u0434\\u043b\\u044f \\u0432\\u0430\\u0448\\u0435\\u0439 IDE:\\n\\n```json\\n\\\"mcpServers\\\": {\\n    \\\"mcp-kandinsky\\\": {\\n        \\\"command\\\": \\\"uvx\\\",\\n        \\\"args\\\": [\\n            \\\"--from\\\", \\\"mcp_kandinsky\\\", \\\"mcp-kandinsky\\\"\\n        ],\\n        \\\"enabled\\\": true,\\n        \\\"env\\\": {\\n            \\\"KANDINSKY_API_KEY\\\": \\\"\\u0412\\u0410\\u0428_API_KEY\\\",\\n            \\\"KANDINSKY_SECRET_KEY\\\": \\\"\\u0412\\u0410\\u0428_SECRET_KEY\\\"\\n        }\\n    }\\n}\\n```\\n\\n## \\u041f\\u0440\\u0438\\u043c\\u0435\\u0440 \\u0438\\u0441\\u043f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u043d\\u0438\\u044f \\u0438\\u043d\\u0441\\u0442\\u0440\\u0443\\u043c\\u0435\\u043d\\u0442\\u0430 \\u0430\\u0433\\u0435\\u043d\\u0442\\u043e\\u043c\\n\\n**\\u0412\\u044b\\u0437\\u043e\\u0432 \\u0438\\u043d\\u0441\\u0442\\u0440\\u0443\\u043c\\u0435\\u043d\\u0442\\u0430 \\u0438\\u0437 \\u0430\\u0433\\u0435\\u043d\\u0442\\u0430 (\\u043d\\u0430\\u043f\\u0440\\u0438\\u043c\\u0435\\u0440, \\u0447\\u0435\\u0440\\u0435\\u0437 Cursor):**\\n\\n```\\nmcp-kandinsky/kandinsky_generate_image\\nArguments\\n{\\n  \\\"prompt\\\": \\\"\\u0412\\u0435\\u0441\\u0435\\u043d\\u043d\\u044f\\u044f \\u041c\\u043e\\u0441\\u043a\\u0432\\u0430 \\u0432 \\u043c\\u0430\\u0435, \\u0441\\u0438\\u0440\\u0435\\u043d\\u044c, \\u0434\\u043e\\u0436\\u0434\\u044c \\u0438 \\u0441\\u043e\\u043b\\u043d\\u0446\\u0435, \\u0432 \\u0441\\u0442\\u0438\\u043b\\u0435 \\u0430\\u043a\\u0432\\u0430\\u0440\\u0435\\u043b\\u044c\\u043d\\u043e\\u0439 \\u0436\\u0438\\u0432\\u043e\\u043f\\u0438\\u0441\\u0438\\\",\\n  \\\"filename\\\": \\\"moskva_v_mae.png\\\",\\n  \\\"project_dir\\\": \\\"/Users/you/myproject\\\",\\n  \\\"width\\\": 1024,\\n  \\\"height\\\": 1024,\\n  \\\"style\\\": \\\"DEFAULT\\\",\\n  \\\"negative_prompt\\\": \\\"\\\",\\n  \\\"overwrite\\\": false\\n}\\nResponse\\n\\u0418\\u0437\\u043e\\u0431\\u0440\\u0430\\u0436\\u0435\\u043d\\u0438\\u0435 \\u0443\\u0441\\u043f\\u0435\\u0448\\u043d\\u043e \\u0441\\u0433\\u0435\\u043d\\u0435\\u0440\\u0438\\u0440\\u043e\\u0432\\u0430\\u043d\\u043e \\u0438 \\u0441\\u043e\\u0445\\u0440\\u0430\\u043d\\u0435\\u043d\\u043e \\u0432 kandinsky/moskva_v_mae.png.\\n```\\n\\n**\\u041f\\u043e\\u044f\\u0441\\u043d\\u0435\\u043d\\u0438\\u044f:**\\n- \\u0412\\u0441\\u0435 \\u043f\\u0430\\u0440\\u0430\\u043c\\u0435\\u0442\\u0440\\u044b \\u043f\\u0435\\u0440\\u0435\\u0434\\u0430\\u044e\\u0442\\u0441\\u044f \\u0447\\u0435\\u0440\\u0435\\u0437 \\u0438\\u043d\\u0442\\u0435\\u0440\\u0444\\u0435\\u0439\\u0441 \\u0430\\u0433\\u0435\\u043d\\u0442\\u0430.\\n- `project_dir` \\u2014 \\u0430\\u0431\\u0441\\u043e\\u043b\\u044e\\u0442\\u043d\\u044b\\u0439 \\u043f\\u0443\\u0442\\u044c \\u043a \\u043f\\u0430\\u043f\\u043a\\u0435 \\u043f\\u0440\\u043e\\u0435\\u043a\\u0442\\u0430, \\u0432 \\u043a\\u043e\\u0442\\u043e\\u0440\\u043e\\u0439 \\u0440\\u0430\\u0431\\u043e\\u0442\\u0430\\u0435\\u0442 \\u0430\\u0433\\u0435\\u043d\\u0442 \\u0432 \\u043d\\u0430\\u0441\\u0442\\u043e\\u044f\\u0449\\u0438\\u0439 \\u043c\\u043e\\u043c\\u0435\\u043d\\u0442. \\u041f\\u0430\\u043f\\u043a\\u0430 `kandinsky` \\u0431\\u0443\\u0434\\u0435\\u0442 \\u0441\\u043e\\u0437\\u0434\\u0430\\u043d\\u0430 \\u0432\\u043d\\u0443\\u0442\\u0440\\u0438 \\u043d\\u0435\\u0451.\\n- \\u041e\\u0442\\u0432\\u0435\\u0442 \\u2014 \\u0441\\u0442\\u0440\\u043e\\u043a\\u0430 \\u0441 \\u0440\\u0435\\u0437\\u0443\\u043b\\u044c\\u0442\\u0430\\u0442\\u043e\\u043c (\\u0443\\u0441\\u043f\\u0435\\u0445 \\u0438\\u043b\\u0438 \\u043f\\u0440\\u0438\\u0447\\u0438\\u043d\\u0430 \\u043e\\u0442\\u043a\\u0430\\u0437\\u0430).\\n- \\u0424\\u0430\\u0439\\u043b \\u0441\\u043e\\u0445\\u0440\\u0430\\u043d\\u044f\\u0435\\u0442\\u0441\\u044f \\u0432 \\u043f\\u0430\\u043f\\u043a\\u0443 `kandinsky` \\u0432 \\u0440\\u0430\\u0431\\u043e\\u0447\\u0435\\u0439 \\u0434\\u0438\\u0440\\u0435\\u043a\\u0442\\u043e\\u0440\\u0438\\u0438 \\u043f\\u0440\\u043e\\u0435\\u043a\\u0442\\u0430.\\n\\n## \\u041e\\u043f\\u0438\\u0441\\u0430\\u043d\\u0438\\u0435 \\u0438\\u043d\\u0441\\u0442\\u0440\\u0443\\u043c\\u0435\\u043d\\u0442\\u0430\\n\\n**kandinsky_generate_image**\\n\\n| \\u041f\\u0430\\u0440\\u0430\\u043c\\u0435\\u0442\\u0440         | \\u0422\\u0438\\u043f    | \\u041e\\u043f\\u0438\\u0441\\u0430\\u043d\\u0438\\u0435                                                        |\\n|------------------|--------|-----------------------------------------------------------------|\\n| prompt           | str    | \\u041e\\u043f\\u0438\\u0441\\u0430\\u043d\\u0438\\u0435 \\u0438\\u0437\\u043e\\u0431\\u0440\\u0430\\u0436\\u0435\\u043d\\u0438\\u044f                                            |\\n| filename         | str    | \\u0418\\u043c\\u044f \\u0444\\u0430\\u0439\\u043b\\u0430 \\u0434\\u043b\\u044f \\u0441\\u043e\\u0445\\u0440\\u0430\\u043d\\u0435\\u043d\\u0438\\u044f (\\u043d\\u0430\\u043f\\u0440\\u0438\\u043c\\u0435\\u0440, cat.png)                    |\\n| project_dir      | str    | \\u0410\\u0431\\u0441\\u043e\\u043b\\u044e\\u0442\\u043d\\u044b\\u0439 \\u043f\\u0443\\u0442\\u044c \\u043a \\u043f\\u0430\\u043f\\u043a\\u0435 \\u043f\\u0440\\u043e\\u0435\\u043a\\u0442\\u0430                                 |\\n| width            | int    | \\u0428\\u0438\\u0440\\u0438\\u043d\\u0430 (\\u043f\\u043e \\u0443\\u043c\\u043e\\u043b\\u0447\\u0430\\u043d\\u0438\\u044e 1024)                                      |\\n| height           | int    | \\u0412\\u044b\\u0441\\u043e\\u0442\\u0430 (\\u043f\\u043e \\u0443\\u043c\\u043e\\u043b\\u0447\\u0430\\u043d\\u0438\\u044e 1024)                                      |\\n| style            | str    | \\u0421\\u0442\\u0438\\u043b\\u044c (DEFAULT, KANDINSKY, UHD, ANIME; \\u043f\\u043e \\u0443\\u043c\\u043e\\u043b\\u0447\\u0430\\u043d\\u0438\\u044e DEFAULT)    |\\n| negative_prompt  | str    | \\u041d\\u0435\\u0433\\u0430\\u0442\\u0438\\u0432\\u043d\\u044b\\u0439 \\u043f\\u0440\\u043e\\u043c\\u043f\\u0442 (\\u043e\\u043f\\u0446\\u0438\\u043e\\u043d\\u0430\\u043b\\u044c\\u043d\\u043e)                                 |\\n| overwrite        | bool   | \\u041f\\u0435\\u0440\\u0435\\u0437\\u0430\\u043f\\u0438\\u0441\\u044b\\u0432\\u0430\\u0442\\u044c \\u0444\\u0430\\u0439\\u043b, \\u0435\\u0441\\u043b\\u0438 \\u043e\\u043d \\u0443\\u0436\\u0435 \\u0441\\u0443\\u0449\\u0435\\u0441\\u0442\\u0432\\u0443\\u0435\\u0442 (\\u043f\\u043e \\u0443\\u043c\\u043e\\u043b\\u0447\\u0430\\u043d\\u0438\\u044e False)|\\n\\n**\\u0412\\u043e\\u0437\\u0432\\u0440\\u0430\\u0449\\u0430\\u0435\\u0442:** \\u0441\\u0442\\u0440\\u043e\\u043a\\u0443-\\u0440\\u0435\\u0437\\u0443\\u043b\\u044c\\u0442\\u0430\\u0442 \\u0441 \\u0441\\u043e\\u043e\\u0431\\u0449\\u0435\\u043d\\u0438\\u0435\\u043c \\u043e\\u0431 \\u0443\\u0441\\u043f\\u0435\\u0445\\u0435 \\u0438\\u043b\\u0438 \\u043f\\u0440\\u0438\\u0447\\u0438\\u043d\\u0435 \\u043e\\u0442\\u043a\\u0430\\u0437\\u0430.\\n\\n## \\u041b\\u043e\\u0433\\u0438\\u043a\\u0430 \\u0440\\u0430\\u0431\\u043e\\u0442\\u044b\\n- \\u041f\\u0440\\u043e\\u0432\\u0435\\u0440\\u044f\\u0435\\u0442\\u0441\\u044f \\u043d\\u0430\\u043b\\u0438\\u0447\\u0438\\u0435 \\u043f\\u0430\\u043f\\u043a\\u0438 `kandinsky` \\u0432\\u043d\\u0443\\u0442\\u0440\\u0438 `project_dir`, \\u043f\\u0440\\u0438 \\u043d\\u0435\\u043e\\u0431\\u0445\\u043e\\u0434\\u0438\\u043c\\u043e\\u0441\\u0442\\u0438 \\u0441\\u043e\\u0437\\u0434\\u0430\\u0451\\u0442\\u0441\\u044f.\\n- \\u0415\\u0441\\u043b\\u0438 \\u0444\\u0430\\u0439\\u043b \\u0441 \\u0442\\u0430\\u043a\\u0438\\u043c \\u0438\\u043c\\u0435\\u043d\\u0435\\u043c \\u0443\\u0436\\u0435 \\u0435\\u0441\\u0442\\u044c \\u0438 `overwrite=False`, \\u0433\\u0435\\u043d\\u0435\\u0440\\u0430\\u0446\\u0438\\u044f \\u043d\\u0435 \\u043f\\u0440\\u043e\\u0438\\u0441\\u0445\\u043e\\u0434\\u0438\\u0442, \\u0432\\u043e\\u0437\\u0432\\u0440\\u0430\\u0449\\u0430\\u0435\\u0442\\u0441\\u044f \\u0441\\u043e\\u043e\\u0431\\u0449\\u0435\\u043d\\u0438\\u0435 \\u043e \\u043d\\u0430\\u043b\\u0438\\u0447\\u0438\\u0438 \\u0444\\u0430\\u0439\\u043b\\u0430.\\n- \\u0415\\u0441\\u043b\\u0438 \\u0444\\u0430\\u0439\\u043b\\u0430 \\u043d\\u0435\\u0442 \\u0438\\u043b\\u0438 `overwrite=True`, \\u043f\\u0440\\u043e\\u0438\\u0441\\u0445\\u043e\\u0434\\u0438\\u0442 \\u0433\\u0435\\u043d\\u0435\\u0440\\u0430\\u0446\\u0438\\u044f, \\u0444\\u0430\\u0439\\u043b \\u0441\\u043e\\u0445\\u0440\\u0430\\u043d\\u044f\\u0435\\u0442\\u0441\\u044f (\\u0438\\u043b\\u0438 \\u043f\\u0435\\u0440\\u0435\\u0437\\u0430\\u043f\\u0438\\u0441\\u044b\\u0432\\u0430\\u0435\\u0442\\u0441\\u044f).\\n- \\u0412\\u043e\\u0437\\u0432\\u0440\\u0430\\u0449\\u0430\\u0435\\u0442\\u0441\\u044f \\u0441\\u043e\\u043e\\u0431\\u0449\\u0435\\u043d\\u0438\\u0435 \\u043e\\u0431 \\u0443\\u0441\\u043f\\u0435\\u0448\\u043d\\u043e\\u043c \\u0441\\u043e\\u0445\\u0440\\u0430\\u043d\\u0435\\u043d\\u0438\\u0438 \\u0438\\u043b\\u0438 \\u043f\\u0440\\u0438\\u0447\\u0438\\u043d\\u0435 \\u043e\\u0442\\u043a\\u0430\\u0437\\u0430.\\n\\n---\\n\\u0414\\u043e\\u043a\\u0443\\u043c\\u0435\\u043d\\u0442\\u0430\\u0446\\u0438\\u044f API: https://fusionbrain.ai/docs/doc/api-dokumentaciya/\\n\\n## \\u041b\\u0438\\u0446\\u0435\\u043d\\u0437\\u0438\\u044f\\n\\n\\u042d\\u0442\\u043e\\u0442 \\u043f\\u0440\\u043e\\u0435\\u043a\\u0442 \\u0440\\u0430\\u0441\\u043f\\u0440\\u043e\\u0441\\u0442\\u0440\\u0430\\u043d\\u044f\\u0435\\u0442\\u0441\\u044f \\u043f\\u043e\\u0434 \\u043b\\u0438\\u0446\\u0435\\u043d\\u0437\\u0438\\u0435\\u0439 MIT. \\n\", \"tools\": [{\"name\": \"KANDINSKY_API_KEY\", \"description\": \"\\u2014 \\u0432\\u0430\\u0448 API-\\u043a\\u043b\\u044e\\u0447\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for KANDINSKY_API_KEY\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"KANDINSKY_SECRET_KEY\", \"description\": \"\\u2014 \\u0432\\u0430\\u0448 Secret-\\u043a\\u043b\\u044e\\u0447\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for KANDINSKY_SECRET_KEY\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"project_dir\", \"description\": \"\\u2014 \\u0430\\u0431\\u0441\\u043e\\u043b\\u044e\\u0442\\u043d\\u044b\\u0439 \\u043f\\u0443\\u0442\\u044c \\u043a \\u043f\\u0430\\u043f\\u043a\\u0435 \\u043f\\u0440\\u043e\\u0435\\u043a\\u0442\\u0430, \\u0432 \\u043a\\u043e\\u0442\\u043e\\u0440\\u043e\\u0439 \\u0440\\u0430\\u0431\\u043e\\u0442\\u0430\\u0435\\u0442 \\u0430\\u0433\\u0435\\u043d\\u0442 \\u0432 \\u043d\\u0430\\u0441\\u0442\\u043e\\u044f\\u0449\\u0438\\u0439 \\u043c\\u043e\\u043c\\u0435\\u043d\\u0442. \\u041f\\u0430\\u043f\\u043a\\u0430 `kandinsky` \\u0431\\u0443\\u0434\\u0435\\u0442 \\u0441\\u043e\\u0437\\u0434\\u0430\\u043d\\u0430 \\u0432\\u043d\\u0443\\u0442\\u0440\\u0438 \\u043d\\u0435\\u0451.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for project_dir\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"kandinsky\", \"description\": \"\\u0432 \\u0440\\u0430\\u0431\\u043e\\u0447\\u0435\\u0439 \\u0434\\u0438\\u0440\\u0435\\u043a\\u0442\\u043e\\u0440\\u0438\\u0438 \\u043f\\u0440\\u043e\\u0435\\u043a\\u0442\\u0430.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for kandinsky\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 4, \"homepage\": \"\", \"url\": \"https://github.com/ai-forever/mcp_kandinsky\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "ai-forever/mcp_kandinsky", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"file-edit-check-server\", \"server_id\": \"punkpeye/file-edit-check-server\", \"description\": \"MCP server that enforces pre-read checks and detailed commit documentation\", \"readme\": \"# File Edit Check MCP Server\\n\\nAn MCP server that enforces pre-read checks and detailed commit documentation. This server prevents blind modifications to files by requiring explicit read operations before any writes or diffs can be applied.\\n\\n## Features\\n\\n- Enforces pre-read verification before file modifications\\n- Prevents blind writes and diffs\\n- Provides detailed commit message guidance\\n- TypeScript implementation with proper error handling\\n\\n## Tools\\n\\n- `checked_read_file`: Read a file and mark it as read for future editing\\n- `checked_write_to_file`: Write to a file, requiring it to have been read first if it exists\\n- `checked_apply_diff`: Apply a diff to a file, requiring it to have been read first\\n- `list_my_tools`: List the tools registered in this server\\n\\n## Installation\\n\\n```bash\\nnpm install\\nnpm run build\\n```\\n\\n## Usage\\n\\nAdd to your MCP settings file:\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"file-edit-check\\\": {\\n      \\\"command\\\": \\\"node\\\",\\n      \\\"args\\\": [\\\"/path/to/file-edit-check-server/build/index.js\\\"],\\n      \\\"disabled\\\": false,\\n      \\\"alwaysAllow\\\": []\\n    }\\n  }\\n}\\n```\\n\", \"tools\": [{\"name\": \"checked_read_file\", \"description\": \"Read a file and mark it as read for future editing\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"checked_write_to_file\", \"description\": \"Write to a file, requiring it to have been read first if it exists\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"checked_apply_diff\", \"description\": \"Apply a diff to a file, requiring it to have been read first\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"list_my_tools\", \"description\": \"List the tools registered in this server\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for list_my_tools\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 4, \"homepage\": \"\", \"url\": \"https://github.com/punkpeye/file-edit-check-server\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "punkpeye/file-edit-check-server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"podcrawler-mcp\", \"server_id\": \"infinitimeless/podcrawler-mcp\", \"description\": \"MCP server for podcast discovery through web crawling\", \"readme\": \"# PodCrawlerMCP\\n\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n\\nAn MCP (Model Context Protocol) server for podcast discovery through web crawling. PodCrawlerMCP enables AI assistants to find podcast episodes on specific topics by crawling the web for RSS feeds.\\n\\n## Features\\n\\n- \\ud83d\\udd78\\ufe0f Crawls podcast directories to discover RSS feeds\\n- \\ud83c\\udf99\\ufe0f Parses RSS feeds to extract episode data\\n- \\ud83d\\udd0d Filters episodes by topic or domain\\n- \\ud83d\\udd0c Exposes functionality through MCP tools\\n- \\ud83e\\udd16 Seamlessly integrates with AI assistants like Claude\\n\\n## Installation\\n\\n```bash\\npip install podcrawler-mcp\\n```\\n\\nOr with Poetry:\\n\\n```bash\\npoetry add podcrawler-mcp\\n```\\n\\n## Quick Start\\n\\nRun the server directly:\\n\\n```bash\\npython -m podcrawler.server\\n```\\n\\nOr in your Python code:\\n\\n```python\\nfrom podcrawler import PodCrawlerServer\\n\\nserver = PodCrawlerServer()\\nserver.run()\\n```\\n\\n## Integrating with Claude Desktop\\n\\nAdd to your Claude Desktop configuration:\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"podcrawler\\\": {\\n      \\\"command\\\": \\\"python\\\",\\n      \\\"args\\\": [\\\"-m\\\", \\\"podcrawler.server\\\"]\\n    }\\n  }\\n}\\n```\\n\\n## Available Tools\\n\\n### discover_podcasts\\n\\nDiscovers podcasts on a specific topic.\\n\\n**Parameters:**\\n\\n- `topic` (string): The topic to search for (e.g., \\\"technology\\\", \\\"history\\\")\\n- `max_results` (integer, optional): Maximum number of results to return (default: 10)\\n\\n**Example Usage:**\\n\\nWhat are some science podcasts about black holes?\\n\\n## Project Structure\\n\\n```\\npodcrawler-mcp/\\n\\u251c\\u2500\\u2500 podcrawler/                # Main package\\n\\u2502   \\u251c\\u2500\\u2500 __init__.py            # Package initialization\\n\\u2502   \\u251c\\u2500\\u2500 server.py              # MCP server implementation\\n\\u2502   \\u251c\\u2500\\u2500 tools/                 # MCP tools\\n\\u2502   \\u2502   \\u251c\\u2500\\u2500 __init__.py\\n\\u2502   \\u2502   \\u2514\\u2500\\u2500 discovery.py       # Podcast discovery tool\\n\\u2502   \\u251c\\u2500\\u2500 crawler/               # Web crawling components\\n\\u2502   \\u2502   \\u251c\\u2500\\u2500 __init__.py\\n\\u2502   \\u2502   \\u251c\\u2500\\u2500 spider.py          # Web crawler implementation\\n\\u2502   \\u2502   \\u2514\\u2500\\u2500 parser.py          # RSS feed parser\\n\\u2502   \\u2514\\u2500\\u2500 utils/                 # Utility functions\\n\\u2502       \\u251c\\u2500\\u2500 __init__.py\\n\\u2502       \\u251c\\u2500\\u2500 filtering.py       # Topic filtering utilities\\n\\u2502       \\u2514\\u2500\\u2500 formatting.py      # Output formatting utilities\\n\\u251c\\u2500\\u2500 tests/                     # Tests\\n\\u2502   \\u251c\\u2500\\u2500 __init__.py\\n\\u2502   \\u2514\\u2500\\u2500 test_server.py         # Server tests\\n\\u251c\\u2500\\u2500 examples/                  # Usage examples\\n\\u2502   \\u2514\\u2500\\u2500 basic_discovery.py     # Basic discovery example\\n\\u251c\\u2500\\u2500 pyproject.toml             # Project configuration\\n\\u251c\\u2500\\u2500 README.md                  # Project documentation\\n\\u251c\\u2500\\u2500 LICENSE                    # MIT License\\n\\u2514\\u2500\\u2500 CONTRIBUTING.md            # Contribution guidelines\\n```\\n\\n## Development\\n\\n1. Clone the repository\\n    \\n    ```bash\\n    git clone https://github.com/infinitimeless/podcrawler-mcp.git\\n    cd podcrawler-mcp\\n    ```\\n    \\n2. Install dependencies using Poetry\\n    \\n    ```bash\\n    poetry install\\n    ```\\n    \\n3. Run tests\\n    \\n    ```bash\\n    poetry run pytest\\n    ```\\n\\n## Contributing\\n\\nContributions are welcome! Please see [CONTRIBUTING.md](CONTRIBUTING.md) for details.\\n\\n## License\\n\\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\", \"tools\": [{\"name\": \"topic\", \"description\": \"(string): The topic to search for (e.g., \\\"technology\\\", \\\"history\\\")\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}}, \"required\": [\"query\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"max_results\", \"description\": \"(integer, optional): Maximum number of results to return (default: 10)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for max_results\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 2, \"homepage\": \"\", \"url\": \"https://github.com/infinitimeless/podcrawler-mcp\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "infinitimeless/podcrawler-mcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"bing-cn-mcp-server\", \"server_id\": \"yan5236/bing-cn-mcp-server\", \"description\": \"\", \"readme\": \"# Bing CN MCP\\r\\n\\r\\n\\u4e00\\u4e2a\\u57fa\\u4e8e MCP (Model Context Protocol) \\u7684\\u4e2d\\u6587\\u5fc5\\u5e94\\u641c\\u7d22\\u5de5\\u5177\\uff0c\\u53ef\\u4ee5\\u76f4\\u63a5\\u901a\\u8fc7 Claude \\u6216\\u5176\\u4ed6\\u652f\\u6301 MCP \\u7684 AI \\u6765\\u641c\\u7d22\\u5fc5\\u5e94\\u5e76\\u83b7\\u53d6\\u7f51\\u9875\\u5185\\u5bb9\\u3002\\r\\n\\r\\n## \\u7279\\u70b9\\r\\n\\r\\n- \\u652f\\u6301\\u4e2d\\u6587\\u641c\\u7d22\\u7ed3\\u679c\\r\\n- \\u65e0\\u9700 API \\u5bc6\\u94a5\\uff0c\\u76f4\\u63a5\\u722c\\u53d6\\u5fc5\\u5e94\\u641c\\u7d22\\u7ed3\\u679c\\r\\n- \\u63d0\\u4f9b\\u7f51\\u9875\\u5185\\u5bb9\\u83b7\\u53d6\\u529f\\u80fd\\r\\n- \\u8f7b\\u91cf\\u7ea7\\uff0c\\u6613\\u4e8e\\u5b89\\u88c5\\u548c\\u4f7f\\u7528\\r\\n- \\u4e13\\u4e3a\\u4e2d\\u6587\\u7528\\u6237\\u4f18\\u5316\\r\\n- \\u652f\\u6301 Claude \\u7b49 AI \\u5de5\\u5177\\u8c03\\u7528\\r\\n\\r\\n## \\u5b89\\u88c5\\r\\n\\r\\n### \\u5168\\u5c40\\u5b89\\u88c5\\r\\n\\r\\n```bash\\r\\nnpm install -g bing-cn-mcp\\r\\n```\\r\\n\\r\\n### \\u6216\\u8005\\u76f4\\u63a5\\u901a\\u8fc7 npx \\u8fd0\\u884c\\r\\n\\r\\n```bash\\r\\nnpx bing-cn-mcp\\r\\n```\\r\\n\\r\\n## \\u4f7f\\u7528\\u65b9\\u6cd5\\r\\n\\r\\n### \\u542f\\u52a8\\u670d\\u52a1\\u5668\\r\\n\\r\\n```bash\\r\\nbing-cn-mcp\\r\\n```\\r\\n\\r\\n\\u6216\\u8005\\u4f7f\\u7528 npx\\uff1a\\r\\n\\r\\n```bash\\r\\nnpx bing-cn-mcp\\r\\n```\\r\\n\\r\\n### \\u5728\\u652f\\u6301 MCP \\u7684\\u73af\\u5883\\u4e2d\\u4f7f\\u7528\\r\\n\\r\\n\\u5728\\u652f\\u6301 MCP \\u7684\\u73af\\u5883\\uff08\\u5982 Cursor\\uff09\\u4e2d\\uff0c\\u914d\\u7f6e MCP \\u670d\\u52a1\\u5668\\u6765\\u4f7f\\u7528\\u5b83\\uff1a\\r\\n\\r\\n1. \\u627e\\u5230 MCP \\u914d\\u7f6e\\u6587\\u4ef6\\uff08\\u4f8b\\u5982 `.cursor/mcp.json`\\uff09\\r\\n2. \\u6dfb\\u52a0\\u670d\\u52a1\\u5668\\u914d\\u7f6e\\uff1a\\r\\n\\r\\n```json\\r\\n{\\r\\n  \\\"mcpServers\\\": {\\r\\n    \\\"bingcn\\\": {\\r\\n      \\\"command\\\": \\\"npx\\\",\\r\\n      \\\"args\\\": [\\r\\n        \\\"bing-cn-mcp\\\"\\r\\n      ]\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\nWindows\\u7528\\u6237\\u7684\\u914d\\u7f6e\\r\\n\\r\\n```json\\r\\n{\\r\\n  \\\"mcpServers\\\": {\\r\\n    \\\"bingcnmcp\\\": {\\r\\n        \\\"command\\\": \\\"cmd\\\",\\r\\n        \\\"args\\\": [\\r\\n          \\\"/c\\\",\\r\\n          \\\"npx\\\",\\r\\n          \\\"bing-cn-mcp\\\"\\r\\n      ]\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n3. \\u73b0\\u5728\\u4f60\\u53ef\\u4ee5\\u5728 Claude \\u4e2d\\u4f7f\\u7528 `mcp__bing_search` \\u548c `mcp__fetch_webpage` \\u5de5\\u5177\\u4e86\\r\\n\\r\\n## \\u652f\\u6301\\u7684\\u5de5\\u5177\\r\\n\\r\\n### bing_search\\r\\n\\r\\n\\u641c\\u7d22\\u5fc5\\u5e94\\u5e76\\u83b7\\u53d6\\u7ed3\\u679c\\u5217\\u8868\\u3002\\r\\n\\r\\n\\u53c2\\u6570\\uff1a\\r\\n- `query`: \\u641c\\u7d22\\u5173\\u952e\\u8bcd\\r\\n- `num_results`: \\u8fd4\\u56de\\u7ed3\\u679c\\u6570\\u91cf\\uff08\\u9ed8\\u8ba4\\u4e3a 5\\uff09\\r\\n\\r\\n### fetch_webpage\\r\\n\\r\\n\\u6839\\u636e\\u641c\\u7d22\\u7ed3\\u679c ID \\u83b7\\u53d6\\u5bf9\\u5e94\\u7f51\\u9875\\u7684\\u5185\\u5bb9\\u3002\\r\\n\\r\\n\\u53c2\\u6570\\uff1a\\r\\n- `result_id`: \\u4ece bing_search \\u8fd4\\u56de\\u7684\\u7ed3\\u679c ID\\r\\n\\r\\n## \\u81ea\\u5b9a\\u4e49\\u914d\\u7f6e\\r\\n\\r\\n\\u4f60\\u53ef\\u4ee5\\u901a\\u8fc7\\u521b\\u5efa `.env` \\u6587\\u4ef6\\u6765\\u81ea\\u5b9a\\u4e49\\u914d\\u7f6e\\uff0c\\u4f8b\\u5982\\uff1a\\r\\n\\r\\n```\\r\\n# \\u7528\\u6237\\u4ee3\\u7406\\u8bbe\\u7f6e\\r\\nUSER_AGENT=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36\\r\\n```\\r\\n\\r\\n## \\u6ce8\\u610f\\u4e8b\\u9879\\r\\n\\r\\n- \\u67d0\\u4e9b\\u7f51\\u7ad9\\u53ef\\u80fd\\u6709\\u53cd\\u722c\\u866b\\u63aa\\u65bd\\uff0c\\u5bfc\\u81f4 `fetch_webpage` \\u65e0\\u6cd5\\u83b7\\u53d6\\u5185\\u5bb9\\r\\n- \\u672c\\u5de5\\u5177\\u4ec5\\u4f9b\\u5b66\\u4e60\\u548c\\u7814\\u7a76\\u4f7f\\u7528\\uff0c\\u8bf7\\u52ff\\u7528\\u4e8e\\u5546\\u4e1a\\u76ee\\u7684\\r\\n- \\u8bf7\\u9075\\u5b88\\u5fc5\\u5e94\\u7684\\u4f7f\\u7528\\u6761\\u6b3e\\u548c\\u76f8\\u5173\\u6cd5\\u5f8b\\u6cd5\\u89c4\\r\\n\\r\\n## \\u4f5c\\u8005\\r\\n\\r\\nslcatwujian\\r\\n\\r\\n## \\u8bb8\\u53ef\\u8bc1\\r\\n\\r\\nMIT \\r\\n\", \"tools\": [{\"name\": \"mcp__bing_search\", \"description\": \"\\u548c `mcp__fetch_webpage` \\u5de5\\u5177\\u4e86\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}}, \"required\": [\"query\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"query\", \"description\": \"\\u641c\\u7d22\\u5173\\u952e\\u8bcd\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}}, \"required\": [\"query\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"num_results\", \"description\": \"\\u8fd4\\u56de\\u7ed3\\u679c\\u6570\\u91cf\\uff08\\u9ed8\\u8ba4\\u4e3a 5\\uff09\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for num_results\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"result_id\", \"description\": \"\\u4ece bing_search \\u8fd4\\u56de\\u7684\\u7ed3\\u679c ID\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"Search query or term\"}}, \"required\": [\"query\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"fetch_webpage\", \"description\": \"\\u65e0\\u6cd5\\u83b7\\u53d6\\u5185\\u5bb9\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for fetch_webpage\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}], \"tools_count\": 5, \"homepage\": \"\", \"url\": \"https://github.com/yan5236/bing-cn-mcp-server\", \"topics\": [], \"data_sources\": [\"github\"]}", "target": "", "id": "yan5236/bing-cn-mcp-server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"autowpmcp\", \"server_id\": \"njengah/autowpmcp\", \"description\": \"AutoWP MCP (Model Context Protocol) server connects Claude to WordPress site and allows users to ask Claude to write blog posts and automatically publish them to WordPress sites.\", \"readme\": \"# AutoWP MCP Server\\n\\n![AutoWP MCP Login Prompt Example](screenshots/autowp_banner_.png)\\n\\n![MCP badge](https://badge.mcpx.dev \\\"MCP\\\") ![MCP Server](https://badge.mcpx.dev?type=server)\\n\\nAutoWP MCP (Model Context Protocol) server connects Claude to WordPress sites and allows users to ask Claude to work on different tasks on their WordPress site like create and post blog posts and other WordPress site management tasks. It acts as a bridge between LLM clients like Claude Desktop and WordPress websites.\\n\\n![AutoWP MCP Login Prompt Example](screenshots/login_prompt-example.gif)\\n\\n## Features\\n\\nIt provides a secure, standardized way for AI assistants to interact with WordPress sites through the WordPress REST API, without the need for direct database access.\\n\\n## Key Capabilities\\n\\n- **Authentication & Security**\\n  - Handles secure login using WordPress application passwords\\n  - Manages authentication sessions safely\\n  - Test site connectivity before attempting operations\\n\\n- **Content Management**\\n  - Creates and publishes blog posts\\n  - Formats raw text into WordPress-compatible HTML\\n  - Manages post metadata (titles, excerpts, status)\\n\\n- **Site Information Access**\\n  - Retrieves available categories and tags\\n  - Accesses the site structure and permissions\\n  - Respects user role limitations (like your contributor role)\\n\\n- **Draft Workflow**\\n  - Saves drafts locally for editing\\n  - Loads previously saved content\\n  - Enables iterative content development\\n\\n## Installation & Authentication\\n\\n### Setup\\n\\n1. **Install & Build**\\n\\n   ```bash\\n   npm install\\n   npm run build\\n   npm start\\n\\n2. **Configure Claude Desktop**\\n\\n  Add to your Claude Desktop MCP configuration:\\n\\n  ```json\\n    {\\n    \\\"mcpServers\\\": {\\n      \\\"autowp\\\": {\\n        \\\"command\\\": \\\"node\\\",\\n        \\\"args\\\": [\\\"/path/to/your/autowp-mcp/build/index.js\\\"]\\n      }\\n    }\\n  }\\n  ```\\n\\n## Available Tools\\n\\n### Authentication\\n\\n- **authenticate-wp** \\u2013 Connect to your WordPress site  \\n- **test-wp-connection** \\u2013 Test if a WordPress site is reachable\\n\\n---\\n\\n### Content Management\\n\\n- **create-blog-post** \\u2013 Create new blog posts with categories/tags  \\n- **get-wp-categories** \\u2013 List all available categories  \\n- **get-wp-tags** \\u2013 List all available tags  \\n- **format-wp-content** \\u2013 Convert text to WordPress-ready HTML\\n\\n  ### Draft Management\\n\\n  - **save-draft** \\u2013 Save posts locally for later  \\n  - **load-draft** \\u2013 Load previously saved drafts\\n\\n---\\n\\n## Media Management Tools\\n\\n### Core Media Operations\\n\\n- **upload-media** \\u2013 Upload files from local paths or URLs with metadata  \\n- **list-media** \\u2013 Browse media library with pagination and filters  \\n- **search-media** \\u2013 Find media by keyword, type, or date range  \\n- **get-media-details** \\u2013 Retrieve detailed media information  \\n- **delete-media** \\u2013 Remove files from media library  \\n- **bulk-delete-media** \\u2013 Delete multiple media files at once  \\n\\n### Media Enhancement\\n\\n- **edit-media-metadata** \\u2013 Update title, caption, alt text, description  \\n- **set-featured-image** \\u2013 Assign featured images to posts  \\n- **optimize-media** \\u2013 Compress images via external APIs (e.g., TinyPNG)\\n\\n---\\n\\n## Taxonomy & Classification Tools\\n\\n### Existing Taxonomies\\n\\n- **get-wp-categories** \\u2013 List all WordPress categories  \\n- **get-wp-tags** \\u2013 List all WordPress tags  \\n\\n### Taxonomy Management\\n\\n- **create-category** \\u2013 Create new categories with hierarchy support  \\n- **create-tag** \\u2013 Create new tags with descriptions  \\n- **update-category** \\u2013 Rename/edit categories and hierarchy  \\n- **update-tag** \\u2013 Rename/edit tag details  \\n- **delete-category** \\u2013 Remove categories with force option  \\n- **delete-tag** \\u2013 Remove tags with force option  \\n\\n### Advanced Taxonomy Operations\\n\\n- **merge-categories** \\u2013 Combine categories (moves posts, optionally deletes source)  \\n- **assign-categories-to-posts** \\u2013 Bulk assign categories to multiple posts  \\n- **assign-tags-to-posts** \\u2013 Bulk assign tags to multiple posts  \\n- **list-taxonomies** \\u2013 View all taxonomies including custom ones\\n\\n---\\n\\n## User Management Tools\\n\\n### Core User Operations\\n\\n- **list-users** \\u2013 List WordPress users with filters like role, search, or registration date  \\n- **create-user** \\u2013 Create a new user with optional profile and role details  \\n- **update-user** \\u2013 Update user profile data including email, name, bio, and password  \\n- **disable-user** \\u2013 Temporarily deactivate a user account with an optional reason  \\n- **reset-user-password** \\u2013 Generate a password reset link or email it to the user  \\n\\n### Role & Permission Management\\n\\n- **set-user-role** \\u2013 Assign a specific role to a user, optionally removing others  \\n- **list-user-roles** \\u2013 View all available WordPress user roles and their capabilities  \\n\\n---\\n\\n## Upcoming Tools\\n\\n### Plugin Management\\n\\n- **list-plugins** \\u2013 List all WordPress plugins with their activation status\\n- **install-plugin** \\u2013 Install a plugin from the WordPress.org repository\\n- **toggle-plugin** \\u2013 Activate or deactivate a WordPress plugin\\n- **update-plugin** \\u2013 Update a WordPress plugin to its latest version\\n- **delete\\n[...truncated for length...]\", \"tools\": [], \"tools_count\": 0, \"homepage\": \"https://njengah.com\", \"url\": \"https://github.com/Njengah/autowpmcp\", \"topics\": [\"claude\", \"claude-ai\", \"mcp-server\", \"model-context-protocol\", \"model-context-protocol-servers\", \"mpc\", \"wordpress\", \"wordpressrestapi\"], \"data_sources\": [\"github\"]}", "target": "", "id": "njengah/autowpmcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"YNAB Server\", \"server_id\": \"@chuckbryan/ynabmcpserver\", \"description\": \"Enable AI assistants to securely access and analyze your YNAB financial data. Query budgets, transactions, accounts, and get financial insights while keeping your data private. Integrate your personal finance information seamlessly with AI tools for enhanced budgeting and spending analysis.\", \"readme\": \"\", \"tools\": [{\"name\": \"GetUserInfo\", \"description\": \"Get user information from YNAB\", \"inputSchema\": {\"type\": \"object\", \"title\": \"GetUserInfo\", \"properties\": {}, \"description\": \"Get user information from YNAB\"}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"GetBudgetDetails\", \"description\": \"Get details for a specific budget\", \"inputSchema\": {\"type\": \"object\", \"title\": \"GetBudgetDetails\", \"required\": [\"budgetId\"], \"properties\": {\"budgetId\": {\"type\": \"string\", \"description\": \"The ID of the budget to retrieve. Use 'last-used' for the most recently used budget.\"}}, \"description\": \"Get details for a specific budget\"}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"GetRecentActivitySummary\", \"description\": \"Get recent activity summary\", \"inputSchema\": {\"type\": \"object\", \"title\": \"GetRecentActivitySummary\", \"required\": [\"budgetId\"], \"properties\": {\"days\": {\"type\": \"integer\", \"default\": 30, \"description\": \"Number of days to include in the summary (default: 30).\"}, \"budgetId\": {\"type\": \"string\", \"description\": \"The ID of the budget. Use 'last-used' for the most recently used budget.\"}}, \"description\": \"Get recent activity summary\"}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"GetBudgetMonths\", \"description\": \"Get budget months\", \"inputSchema\": {\"type\": \"object\", \"title\": \"GetBudgetMonths\", \"required\": [\"budgetId\"], \"properties\": {\"budgetId\": {\"type\": \"string\", \"description\": \"The ID of the budget. Use 'last-used' for the most recently used budget.\"}}, \"description\": \"Get budget months\"}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"ListAccountTransactions\", \"description\": \"List account transactions\", \"inputSchema\": {\"type\": \"object\", \"title\": \"ListAccountTransactions\", \"required\": [\"budgetId\", \"accountId\"], \"properties\": {\"budgetId\": {\"type\": \"string\", \"description\": \"The ID of the budget. Use 'last-used' for the most recently used budget.\"}, \"accountId\": {\"type\": \"string\", \"description\": \"The ID of the account.\"}, \"sinceDate\": {\"type\": \"string\", \"default\": null, \"description\": \"Optional date to filter transactions on or after this date (ISO format: YYYY-MM-DD).\"}}, \"description\": \"List account transactions\"}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"ListBudgets\", \"description\": \"List all budgets in your YNAB account\", \"inputSchema\": {\"type\": \"object\", \"title\": \"ListBudgets\", \"properties\": {}, \"description\": \"List all budgets in your YNAB account\"}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"ListPayees\", \"description\": \"List payees in a budget\", \"inputSchema\": {\"type\": \"object\", \"title\": \"ListPayees\", \"required\": [\"budgetId\"], \"properties\": {\"budgetId\": {\"type\": \"string\", \"description\": \"The ID of the budget. Use 'last-used' for the most recently used budget.\"}}, \"description\": \"List payees in a budget\"}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"GetCategoryDetails\", \"description\": \"Get details for a specific category\", \"inputSchema\": {\"type\": \"object\", \"title\": \"GetCategoryDetails\", \"required\": [\"budgetId\", \"categoryId\"], \"properties\": {\"budgetId\": {\"type\": \"string\", \"description\": \"The ID of the budget. Use 'last-used' for the most recently used budget.\"}, \"categoryId\": {\"type\": \"string\", \"description\": \"The ID of the category.\"}}, \"description\": \"Get details for a specific category\"}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"ListCategories\", \"description\": \"List all categories in a budget\", \"inputSchema\": {\"type\": \"object\", \"title\": \"ListCategories\", \"required\": [\"budgetId\"], \"properties\": {\"budgetId\": {\"type\": \"string\", \"description\": \"The ID of the budget. Use 'last-used' for the most recently used budget.\"}}, \"description\": \"List all categories in a budget\"}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"GetCurrentMonthSnapshot\", \"description\": \"Get current month budget snapshot\", \"inputSchema\": {\"type\": \"object\", \"title\": \"GetCurrentMonthSnapshot\", \"required\": [\"budgetId\"], \"properties\": {\"budgetId\": {\"type\": \"string\", \"description\": \"The ID of the budget. Use 'last-used' for the most recently used budget.\"}}, \"description\": \"Get current month budget snapshot\"}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"ListAccounts\", \"description\": \"List accounts in a budget\", \"inputSchema\": {\"type\": \"object\", \"title\": \"ListAccounts\", \"required\": [\"budgetId\"], \"properties\": {\"budgetId\": {\"type\": \"string\", \"description\": \"The ID of the budget. Use 'last-used' for the most recently used budget.\"}}, \"description\": \"List accounts in a budget\"}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"GetIncomeVsExpenseSummary\", \"description\": \"Get income versus expense summary\", \"inputSchema\": {\"type\": \"object\", \"title\": \"GetIncomeVsExpenseSummary\", \"required\": [\"budgetId\"], \"properties\": {\"months\": {\"type\": \"integer\", \"default\": 3, \"description\": \"Number of months to include in the summary (default: 3).\"}, \"budgetId\": {\"type\": \"string\", \"description\": \"The ID of the budget. Use 'last-used' for the most recently used budget.\"}}, \"description\": \"Get income versus expense summary\"}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"SearchTransactions\", \"description\": \"Search for transactions\", \"inputSchema\": {\"type\": \"object\", \"title\": \"SearchTransactions\", \"required\": [\"budgetId\"], \"properties\": {\"type\": {\"type\": \"string\", \"default\": null, \"description\": \"Optional type to filter by ('uncategorized' or 'unapproved').\"}, \"limit\": {\"type\": \"integer\", \"default\": 20, \"description\": \"Maximum number of transactions to return (default: 20).\"}, \"budgetId\": {\"type\": \"string\", \"description\": \"The ID of the budget. Use 'last-used' for the most recently used budget.\"}, \"sinceDate\": {\"type\": \"string\", \"default\": null, \"description\": \"Optional date to filter transactions on or after this date (ISO format: YYYY-MM-DD).\"}, \"searchTerm\": {\"type\": \"string\", \"default\": null, \"description\": \"Optional search term to filter by (payee, category, memo).\"}}, \"description\": \"Search for transactions\"}, \"source\": \"smithery\", \"access_level\": \"read\"}], \"tools_count\": 13, \"homepage\": \"https://smithery.ai/server/@ChuckBryan/ynabmcpserver\", \"url\": \"\", \"topics\": [], \"data_sources\": [\"smithery\"]}", "target": "", "id": "@chuckbryan/ynabmcpserver", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"GitHub MCP Server for Pera1\", \"server_id\": \"@kazuph/mcp-github-pera1\", \"description\": \"A Model Context Protocol server that connects GitHub code to Claude.ai utilizing the Pera1 service for code extraction.\", \"readme\": \"\", \"tools\": [{\"name\": \"github_get_code\", \"description\": \"\\nRetrieves code from a GitHub repository URL and combines it into a single file. The URL must start with \\\"https://\\\".\\n\\nQuery Parameters:\\n- dir: Filter files by directory paths (comma-separated)\\n  Example: ?dir=src/components,tests/unit\\n- ext: Filter files by extensions (comma-separated)\\n  Example: ?ext=ts,tsx,js\\n- mode: Display mode\\n  Example: ?mode=tree (Shows directory structure only)\\n- branch: Specify the branch to fetch from (optional)\\n  Example: ?branch=feature/new-feature\\n\\nExamples:\\n1. For GitHub tree URLs with branch:\\n  https://github.com/kazuph/pera1/tree/feature/great-branch\\n  This URL will be automatically parsed to extract the branch information.\\n\\n2. For specific directory in a branch:\\n  url: https://github.com/modelcontextprotocol/servers\\n  dir: src/fetch\\n  branch: develop\\n\\nThe tool will correctly parse the repository structure and fetch the files from the specified branch.\\n\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"required\": [\"url\"], \"properties\": {\"dir\": {\"type\": \"string\"}, \"ext\": {\"type\": \"string\"}, \"url\": {\"type\": \"string\", \"format\": \"uri\"}, \"mode\": {\"enum\": [\"tree\"], \"type\": \"string\"}, \"branch\": {\"type\": \"string\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"read\"}], \"tools_count\": 1, \"homepage\": \"https://smithery.ai/server/@kazuph/mcp-github-pera1\", \"url\": \"\", \"topics\": [], \"data_sources\": [\"smithery\"]}", "target": "", "id": "@kazuph/mcp-github-pera1", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"Juhe News Server\", \"server_id\": \"@juhemcp/jnews-mcp-server\", \"description\": \"Fetch the latest trending news headlines and detailed content effortlessly. Access a variety of news categories including recommendations, domestic, technology, and sports. Enhance your applications with real-time news updates using our easy-to-integrate server.\", \"readme\": \"\", \"tools\": [{\"name\": \"get_news_list\", \"description\": \"\\u901a\\u8fc7\\u65b0\\u95fb\\u7c7b\\u578b\\u83b7\\u53d6\\u4eca\\u65e5\\u70ed\\u70b9\\u65b0\\u95fb\\u5934\\u6761\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"page\": {\"type\": \"number\", \"description\": \"\\u5f53\\u524d\\u9875\\u6570, \\u9ed8\\u8ba41, \\u6700\\u592750\"}, \"type\": {\"type\": \"string\", \"description\": \"\\u65b0\\u95fb\\u7c7b\\u578b:top(\\u63a8\\u8350,\\u9ed8\\u8ba4),guonei(\\u56fd\\u5185),guoji(\\u56fd\\u9645),yule(\\u5a31\\u4e50),tiyu(\\u4f53\\u80b2),junshi(\\u519b\\u4e8b),keji(\\u79d1\\u6280),caijing(\\u8d22\\u7ecf),youxi(\\u6e38\\u620f),qiche(\\u6c7d\\u8f66),jiankang(\\u5065\\u5eb7)\"}, \"page_size\": {\"type\": \"number\", \"description\": \"\\u6bcf\\u9875\\u8fd4\\u56de\\u65b0\\u95fb\\u6761\\u6570, \\u9ed8\\u8ba420, \\u6700\\u592750\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"get_news_content\", \"description\": \"\\u6839\\u636e\\u65b0\\u95fbID\\u83b7\\u53d6\\u65b0\\u95fb\\u7684\\u8be6\\u7ec6\\u5185\\u5bb9\", \"inputSchema\": {\"type\": \"object\", \"required\": [\"uniquekey\"], \"properties\": {\"uniquekey\": {\"type\": \"string\", \"description\": \"\\u65b0\\u95fbID(gew_news_list\\u4e2d\\u8fd4\\u56de\\u7684uniquekey)\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}], \"tools_count\": 2, \"homepage\": \"https://smithery.ai/server/@juhemcp/jnews-mcp-server\", \"url\": \"\", \"topics\": [], \"data_sources\": [\"smithery\"]}", "target": "", "id": "@juhemcp/jnews-mcp-server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"Celestial Positioning Server\", \"server_id\": \"@rkm1999/celestialmcp\", \"description\": \"Provide precise astronomical data including celestial object positions, rise and set times, and detailed object information to enhance your astronomical queries. Access extensive star and deep sky object catalogs to support rich celestial computations. Integrate seamlessly with your applications to deliver accurate and timely astronomical insights.\", \"readme\": \"\", \"tools\": [{\"name\": \"getCelestialDetails\", \"description\": \"Get detailed information about a celestial object including rise/set times, phase information, distance, and upcoming moon phases\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"dateTime\": {\"type\": \"string\", \"description\": \"ISO format date and time for the observation (e.g., \\\"2025-04-15T21:30:00\\\"), only used if useSystemTime is false\"}, \"latitude\": {\"type\": \"string\", \"description\": \"Observer latitude in degrees (optional, defaults to Vancouver)\"}, \"elevation\": {\"type\": \"string\", \"description\": \"Observer elevation in meters (optional, defaults to Vancouver)\"}, \"longitude\": {\"type\": \"string\", \"description\": \"Observer longitude in degrees (optional, defaults to Vancouver)\"}, \"objectName\": {\"type\": \"string\", \"description\": \"Name of the celestial object (planet, star, messier object, etc.)\"}, \"useSystemTime\": {\"type\": \"boolean\", \"description\": \"Whether to use the current system time (true) or a custom time (false)\"}}}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"getCelestialPosition\", \"description\": \"Get altitude and azimuth coordinates for a celestial object using system time and configured location\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"dateTime\": {\"type\": \"string\", \"description\": \"ISO format date and time for the observation (e.g., \\\"2025-04-15T21:30:00\\\"), only used if useSystemTime is false\"}, \"pressure\": {\"type\": \"string\", \"description\": \"Atmospheric pressure in hPa (for refraction correction)\"}, \"objectName\": {\"type\": \"string\", \"description\": \"Name of the celestial object (planet, star, messier object, etc.)\"}, \"temperature\": {\"type\": \"string\", \"description\": \"Temperature in Celsius (for refraction correction)\"}, \"useSystemTime\": {\"type\": \"boolean\", \"description\": \"Whether to use the current system time (true) or a custom time (false)\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"listCelestialObjects\", \"description\": \"List all available celestial objects that can be queried\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"category\": {\"type\": \"string\", \"description\": \"Optional category filter (\\\"planets\\\", \\\"stars\\\", \\\"dso\\\", or \\\"all\\\"). Default is \\\"all\\\".\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}], \"tools_count\": 3, \"homepage\": \"https://smithery.ai/server/@Rkm1999/CelestialMCP\", \"url\": \"\", \"topics\": [], \"data_sources\": [\"smithery\"]}", "target": "", "id": "@rkm1999/celestialmcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"GitLab Merge Request Integration\", \"server_id\": \"@kopfrechner/gitlab-mr-mcp\", \"description\": \"Interact seamlessly with GitLab repositories to manage merge requests and issues. Fetch details, add comments, and streamline your code review process with ease.\", \"readme\": \"\", \"tools\": [{\"name\": \"get_projects\", \"description\": \"Get a list of projects with id, name, description, web_url and other useful information.\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"properties\": {\"verbose\": {\"type\": \"boolean\", \"default\": false, \"description\": \"By default a filtered version is returned, suitable for most cases. Only set true if more information is needed.\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"list_open_merge_requests\", \"description\": \"Lists all open merge requests in the project\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"required\": [\"project_id\"], \"properties\": {\"verbose\": {\"type\": \"boolean\", \"default\": false, \"description\": \"By default a filtered version is returned, suitable for most cases. Only set true if more information is needed.\"}, \"project_id\": {\"type\": \"number\", \"description\": \"The project ID of the merge request\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"get_merge_request_details\", \"description\": \"Get details about a specific merge request of a project like title, source-branch, target-branch, web_url, ...\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"required\": [\"project_id\", \"merge_request_iid\"], \"properties\": {\"verbose\": {\"type\": \"boolean\", \"default\": false, \"description\": \"By default a filtered version is returned, suitable for most cases. Only set true if more information is needed.\"}, \"project_id\": {\"type\": \"number\", \"description\": \"The project ID of the merge request\"}, \"merge_request_iid\": {\"type\": \"number\", \"description\": \"The internal ID of the merge request within the project\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"get_merge_request_comments\", \"description\": \"Get general and file diff comments of a certain merge request\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"required\": [\"project_id\", \"merge_request_iid\"], \"properties\": {\"verbose\": {\"type\": \"boolean\", \"default\": false, \"description\": \"By default a filtered version is returned, suitable for most cases. Only set true if more information is needed.\"}, \"project_id\": {\"type\": \"number\", \"description\": \"The project ID of the merge request\"}, \"merge_request_iid\": {\"type\": \"number\", \"description\": \"The internal ID of the merge request within the project\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"add_merge_request_comment\", \"description\": \"Add a general comment to a merge request\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"required\": [\"project_id\", \"merge_request_iid\", \"comment\"], \"properties\": {\"comment\": {\"type\": \"string\", \"description\": \"The comment text\"}, \"project_id\": {\"type\": \"number\", \"description\": \"The project ID of the merge request\"}, \"merge_request_iid\": {\"type\": \"number\", \"description\": \"The internal ID of the merge request within the project\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"add_merge_request_diff_comment\", \"description\": \"Add a comment of a merge request at a specific line in a file diff\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"required\": [\"project_id\", \"merge_request_iid\", \"comment\", \"base_sha\", \"start_sha\", \"head_sha\", \"file_path\", \"line_number\"], \"properties\": {\"comment\": {\"type\": \"string\", \"description\": \"The comment text\"}, \"base_sha\": {\"type\": \"string\", \"description\": \"The SHA of the base commit\"}, \"head_sha\": {\"type\": \"string\", \"description\": \"The SHA of the head commit\"}, \"file_path\": {\"type\": \"string\", \"description\": \"The path to the file being commented on\"}, \"start_sha\": {\"type\": \"string\", \"description\": \"The SHA of the start commit\"}, \"project_id\": {\"type\": \"number\", \"description\": \"The project ID of the merge request\"}, \"line_number\": {\"type\": \"string\", \"description\": \"The line number in the new version of the file\"}, \"merge_request_iid\": {\"type\": \"number\", \"description\": \"The internal ID of the merge request within the project\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"get_merge_request_diff\", \"description\": \"Get the file diffs of a certain merge request\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"required\": [\"project_id\", \"merge_request_iid\"], \"properties\": {\"project_id\": {\"type\": \"number\", \"description\": \"The project ID of the merge request\"}, \"merge_request_iid\": {\"type\": \"number\", \"description\": \"The internal ID of the merge request within the project\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"get_issue_details\", \"description\": \"Get details of an issue within a certain project\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"required\": [\"project_id\", \"issue_iid\"], \"properties\": {\"verbose\": {\"type\": \"boolean\", \"default\": false, \"description\": \"By default a filtered version is returned, suitable for most cases. Only set true if more information is needed.\"}, \"issue_iid\": {\"type\": \"number\", \"description\": \"The internal ID of the issue within the project\"}, \"project_id\": {\"type\": \"number\", \"description\": \"The project ID of the issue\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"set_merge_request_description\", \"description\": \"Set the description of a merge request\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"required\": [\"project_id\", \"merge_request_iid\", \"description\"], \"properties\": {\"project_id\": {\"type\": \"number\", \"description\": \"The project ID of the merge request\"}, \"description\": {\"type\": \"string\", \"description\": \"The description text\"}, \"merge_request_iid\": {\"type\": \"number\", \"description\": \"The internal ID of the merge request within the project\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"set_merge_request_title\", \"description\": \"Set the title of a merge request\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"required\": [\"project_id\", \"merge_request_iid\", \"title\"], \"properties\": {\"title\": {\"type\": \"string\", \"description\": \"The title of the merge request\"}, \"project_id\": {\"type\": \"number\", \"description\": \"The project ID of the merge request\"}, \"merge_request_iid\": {\"type\": \"number\", \"description\": \"The internal ID of the merge request within the project\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"write\"}], \"tools_count\": 10, \"homepage\": \"https://smithery.ai/server/@kopfrechner/gitlab-mr-mcp\", \"url\": \"\", \"topics\": [], \"data_sources\": [\"smithery\"]}", "target": "", "id": "@kopfrechner/gitlab-mr-mcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"Coin MCP Server\", \"server_id\": \"@pwh-pwh/coin-mcp-server\", \"description\": \"Fetch the latest cryptocurrency prices effortlessly using our server. Simply provide a token symbol, and receive real-time price data from Bitget\\u2019s API. It's fast, simple, and designed for crypto enthusiasts and traders alike!\", \"readme\": \"\", \"tools\": [{\"name\": \"getTokenPrice\", \"description\": \"get the current price of cryptocurrency\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"required\": [\"token\"], \"properties\": {\"token\": {\"type\": \"string\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"getAnnoucements\", \"description\": \"Search for cryptocurrency announcements within one month .parameter anType is announcement type\\nAnnouncement type\\nlatest_news: Latest events\\ncoin_listings: New coin listings\\ntrading_competitions_promotions: Trading competitions and promotions\\nmaintenance_system_updates: maintenance/system upgrades\\nsymbol_delisting: Delisting information\\nempty string for all announcements\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"required\": [\"anType\"], \"properties\": {\"anType\": {\"enum\": [\"latest_news\", \"coin_listings\", \"trading_competitions_promotions\", \"maintenance_system_updates\", \"symbol_delisting\", \"\"], \"type\": \"string\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"getCoinInfo\", \"description\": \"Get spot coin information\\u3002Parameter\\uff1acoin - Coin name\\nResponse Parameters \\n- coin: Token name  \\n- transfer: Transferability  \\n- chains: Support chain list  \\n  - chain: Chain name  \\n  - needTag: Need tag  \\n  - withdrawable: Withdrawal supported  \\n  - rechargeable: Deposit supported  \\n  - withdrawFee: Withdrawal transaction fee  \\n  - extraWithdrawFee: Extra charge (e.g., 0.1 means 10% on-chain destruction)  \\n  - browserUrl: Blockchain explorer address  \\n  - contractAddress: Coin contract address  \\n  - withdrawStep: Withdrawal count step (if not 0, withdrawal size must be a multiple of this value; if 0, no such limit)  \\n  - withdrawMinScale: Decimal places of withdrawal amount  \\n  - congestion: Chain network status (normal: normal, congested: congestion)\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"required\": [\"coin\"], \"properties\": {\"coin\": {\"type\": \"string\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"write\"}], \"tools_count\": 3, \"homepage\": \"https://smithery.ai/server/@pwh-pwh/coin-mcp-server\", \"url\": \"\", \"topics\": [], \"data_sources\": [\"smithery\"]}", "target": "", "id": "@pwh-pwh/coin-mcp-server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"MySQL MCP Server\", \"server_id\": \"@burakdirin/mysqldb-mcp-server\", \"description\": \"An MCP server implementation that enables Claude AI to interact with MySQL databases. Features include secure database connections, query execution, read-only mode support, and multi-query capabilities.\", \"readme\": \"\", \"tools\": [{\"name\": \"connect_database\", \"description\": \"Connect to a specific MySQL database\", \"inputSchema\": {\"type\": \"object\", \"title\": \"connect_databaseArguments\", \"required\": [\"database\"], \"properties\": {\"database\": {\"type\": \"string\", \"title\": \"Database\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"execute_query\", \"description\": \"Execute MySQL queries\", \"inputSchema\": {\"type\": \"object\", \"title\": \"execute_queryArguments\", \"required\": [\"query\"], \"properties\": {\"query\": {\"type\": \"string\", \"title\": \"Query\"}}}, \"source\": \"smithery\", \"access_level\": \"execute\"}], \"tools_count\": 2, \"homepage\": \"https://smithery.ai/server/@burakdirin/mysqldb-mcp-server\", \"url\": \"\", \"topics\": [], \"data_sources\": [\"smithery\"]}", "target": "", "id": "@burakdirin/mysqldb-mcp-server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"iOS Simulator\", \"server_id\": \"@joshuayoes/ios-simulator-mcp\", \"description\": \"Interact with iOS simulators to validate UI elements, control interactions, and inspect screens. Ensure quality assurance in your applications by automating UI tests and capturing screenshots seamlessly.\", \"readme\": \"\", \"tools\": [{\"name\": \"get_booted_sim_id\", \"description\": \"Get the ID of the currently booted iOS simulator\", \"inputSchema\": {\"type\": \"object\"}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"ui_describe_all\", \"description\": \"Describes accessibility information for the entire screen in the iOS Simulator\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"properties\": {\"udid\": {\"type\": \"string\", \"description\": \"Udid of target, can also be set with the IDB_UDID env var\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"ui_tap\", \"description\": \"Tap on the screen in the iOS Simulator\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"required\": [\"x\", \"y\"], \"properties\": {\"x\": {\"type\": \"number\", \"description\": \"The x-coordinate\"}, \"y\": {\"type\": \"number\", \"description\": \"The x-coordinate\"}, \"udid\": {\"type\": \"string\", \"description\": \"Udid of target, can also be set with the IDB_UDID env var\"}, \"duration\": {\"type\": \"string\", \"description\": \"Press duration\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"ui_type\", \"description\": \"Input text into the iOS Simulator\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"required\": [\"text\"], \"properties\": {\"text\": {\"type\": \"string\", \"description\": \"Text to input\"}, \"udid\": {\"type\": \"string\", \"description\": \"Udid of target, can also be set with the IDB_UDID env var\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"ui_swipe\", \"description\": \"Swipe on the screen in the iOS Simulator\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"required\": [\"x_start\", \"y_start\", \"x_end\", \"y_end\"], \"properties\": {\"udid\": {\"type\": \"string\", \"description\": \"Udid of target, can also be set with the IDB_UDID env var\"}, \"delta\": {\"type\": \"number\", \"default\": 1, \"description\": \"The size of each step in the swipe (default is 1)\"}, \"x_end\": {\"type\": \"number\", \"description\": \"The ending x-coordinate\"}, \"y_end\": {\"type\": \"number\", \"description\": \"The ending y-coordinate\"}, \"x_start\": {\"type\": \"number\", \"description\": \"The starting x-coordinate\"}, \"y_start\": {\"type\": \"number\", \"description\": \"The starting y-coordinate\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"ui_describe_point\", \"description\": \"Returns the accessibility element at given co-ordinates on the iOS Simulator's screen\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"required\": [\"x\", \"y\"], \"properties\": {\"x\": {\"type\": \"number\", \"description\": \"The x-coordinate\"}, \"y\": {\"type\": \"number\", \"description\": \"The y-coordinate\"}, \"udid\": {\"type\": \"string\", \"description\": \"Udid of target, can also be set with the IDB_UDID env var\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"screenshot\", \"description\": \"Takes a screenshot of the iOS Simulator\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"required\": [\"output_path\"], \"properties\": {\"mask\": {\"enum\": [\"ignored\", \"alpha\", \"black\"], \"type\": \"string\", \"description\": \"For non-rectangular displays, handle the mask by policy (ignored, alpha, or black)\"}, \"type\": {\"enum\": [\"png\", \"tiff\", \"bmp\", \"gif\", \"jpeg\"], \"type\": \"string\", \"description\": \"Image format (png, tiff, bmp, gif, or jpeg). Default is png.\"}, \"udid\": {\"type\": \"string\", \"description\": \"Udid of target, can also be set with the IDB_UDID env var\"}, \"display\": {\"enum\": [\"internal\", \"external\"], \"type\": \"string\", \"description\": \"Display to capture (internal or external). Default depends on device type.\"}, \"output_path\": {\"type\": \"string\", \"description\": \"File path where the screenshot will be saved (if relative, ~/Downloads will be used as base directory)\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"record_video\", \"description\": \"Records a video of the iOS Simulator using simctl directly\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"properties\": {\"mask\": {\"enum\": [\"ignored\", \"alpha\", \"black\"], \"type\": \"string\", \"description\": \"For non-rectangular displays, handle the mask by policy: \\\"ignored\\\", \\\"alpha\\\", or \\\"black\\\".\"}, \"codec\": {\"enum\": [\"h264\", \"hevc\"], \"type\": \"string\", \"description\": \"Specifies the codec type: \\\"h264\\\" or \\\"hevc\\\". Default is \\\"hevc\\\".\"}, \"force\": {\"type\": \"boolean\", \"description\": \"Force the output file to be written to, even if the file already exists.\"}, \"display\": {\"enum\": [\"internal\", \"external\"], \"type\": \"string\", \"description\": \"Display to capture: \\\"internal\\\" or \\\"external\\\". Default depends on device type.\"}, \"output_path\": {\"type\": \"string\", \"description\": \"Optional output path (defaults to ~/Downloads/simulator_recording_$DATE.mp4)\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"stop_recording\", \"description\": \"Stops the simulator video recording using killall\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"properties\": {}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"execute\"}], \"tools_count\": 9, \"homepage\": \"https://smithery.ai/server/@joshuayoes/ios-simulator-mcp\", \"url\": \"\", \"topics\": [], \"data_sources\": [\"smithery\"]}", "target": "", "id": "@joshuayoes/ios-simulator-mcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"PowerShell Exec Server\", \"server_id\": \"@dynamicendpoints/powershell-exec-mcp-server\", \"description\": \"Execute PowerShell commands securely with controlled timeouts and input validation. Retrieve system information, manage services, monitor processes, and generate scripts dynamically using templates. Benefit from built-in security features that block dangerous commands and ensure consistent JSON-formatted outputs for automation workflows.\", \"readme\": \"\", \"tools\": [{\"name\": \"run_powershell\", \"description\": \"Execute PowerShell commands securely.\\n    \\n    Args:\\n        code: PowerShell code to execute\\n        timeout: Command timeout in seconds (1-300, default 60)\\n        ctx: MCP context for logging and progress reporting\\n    \\n    Returns:\\n        Command output as string\\n    \", \"inputSchema\": {\"type\": \"object\", \"$defs\": {\"Context\": {\"type\": \"object\", \"title\": \"Context\", \"properties\": {}, \"description\": \"Context object providing access to MCP capabilities.\\n\\nThis provides a cleaner interface to MCP's RequestContext functionality.\\nIt gets injected into tool and resource functions that request it via type hints.\\n\\nTo use context in a tool function, add a parameter with the Context type annotation:\\n\\n```python\\n@server.tool()\\ndef my_tool(x: int, ctx: Context) -> str:\\n    # Log messages to the client\\n    ctx.info(f\\\"Processing {x}\\\")\\n    ctx.debug(\\\"Debug info\\\")\\n    ctx.warning(\\\"Warning message\\\")\\n    ctx.error(\\\"Error message\\\")\\n\\n    # Report progress\\n    ctx.report_progress(50, 100)\\n\\n    # Access resources\\n    data = ctx.read_resource(\\\"resource://data\\\")\\n\\n    # Get request info\\n    request_id = ctx.request_id\\n    client_id = ctx.client_id\\n\\n    return str(x)\\n```\\n\\nThe context parameter name can be anything as long as it's annotated with Context.\\nThe context is optional - tools that don't need it can omit the parameter.\"}}, \"title\": \"run_powershellArguments\", \"required\": [\"code\"], \"properties\": {\"ctx\": {\"anyOf\": [{\"$ref\": \"#/$defs/Context\"}, {\"type\": \"null\"}], \"default\": null}, \"code\": {\"type\": \"string\", \"title\": \"Code\"}, \"timeout\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Timeout\", \"default\": 60}}}, \"source\": \"smithery\", \"access_level\": \"execute\"}, {\"name\": \"get_system_info\", \"description\": \"Get system information.\\n    \\n    Args:\\n        properties: List of ComputerInfo properties to retrieve (optional)\\n        timeout: Command timeout in seconds (1-300, default 60)\\n    \", \"inputSchema\": {\"type\": \"object\", \"title\": \"get_system_infoArguments\", \"properties\": {\"timeout\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Timeout\", \"default\": 60}, \"properties\": {\"anyOf\": [{\"type\": \"array\", \"items\": {\"type\": \"string\"}}, {\"type\": \"null\"}], \"title\": \"Properties\", \"default\": null}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"get_running_services\", \"description\": \"Get information about running services.\\n    \\n    Args:\\n        name: Filter services by name (supports wildcards)\\n        status: Filter by status (Running, Stopped, etc.)\\n        timeout: Command timeout in seconds (1-300, default 60)\\n    \", \"inputSchema\": {\"type\": \"object\", \"title\": \"get_running_servicesArguments\", \"properties\": {\"name\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}], \"title\": \"Name\", \"default\": null}, \"status\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}], \"title\": \"Status\", \"default\": null}, \"timeout\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Timeout\", \"default\": 60}}}, \"source\": \"smithery\", \"access_level\": \"execute\"}, {\"name\": \"get_processes\", \"description\": \"Get information about running processes.\\n    \\n    Args:\\n        name: Filter processes by name (supports wildcards)\\n        top: Limit to top N processes\\n        sort_by: Property to sort by (e.g., CPU, WorkingSet)\\n        timeout: Command timeout in seconds (1-300, default 60)\\n    \", \"inputSchema\": {\"type\": \"object\", \"title\": \"get_processesArguments\", \"properties\": {\"top\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Top\", \"default\": null}, \"name\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}], \"title\": \"Name\", \"default\": null}, \"sort_by\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}], \"title\": \"Sort By\", \"default\": null}, \"timeout\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Timeout\", \"default\": 60}}}, \"source\": \"smithery\", \"access_level\": \"execute\"}, {\"name\": \"get_event_logs\", \"description\": \"Get Windows event logs.\\n    \\n    Args:\\n        logname: Name of the event log (System, Application, Security, etc.)\\n        newest: Number of most recent events to retrieve (default 10)\\n        level: Filter by event level (1: Critical, 2: Error, 3: Warning, 4: Information)\\n        timeout: Command timeout in seconds (1-300, default 60)\\n    \", \"inputSchema\": {\"type\": \"object\", \"title\": \"get_event_logsArguments\", \"required\": [\"logname\"], \"properties\": {\"level\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Level\", \"default\": null}, \"newest\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Newest\", \"default\": 10}, \"logname\": {\"type\": \"string\", \"title\": \"Logname\"}, \"timeout\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Timeout\", \"default\": 60}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"generate_script_from_template\", \"description\": \"Generate a PowerShell script from a template.\\n    \\n    Args:\\n        template_name: Name of the template to use (without .ps1 extension)\\n        parameters: Dictionary of parameters to replace in the template\\n        output_path: Where to save the generated script (optional)\\n        timeout: Command timeout in seconds (1-300, default 60)\\n        \\n    Returns:\\n        Generated script content or path where script was saved\\n    \", \"inputSchema\": {\"type\": \"object\", \"title\": \"generate_script_from_templateArguments\", \"required\": [\"template_name\", \"parameters\"], \"properties\": {\"timeout\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Timeout\", \"default\": 60}, \"parameters\": {\"type\": \"object\", \"title\": \"Parameters\", \"additionalProperties\": true}, \"output_path\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}], \"title\": \"Output Path\", \"default\": null}, \"template_name\": {\"type\": \"string\", \"title\": \"Template Name\"}}}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"generate_custom_script\", \"description\": \"Generate a custom PowerShell script based on description.\\n    \\n    Args:\\n        description: Natural language description of what the script should do\\n        script_type: Type of script to generate (file_ops, service_mgmt, etc.)\\n        parameters: List of parameters the script should accept\\n        include_logging: Whether to include logging functions\\n        include_error_handling: Whether to include error handling\\n        output_path: Where to save the generated script (optional)\\n        timeout: Command timeout in seconds (1-300, default 60)\\n        \\n    Returns:\\n        Generated script content or path where script was saved\\n    \", \"inputSchema\": {\"type\": \"object\", \"title\": \"generate_custom_scriptArguments\", \"required\": [\"description\", \"script_type\"], \"properties\": {\"timeout\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Timeout\", \"default\": 60}, \"parameters\": {\"anyOf\": [{\"type\": \"array\", \"items\": {\"type\": \"object\", \"additionalProperties\": true}}, {\"type\": \"null\"}], \"title\": \"Parameters\", \"default\": null}, \"description\": {\"type\": \"string\", \"title\": \"Description\"}, \"output_path\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}], \"title\": \"Output Path\", \"default\": null}, \"script_type\": {\"type\": \"string\", \"title\": \"Script Type\"}, \"include_logging\": {\"type\": \"boolean\", \"title\": \"Include Logging\", \"default\": true}, \"include_error_handling\": {\"type\": \"boolean\", \"title\": \"Include Error Handling\", \"default\": true}}}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"ensure_directory\", \"description\": \"Ensure directory exists and return absolute path.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"ensure_directoryArguments\", \"required\": [\"path\"], \"properties\": {\"path\": {\"type\": \"string\", \"title\": \"Path\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"generate_intune_remediation_script\", \"description\": \"Generate a Microsoft Intune remediation script with enterprise-grade features.\\n    \\n    Creates a PowerShell remediation script that follows Microsoft Intune best practices:\\n    - Proper exit codes (0=success, 1=failure, 2=error)\\n    - Event log integration for monitoring and troubleshooting\\n    - System restore point creation before making changes\\n    - Comprehensive error handling and logging\\n    - No user interaction (required for Intune deployment)\\n    \\n    \\u26a0\\ufe0f  IMPORTANT: For complete Intune compliance, you need BOTH detection and remediation scripts.\\n    Consider using 'generate_intune_script_pair' instead to create both scripts together.\\n    \\n    Microsoft References:\\n    - Intune Remediation Scripts: https://docs.microsoft.com/en-us/mem/intune/fundamentals/remediations\\n    - Best Practices: https://docs.microsoft.com/en-us/mem/intune/fundamentals/remediations-script-samples\\n    - PowerShell Script Requirements: https://docs.microsoft.com/en-us/mem/intune/apps/intune-management-extension\\n    - Exit Code Standards: https://docs.microsoft.com/en-us/mem/intune/apps/troubleshoot-mam-app-installation#exit-codes\\n    \\n    Args:\\n        description: Clear description of what the script should remediate (e.g., 'Install Chrome browser', 'Configure Windows firewall')\\n        remediation_logic: PowerShell code that performs the remediation. Use 'Complete-Remediation -Success $true -Message \\\"description\\\"' to indicate completion\\n        output_path: Optional file path where the script will be saved. If not provided, returns script content\\n        timeout: Command timeout in seconds (1-300, default 60)\\n        \\n    Returns:\\n        Generated script content or path where script was saved\\n        \\n    Example:\\n        Generate a script to install Chrome:\\n        ```\\n        result = await generate_intune_remediation_script(\\n            description=\\\"Install Chrome browser to latest version\\\",\\n            remediation_logic='''\\n            $installer = \\\"$env:TEMP\\\\ChromeSetup.exe\\\"\\n            Invoke-WebRequest -Uri \\\"https://dl.google.com/chrome/install/latest/chrome_installer.exe\\\" -OutFile $installer\\n            Start-Process -FilePath $installer -Args \\\"/silent /install\\\" -Wait\\n            Remove-Item $installer -Force\\n            Complete-Remediation -Success $true -Message \\\"Chrome installation completed successfully\\\"\\n            ''',\\n            output_path=\\\"remediate_chrome.ps1\\\"\\n        )\\n        ```\\n        \\n    Tips:\\n        - Always use Complete-Remediation function to set proper exit codes\\n        - Test your remediation_logic in a safe environment first\\n        - Consider creating a system restore point for major changes\\n        - Use Write-IntuneLog for detailed logging and troubleshooting\\n        - Ensure no user interaction is required (scripts run silently)\\n    \", \"inputSchema\": {\"type\": \"object\", \"title\": \"generate_intune_remediation_scriptArguments\", \"required\": [\"description\", \"remediation_logic\"], \"properties\": {\"timeout\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Timeout\", \"default\": 60}, \"description\": {\"type\": \"string\", \"title\": \"Description\"}, \"output_path\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}], \"title\": \"Output Path\", \"default\": null}, \"remediation_logic\": {\"type\": \"string\", \"title\": \"Remediation Logic\"}}}, \"source\": \"smithery\", \"access_level\": \"execute\"}, {\"name\": \"generate_intune_script_pair\", \"description\": \"Generate a complete pair of Microsoft Intune detection and remediation scripts.\\n    \\n    This is the RECOMMENDED tool for Intune compliance as it creates both required scripts:\\n    - Detection script: Checks current system state and determines compliance\\n    - Remediation script: Fixes non-compliant conditions with proper safeguards\\n    \\n    Both scripts follow Microsoft Intune best practices:\\n    - Proper exit codes (Detection: 0=compliant, 1=non-compliant, 2=error; Remediation: 0=success, 1=failure, 2=error)\\n    - Event log integration for centralized monitoring\\n    - System restore points before changes (remediation only)\\n    - Comprehensive error handling and logging\\n    - No user interaction (silent execution required)\\n    \\n    Microsoft References:\\n    - Intune Remediation Scripts Overview: https://docs.microsoft.com/en-us/mem/intune/fundamentals/remediations\\n    - Script Deployment Best Practices: https://docs.microsoft.com/en-us/mem/intune/fundamentals/remediations-script-samples\\n    - PowerShell Requirements: https://docs.microsoft.com/en-us/mem/intune/apps/intune-management-extension\\n    - Exit Code Standards: https://docs.microsoft.com/en-us/mem/intune/apps/troubleshoot-mam-app-deployment\\n    - Monitoring and Reporting: https://docs.microsoft.com/en-us/mem/intune/fundamentals/remediations-monitor\\n    \\n    Args:\\n        description: Clear description of what the scripts should detect and remediate (e.g., 'Ensure Chrome browser is installed with latest version')\\n        detection_logic: PowerShell code that performs the compliance check. Use 'Complete-Detection -Compliant $true/$false -Message \\\"status\\\"' to indicate result\\n        remediation_logic: PowerShell code that fixes non-compliant conditions. Use 'Complete-Remediation -Success $true/$false -Message \\\"result\\\"' to indicate completion\\n        output_dir: Optional directory to save both scripts. If not provided, returns script content in response\\n        timeout: Command timeout in seconds (1-300, default 60)\\n        \\n    Returns:\\n        Dictionary containing both scripts: {\\\"detection_script\\\": \\\"content/path\\\", \\\"remediation_script\\\": \\\"content/path\\\"}\\n        \\n    Example:\\n        Generate scripts to manage Chrome browser installation:\\n        ```\\n        result = await generate_intune_script_pair(\\n            description=\\\"Ensure Chrome browser is installed with version 100.0.0.0 or higher\\\",\\n            detection_logic='''\\n            try {\\n                $app = Get-ItemProperty \\\"HKLM:\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\App Paths\\\\chrome.exe\\\" -ErrorAction Stop\\n                $version = (Get-Item $app.'(Default)').VersionInfo.FileVersion\\n                $compliant = [version]$version -ge [version]\\\"100.0.0.0\\\"\\n                Complete-Detection -Compliant $compliant -Message \\\"Chrome version: $version (Required: 100.0.0.0+)\\\"\\n            } catch {\\n                Complete-Detection -Compliant $false -Message \\\"Chrome not found or inaccessible\\\"\\n            }\\n            ''',\\n            remediation_logic='''\\n            try {\\n                $installer = \\\"$env:TEMP\\\\ChromeSetup.exe\\\"\\n                Write-IntuneLog \\\"Downloading Chrome installer...\\\"\\n                Invoke-WebRequest -Uri \\\"https://dl.google.com/chrome/install/latest/chrome_installer.exe\\\" -OutFile $installer -UseBasicParsing\\n                Write-IntuneLog \\\"Installing Chrome silently...\\\"\\n                Start-Process -FilePath $installer -Args \\\"/silent /install\\\" -Wait\\n                Remove-Item $installer -Force\\n                Complete-Remediation -Success $true -Message \\\"Chrome installation completed successfully\\\"\\n            } catch {\\n                Complete-Remediation -Success $false -Message \\\"Chrome installation failed: $($_.Exception.Message)\\\"\\n            }\\n            ''',\\n            output_dir=\\\"chrome_intune_scripts\\\"\\n        )\\n        ```\\n        \\n    Tips:\\n        - Always test both scripts in a controlled environment first\\n        - Use descriptive logging messages for easier troubleshooting\\n        - Consider the impact of remediation actions (e.g., system restarts, user disruption)\\n        - Use Write-IntuneLog for detailed progress tracking\\n        - Ensure detection logic is fast and efficient (runs frequently)\\n        - Make remediation logic idempotent (safe to run multiple times)\\n    \", \"inputSchema\": {\"type\": \"object\", \"title\": \"generate_intune_script_pairArguments\", \"required\": [\"description\", \"detection_logic\", \"remediation_logic\"], \"properties\": {\"timeout\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Timeout\", \"default\": 60}, \"output_dir\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}], \"title\": \"Output Dir\", \"default\": null}, \"description\": {\"type\": \"string\", \"title\": \"Description\"}, \"detection_logic\": {\"type\": \"string\", \"title\": \"Detection Logic\"}, \"remediation_logic\": {\"type\": \"string\", \"title\": \"Remediation Logic\"}}}, \"source\": \"smithery\", \"access_level\": \"execute\"}, {\"name\": \"generate_bigfix_relevance_script\", \"description\": \"Generate a BigFix relevance script to determine if computers need action.\\n    \\n    Creates a PowerShell relevance script that follows IBM BigFix best practices:\\n    - Proper output format (TRUE/FALSE for BigFix consumption)\\n    - BigFix client log integration for monitoring\\n    - Event log integration for troubleshooting\\n    - Comprehensive error handling and logging\\n    - Fast execution optimized for frequent evaluations\\n    \\n    \\ud83d\\udca1 TIP: For complete BigFix deployments, you need BOTH relevance and action scripts.\\n    Consider using 'generate_bigfix_script_pair' to create both scripts together with matching logic.\\n    \\n    IBM BigFix References:\\n    - Relevance Language Guide: https://help.hcltechsw.com/bigfix/11.0/relevance/Relevance/c_relevance_language.html\\n    - Action Scripts: https://help.hcltechsw.com/bigfix/11.0/platform/Platform/Console/c_creating_action_scripts.html\\n    - Best Practices: https://help.hcltechsw.com/bigfix/11.0/platform/Platform/Console/c_best_practices_for_creating_fixlets.html\\n    - Client Logging: https://help.hcltechsw.com/bigfix/11.0/platform/Platform/Installation/c_bes_client_logging.html\\n    \\n    Args:\\n        description: Clear description of what the script should check (e.g., 'Check if Chrome needs updating', 'Verify Windows patches are current')\\n        relevance_logic: PowerShell code that determines relevance. Use 'Complete-Relevance -Relevant $true/$false -Message \\\"status\\\"' to indicate result\\n        output_path: Optional file path where the script will be saved. If not provided, returns script content\\n        timeout: Command timeout in seconds (1-300, default 60)\\n        \\n    Returns:\\n        Generated script content or path where script was saved\\n        \\n    Example:\\n        Generate a script to check if Chrome needs updating:\\n        ```\\n        result = await generate_bigfix_relevance_script(\\n            description=\\\"Check if Chrome browser needs updating to version 100.0.0.0 or higher\\\",\\n            relevance_logic=''',\\n            try {\\n                $app = Get-ItemProperty \\\"HKLM:\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\App Paths\\\\chrome.exe\\\" -ErrorAction Stop\\n                $version = (Get-Item $app.'(Default)').VersionInfo.FileVersion\\n                $needsUpdate = [version]$version -lt [version]\\\"100.0.0.0\\\"\\n                Complete-Relevance -Relevant $needsUpdate -Message \\\"Chrome version: $version (Target: 100.0.0.0+)\\\"\\n            } catch {\\n                Complete-Relevance -Relevant $true -Message \\\"Chrome not found or inaccessible - installation needed\\\"\\n            }\\n            ''',\\n            output_path=\\\"chrome_relevance.ps1\\\"\\n        )\\n        ```\\n        \\n    Tips:\\n        - Keep relevance logic fast and efficient (evaluated frequently)\\n        - Return TRUE when action is needed, FALSE when compliant\\n        - Always use Complete-Relevance function for proper BigFix output format\\n        - Use try-catch blocks for robust error handling\\n        - Test relevance logic thoroughly across different environments\\n        - Use Write-BigFixLog for detailed progress tracking\\n    \", \"inputSchema\": {\"type\": \"object\", \"title\": \"generate_bigfix_relevance_scriptArguments\", \"required\": [\"description\", \"relevance_logic\"], \"properties\": {\"timeout\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Timeout\", \"default\": 60}, \"description\": {\"type\": \"string\", \"title\": \"Description\"}, \"output_path\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}], \"title\": \"Output Path\", \"default\": null}, \"relevance_logic\": {\"type\": \"string\", \"title\": \"Relevance Logic\"}}}, \"source\": \"smithery\", \"access_level\": \"execute\"}, {\"name\": \"generate_bigfix_action_script\", \"description\": \"Generate a BigFix action script to perform remediation or configuration changes.\\n    \\n    Creates a PowerShell action script that follows IBM BigFix best practices:\\n    - Proper exit codes (0=success, 1=retryable failure, 2=non-retryable failure)\\n    - BigFix client log integration for monitoring\\n    - System restore point creation before changes\\n    - Comprehensive error handling and logging\\n    - Event log integration for troubleshooting\\n    \\n    \\u26a0\\ufe0f IMPORTANT: For complete BigFix deployments, you need BOTH relevance and action scripts.\\n    Consider using 'generate_bigfix_script_pair' instead to create both scripts together.\\n    \\n    IBM BigFix References:\\n    - Action Scripts: https://help.hcltechsw.com/bigfix/11.0/platform/Platform/Console/c_creating_action_scripts.html\\n    - Exit Codes: https://help.hcltechsw.com/bigfix/11.0/platform/Platform/Console/c_action_script_exit_codes.html\\n    - Best Practices: https://help.hcltechsw.com/bigfix/11.0/platform/Platform/Console/c_best_practices_for_creating_fixlets.html\\n    - Client Logging: https://help.hcltechsw.com/bigfix/11.0/platform/Platform/Installation/c_bes_client_logging.html\\n    \\n    Args:\\n        description: Clear description of what the script should accomplish (e.g., 'Install Chrome browser', 'Configure Windows firewall')\\n        action_logic: PowerShell code that performs the action. Use 'Complete-Action -Result \\\"Success/RetryableFailure/NonRetryableFailure\\\" -Message \\\"details\\\"' to indicate completion\\n        output_path: Optional file path where the script will be saved. If not provided, returns script content\\n        timeout: Command timeout in seconds (1-300, default 60)\\n        \\n    Returns:\\n        Generated script content or path where script was saved\\n        \\n    Example:\\n        Generate a script to install Chrome:\\n        ```\\n        result = await generate_bigfix_action_script(\\n            description=\\\"Install Chrome browser to latest version\\\",\\n            action_logic='''\\n            try {\\n                $installer = \\\"$env:TEMP\\\\ChromeSetup.exe\\\"\\n                Write-BigFixLog \\\"Downloading Chrome installer...\\\"\\n                Invoke-WebRequest -Uri \\\"https://dl.google.com/chrome/install/latest/chrome_installer.exe\\\" -OutFile $installer -UseBasicParsing\\n                Write-BigFixLog \\\"Installing Chrome silently...\\\"\\n                Start-Process -FilePath $installer -Args \\\"/silent /install\\\" -Wait\\n                Remove-Item $installer -Force\\n                Complete-Action -Result \\\"Success\\\" -Message \\\"Chrome installation completed successfully\\\"\\n            } catch {\\n                Complete-Action -Result \\\"RetryableFailure\\\" -Message \\\"Chrome installation failed: $($_.Exception.Message)\\\"\\n            }\\n            ''',\\n            output_path=\\\"chrome_action.ps1\\\"\\n        )\\n        ```\\n        \\n    Tips:\\n        - Always use Complete-Action function to set proper exit codes\\n        - Use \\\"Success\\\" for completed actions\\n        - Use \\\"RetryableFailure\\\" for temporary issues (network, locks, etc.)\\n        - Use \\\"NonRetryableFailure\\\" for permanent issues (unsupported OS, etc.)\\n        - Test action logic in safe environments first\\n        - Consider creating system restore points for major changes\\n        - Use Write-BigFixLog for detailed logging and troubleshooting\\n        - Make actions idempotent (safe to run multiple times)\\n    \", \"inputSchema\": {\"type\": \"object\", \"title\": \"generate_bigfix_action_scriptArguments\", \"required\": [\"description\", \"action_logic\"], \"properties\": {\"timeout\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Timeout\", \"default\": 60}, \"description\": {\"type\": \"string\", \"title\": \"Description\"}, \"output_path\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}], \"title\": \"Output Path\", \"default\": null}, \"action_logic\": {\"type\": \"string\", \"title\": \"Action Logic\"}}}, \"source\": \"smithery\", \"access_level\": \"execute\"}, {\"name\": \"generate_bigfix_script_pair\", \"description\": \"Generate a complete pair of BigFix relevance and action scripts for deployment.\\n    \\n    This is the RECOMMENDED tool for BigFix fixlet creation as it creates both required scripts:\\n    - Relevance script: Determines which computers need the action (TRUE/FALSE output)\\n    - Action script: Performs the necessary changes with proper error handling\\n    \\n    Both scripts follow IBM BigFix best practices:\\n    - Proper BigFix output formats and exit codes\\n    - BigFix client log integration for centralized monitoring\\n    - System restore points before changes (action only)\\n    - Comprehensive error handling and logging\\n    - Event log integration for troubleshooting\\n    - No user interaction (silent execution required)\\n    \\n    IBM BigFix References:\\n    - Fixlet Development: https://help.hcltechsw.com/bigfix/11.0/platform/Platform/Console/c_creating_fixlets.html\\n    - Relevance Language: https://help.hcltechsw.com/bigfix/11.0/relevance/Relevance/c_relevance_language.html\\n    - Action Scripts: https://help.hcltechsw.com/bigfix/11.0/platform/Platform/Console/c_creating_action_scripts.html\\n    - Best Practices: https://help.hcltechsw.com/bigfix/11.0/platform/Platform/Console/c_best_practices_for_creating_fixlets.html\\n    - Testing Guidelines: https://help.hcltechsw.com/bigfix/11.0/platform/Platform/Console/c_testing_fixlets.html\\n    \\n    Args:\\n        description: Clear description of what the scripts should accomplish (e.g., 'Manage Chrome browser installation and updates')\\n        relevance_logic: PowerShell code that determines if action is needed. Use 'Complete-Relevance -Relevant $true/$false -Message \\\"status\\\"' to indicate result\\n        action_logic: PowerShell code that performs the remediation. Use 'Complete-Action -Result \\\"Success/RetryableFailure/NonRetryableFailure\\\" -Message \\\"details\\\"' to indicate completion\\n        output_dir: Optional directory to save both scripts. If not provided, returns script content in response\\n        timeout: Command timeout in seconds (1-300, default 60)\\n        \\n    Returns:\\n        Dictionary containing both scripts: {\\\"relevance_script\\\": \\\"content/path\\\", \\\"action_script\\\": \\\"content/path\\\"}\\n        \\n    Example:\\n        Generate scripts to manage Chrome browser installation:\\n        ```\\n        result = await generate_bigfix_script_pair(\\n            description=\\\"Manage Chrome browser installation with version 100.0.0.0 or higher\\\",\\n            relevance_logic=''',\\n            try {\\n                $app = Get-ItemProperty \\\"HKLM:\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\App Paths\\\\chrome.exe\\\" -ErrorAction Stop\\n                $version = (Get-Item $app.'(Default)').VersionInfo.FileVersion\\n                $needsAction = [version]$version -lt [version]\\\"100.0.0.0\\\"\\n                Complete-Relevance -Relevant $needsAction -Message \\\"Chrome version: $version (Target: 100.0.0.0+)\\\"\\n            } catch {\\n                Complete-Relevance -Relevant $true -Message \\\"Chrome not found - installation needed\\\"\\n            }\\n            ''',\\n            action_logic=''',\\n            try {\\n                $installer = \\\"$env:TEMP\\\\ChromeSetup.exe\\\"\\n                Write-BigFixLog \\\"Downloading Chrome installer...\\\"\\n                Invoke-WebRequest -Uri \\\"https://dl.google.com/chrome/install/latest/chrome_installer.exe\\\" -OutFile $installer -UseBasicParsing\\n                Write-BigFixLog \\\"Installing Chrome silently...\\\"\\n                Start-Process -FilePath $installer -Args \\\"/silent /install\\\" -Wait\\n                Remove-Item $installer -Force\\n                Complete-Action -Result \\\"Success\\\" -Message \\\"Chrome installation completed successfully\\\"\\n            } catch {\\n                Complete-Action -Result \\\"RetryableFailure\\\" -Message \\\"Chrome installation failed: $($_.Exception.Message)\\\"\\n            }\\n            ''',\\n            output_dir=\\\"chrome_bigfix_scripts\\\"\\n        )\\n        ```\\n        \\n    Tips:\\n        - Always test both scripts in a controlled environment first\\n        - Ensure relevance logic matches the conditions that action script addresses\\n        - Use descriptive logging messages for easier troubleshooting\\n        - Consider the scope and impact of actions (test groups first)\\n        - Make sure relevance logic is efficient (evaluated frequently)\\n        - Ensure action logic is idempotent (safe to run multiple times)\\n        - Use Write-BigFixLog for detailed progress tracking\\n        - Test across different OS versions and configurations\\n    \", \"inputSchema\": {\"type\": \"object\", \"title\": \"generate_bigfix_script_pairArguments\", \"required\": [\"description\", \"relevance_logic\", \"action_logic\"], \"properties\": {\"timeout\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Timeout\", \"default\": 60}, \"output_dir\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}], \"title\": \"Output Dir\", \"default\": null}, \"description\": {\"type\": \"string\", \"title\": \"Description\"}, \"action_logic\": {\"type\": \"string\", \"title\": \"Action Logic\"}, \"relevance_logic\": {\"type\": \"string\", \"title\": \"Relevance Logic\"}}}, \"source\": \"smithery\", \"access_level\": \"execute\"}, {\"name\": \"run_powershell_with_progress\", \"description\": \"Execute PowerShell commands with detailed progress reporting.\\n    \\n    Args:\\n        code: PowerShell code to execute\\n        timeout: Command timeout in seconds (1-300, default 60)\\n        ctx: MCP context for logging and progress reporting\\n    \\n    Returns:\\n        Command output as string with execution details\\n    \", \"inputSchema\": {\"type\": \"object\", \"$defs\": {\"Context\": {\"type\": \"object\", \"title\": \"Context\", \"properties\": {}, \"description\": \"Context object providing access to MCP capabilities.\\n\\nThis provides a cleaner interface to MCP's RequestContext functionality.\\nIt gets injected into tool and resource functions that request it via type hints.\\n\\nTo use context in a tool function, add a parameter with the Context type annotation:\\n\\n```python\\n@server.tool()\\ndef my_tool(x: int, ctx: Context) -> str:\\n    # Log messages to the client\\n    ctx.info(f\\\"Processing {x}\\\")\\n    ctx.debug(\\\"Debug info\\\")\\n    ctx.warning(\\\"Warning message\\\")\\n    ctx.error(\\\"Error message\\\")\\n\\n    # Report progress\\n    ctx.report_progress(50, 100)\\n\\n    # Access resources\\n    data = ctx.read_resource(\\\"resource://data\\\")\\n\\n    # Get request info\\n    request_id = ctx.request_id\\n    client_id = ctx.client_id\\n\\n    return str(x)\\n```\\n\\nThe context parameter name can be anything as long as it's annotated with Context.\\nThe context is optional - tools that don't need it can omit the parameter.\"}}, \"title\": \"run_powershell_with_progressArguments\", \"required\": [\"code\"], \"properties\": {\"ctx\": {\"anyOf\": [{\"$ref\": \"#/$defs/Context\"}, {\"type\": \"null\"}], \"default\": null}, \"code\": {\"type\": \"string\", \"title\": \"Code\"}, \"timeout\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Timeout\", \"default\": 60}}}, \"source\": \"smithery\", \"access_level\": \"execute\"}], \"tools_count\": 14, \"homepage\": \"https://smithery.ai/server/@DynamicEndpoints/powershell-exec-mcp-server\", \"url\": \"\", \"topics\": [], \"data_sources\": [\"smithery\"]}", "target": "", "id": "@dynamicendpoints/powershell-exec-mcp-server", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"Weather360 Server\", \"server_id\": \"@musabz360/weather360\", \"description\": \"Provide real-time weather data and forecasts through a simple API interface. Enable applications to access comprehensive weather information seamlessly. Enhance user experience with accurate and timely weather updates.\", \"readme\": \"\", \"tools\": [{\"name\": \"get_live_weather\", \"description\": \"\\n    Get live weather detailes for a given latitude and longitude.\\n    \", \"inputSchema\": {\"type\": \"object\", \"title\": \"get_live_weatherArguments\", \"required\": [\"latitude\", \"longitude\"], \"properties\": {\"latitude\": {\"type\": \"number\", \"title\": \"Latitude\"}, \"longitude\": {\"type\": \"number\", \"title\": \"Longitude\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}], \"tools_count\": 1, \"homepage\": \"https://smithery.ai/server/@musabz360/weather360\", \"url\": \"\", \"topics\": [], \"data_sources\": [\"smithery\"]}", "target": "", "id": "@musabz360/weather360", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"Mobile Automation Server\", \"server_id\": \"@mobile-next/mobile-mcp\", \"description\": \"Automate mobile applications seamlessly across iOS and Android platforms. Interact with native apps using structured accessibility data or coordinate-based actions, enhancing your testing and data-entry workflows. Leverage the power of LLMs to drive complex user journeys without manual intervention.\", \"readme\": \"\", \"tools\": [{\"name\": \"mobile_list_available_devices\", \"description\": \"List all available devices. This includes both physical devices and simulators. If there is more than one device returned, you need to let the user select one of them.\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"properties\": {}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"mobile_use_device\", \"description\": \"Select a device to use. This can be a simulator or an Android device. Use the list_available_devices tool to get a list of available devices.\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"required\": [\"device\", \"deviceType\"], \"properties\": {\"device\": {\"type\": \"string\", \"description\": \"The name of the device to select\"}, \"deviceType\": {\"enum\": [\"simulator\", \"ios\", \"android\"], \"type\": \"string\", \"description\": \"The type of device to select\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"mobile_list_apps\", \"description\": \"List all the installed apps on the device\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"properties\": {}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"execute\"}, {\"name\": \"mobile_launch_app\", \"description\": \"Launch an app on mobile device. Use this to open a specific app. You can find the package name of the app by calling list_apps_on_device.\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"required\": [\"packageName\"], \"properties\": {\"packageName\": {\"type\": \"string\", \"description\": \"The package name of the app to launch\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"execute\"}, {\"name\": \"mobile_terminate_app\", \"description\": \"Stop and terminate an app on mobile device\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"required\": [\"packageName\"], \"properties\": {\"packageName\": {\"type\": \"string\", \"description\": \"The package name of the app to terminate\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"mobile_get_screen_size\", \"description\": \"Get the screen size of the mobile device in pixels\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"properties\": {}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"mobile_click_on_screen_at_coordinates\", \"description\": \"Click on the screen at given x,y coordinates\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"required\": [\"x\", \"y\"], \"properties\": {\"x\": {\"type\": \"number\", \"description\": \"The x coordinate to click on the screen, in pixels\"}, \"y\": {\"type\": \"number\", \"description\": \"The y coordinate to click on the screen, in pixels\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"mobile_list_elements_on_screen\", \"description\": \"List elements on screen and their coordinates, with display text or accessibility label. Do not cache this result.\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"properties\": {}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"mobile_press_button\", \"description\": \"Press a button on device\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"required\": [\"button\"], \"properties\": {\"button\": {\"type\": \"string\", \"description\": \"The button to press. Supported buttons: BACK (android only), HOME, VOLUME_UP, VOLUME_DOWN, ENTER, DPAD_CENTER (android tv only), DPAD_UP (android tv only), DPAD_DOWN (android tv only), DPAD_LEFT (android tv only), DPAD_RIGHT (android tv only)\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"mobile_open_url\", \"description\": \"Open a URL in browser on device\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"required\": [\"url\"], \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"The URL to open\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"swipe_on_screen\", \"description\": \"Swipe on the screen\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"required\": [\"direction\"], \"properties\": {\"direction\": {\"enum\": [\"up\", \"down\"], \"type\": \"string\", \"description\": \"The direction to swipe\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"mobile_type_keys\", \"description\": \"Type text into the focused element\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"required\": [\"text\", \"submit\"], \"properties\": {\"text\": {\"type\": \"string\", \"description\": \"The text to type\"}, \"submit\": {\"type\": \"boolean\", \"description\": \"Whether to submit the text. If true, the text will be submitted as if the user pressed the enter key.\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"mobile_take_screenshot\", \"description\": \"Take a screenshot of the mobile device. Use this to understand what's on screen, if you need to press an element that is available through view hierarchy then you must list elements on screen instead. Do not cache this result.\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"properties\": {}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"mobile_set_orientation\", \"description\": \"Change the screen orientation of the device\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"required\": [\"orientation\"], \"properties\": {\"orientation\": {\"enum\": [\"portrait\", \"landscape\"], \"type\": \"string\", \"description\": \"The desired orientation\"}}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"mobile_get_orientation\", \"description\": \"Get the current screen orientation of the device\", \"inputSchema\": {\"type\": \"object\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"properties\": {}, \"additionalProperties\": false}, \"source\": \"smithery\", \"access_level\": \"read\"}], \"tools_count\": 15, \"homepage\": \"https://smithery.ai/server/@mobile-next/mobile-mcp\", \"url\": \"\", \"topics\": [], \"data_sources\": [\"smithery\"]}", "target": "", "id": "@mobile-next/mobile-mcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"Elevator Pitch\", \"server_id\": \"@kaantenik/dictionary-mcp\", \"description\": \"Analyzes your startup idea\\nIdentifies the sector, target audience, problem & solution\\nInstantly generates a compelling elevator pitch\", \"readme\": \"\", \"tools\": [{\"name\": \"analyze_idea_tool\", \"description\": \"\\n    Verilen i\\u015f fikrinden sekt\\u00f6r, hedef kitle, problem ve \\u00e7\\u00f6z\\u00fcm \\u00e7\\u0131kar\\u0131r.\\n    \", \"inputSchema\": {\"type\": \"object\", \"title\": \"analyze_idea_toolArguments\", \"required\": [\"idea\"], \"properties\": {\"idea\": {\"type\": \"string\", \"title\": \"Idea\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"generate_pitch_tool\", \"description\": \"\\n    Verilen bilgilerle k\\u0131sa, etkileyici bir elevator pitch \\u00fcretir.\\n    \", \"inputSchema\": {\"type\": \"object\", \"title\": \"generate_pitch_toolArguments\", \"required\": [\"sector\", \"target_audience\", \"problem\", \"solution\", \"tone\"], \"properties\": {\"tone\": {\"type\": \"string\", \"title\": \"Tone\"}, \"sector\": {\"type\": \"string\", \"title\": \"Sector\"}, \"problem\": {\"type\": \"string\", \"title\": \"Problem\"}, \"solution\": {\"type\": \"string\", \"title\": \"Solution\"}, \"target_audience\": {\"type\": \"string\", \"title\": \"Target Audience\"}}}, \"source\": \"smithery\", \"access_level\": \"write\"}], \"tools_count\": 2, \"homepage\": \"https://smithery.ai/server/@kaantenik/dictionary-mcp\", \"url\": \"\", \"topics\": [], \"data_sources\": [\"smithery\"]}", "target": "", "id": "@kaantenik/dictionary-mcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"Movie & TV Data Server\", \"server_id\": \"@arliiii/moviemcp\", \"description\": \"Provide comprehensive search, discovery, and detailed information about movies and TV shows with rich media support. Enable users to find trending content, explore genres, and access high-quality images and production details. Enhance movie and TV data integration with multi-language support and professional error handling.\", \"readme\": \"\", \"tools\": [{\"name\": \"search_movies\", \"description\": \"\\n    Search for movies by title with optional year filtering.\\n\\n    Args:\\n        query: Movie title to search for (required)\\n        year: Release year to filter by (optional)\\n        page: Page number for pagination (default: 1)\\n\\n    Returns:\\n        JSON string with movie search results including titles, release dates, overviews, ratings, and image URLs\\n    \", \"inputSchema\": {\"type\": \"object\", \"required\": [\"query\"], \"properties\": {\"page\": {\"type\": \"integer\", \"title\": \"Page\", \"default\": 1}, \"year\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Year\", \"default\": null}, \"query\": {\"type\": \"string\", \"title\": \"Query\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"search_tv_shows\", \"description\": \"\\n    Search for TV shows by name with optional year filtering.\\n\\n    Args:\\n        query: TV show name to search for (required)\\n        first_air_date_year: First air date year to filter by (optional)\\n        page: Page number for pagination (default: 1)\\n\\n    Returns:\\n        JSON string with TV show search results including names, air dates, overviews, ratings, and image URLs\\n    \", \"inputSchema\": {\"type\": \"object\", \"required\": [\"query\"], \"properties\": {\"page\": {\"type\": \"integer\", \"title\": \"Page\", \"default\": 1}, \"query\": {\"type\": \"string\", \"title\": \"Query\"}, \"first_air_date_year\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"First Air Date Year\", \"default\": null}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"get_movie_details\", \"description\": \"\\n    Get detailed information about a specific movie including cast, crew, and production details.\\n\\n    Args:\\n        movie_id: TMDb movie ID (required)\\n\\n    Returns:\\n        JSON string with complete movie information including cast, crew, genres, runtime, budget, revenue\\n    \", \"inputSchema\": {\"type\": \"object\", \"required\": [\"movie_id\"], \"properties\": {\"movie_id\": {\"type\": \"integer\", \"title\": \"Movie Id\"}}}, \"source\": \"smithery\", \"access_level\": \"execute\"}, {\"name\": \"get_tv_show_details\", \"description\": \"\\n    Get detailed information about a specific TV show including cast, seasons, and network details.\\n\\n    Args:\\n        tv_id: TMDb TV show ID (required)\\n\\n    Returns:\\n        JSON string with complete TV show information including cast, seasons, networks, creators\\n    \", \"inputSchema\": {\"type\": \"object\", \"required\": [\"tv_id\"], \"properties\": {\"tv_id\": {\"type\": \"integer\", \"title\": \"Tv Id\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"get_trending\", \"description\": \"\\n    Get trending movies or TV shows.\\n\\n    Args:\\n        media_type: Type of media - \\\"movie\\\" or \\\"tv\\\" (required)\\n        time_window: Time window - \\\"day\\\" or \\\"week\\\" (default: \\\"day\\\")\\n\\n    Returns:\\n        JSON string with trending content including popularity scores and rankings\\n    \", \"inputSchema\": {\"type\": \"object\", \"required\": [\"media_type\"], \"properties\": {\"media_type\": {\"type\": \"string\", \"title\": \"Media Type\"}, \"time_window\": {\"type\": \"string\", \"title\": \"Time Window\", \"default\": \"day\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"discover_content\", \"description\": \"\\n    Discover movies or TV shows based on filters.\\n\\n    Args:\\n        content_type: Type of content - \\\"movie\\\" or \\\"tv\\\" (required)\\n        genre_id: Genre ID to filter by (optional)\\n        year: Year to filter by (optional) - release year for movies, first air date year for TV\\n        sort_by: Sort order (default: \\\"popularity.desc\\\")\\n\\n    Returns:\\n        JSON string with curated content based on filters\\n    \", \"inputSchema\": {\"type\": \"object\", \"required\": [\"content_type\"], \"properties\": {\"year\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Year\", \"default\": null}, \"sort_by\": {\"type\": \"string\", \"title\": \"Sort By\", \"default\": \"popularity.desc\"}, \"genre_id\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Genre Id\", \"default\": null}, \"content_type\": {\"type\": \"string\", \"title\": \"Content Type\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}], \"tools_count\": 6, \"homepage\": \"https://smithery.ai/server/@Arliiii/moviemcp\", \"url\": \"\", \"topics\": [], \"data_sources\": [\"smithery\"]}", "target": "", "id": "@arliiii/moviemcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"MetaMCP Server\", \"server_id\": \"@metatool-ai/mcp-server-metamcp\", \"description\": \"Manage multiple MCP servers seamlessly. Route requests and configurations dynamically across various MCPs.\", \"readme\": \"\", \"tools\": [], \"tools_count\": 0, \"homepage\": \"https://smithery.ai/server/@metatool-ai/mcp-server-metamcp\", \"url\": \"\", \"topics\": [], \"data_sources\": [\"smithery\"]}", "target": "", "id": "@metatool-ai/mcp-server-metamcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"Freshdesk Integration Server\", \"server_id\": \"@effytech/freshdesk_mcp\", \"description\": \"Integrate AI models with Freshdesk to automate support operations. Create, update, and manage support tickets seamlessly through the Freshdesk API. Enhance your customer support experience with automated ticket management and AI-driven interactions.\", \"readme\": \"\", \"tools\": [{\"name\": \"get_ticket_fields\", \"description\": \"Get ticket fields from Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"get_ticket_fieldsArguments\", \"properties\": {}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"get_tickets\", \"description\": \"Get tickets from Freshdesk with pagination support.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"get_ticketsArguments\", \"properties\": {\"page\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Page\", \"default\": 1}, \"per_page\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Per Page\", \"default\": 30}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"create_ticket\", \"description\": \"Create a ticket in Freshdesk\", \"inputSchema\": {\"type\": \"object\", \"title\": \"create_ticketArguments\", \"required\": [\"subject\", \"description\", \"source\", \"priority\", \"status\"], \"properties\": {\"email\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}], \"title\": \"Email\", \"default\": null}, \"source\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"string\"}], \"title\": \"Source\"}, \"status\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"string\"}], \"title\": \"Status\"}, \"subject\": {\"type\": \"string\", \"title\": \"Subject\"}, \"priority\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"string\"}], \"title\": \"Priority\"}, \"description\": {\"type\": \"string\", \"title\": \"Description\"}, \"requester_id\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Requester Id\", \"default\": null}, \"custom_fields\": {\"anyOf\": [{\"type\": \"object\", \"additionalProperties\": true}, {\"type\": \"null\"}], \"title\": \"Custom Fields\", \"default\": null}, \"additional_fields\": {\"anyOf\": [{\"type\": \"object\", \"additionalProperties\": true}, {\"type\": \"null\"}], \"title\": \"Additional Fields\", \"default\": null}}}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"update_ticket\", \"description\": \"Update a ticket in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"update_ticketArguments\", \"required\": [\"ticket_id\", \"ticket_fields\"], \"properties\": {\"ticket_id\": {\"type\": \"integer\", \"title\": \"Ticket Id\"}, \"ticket_fields\": {\"type\": \"object\", \"title\": \"Ticket Fields\", \"additionalProperties\": true}}}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"delete_ticket\", \"description\": \"Delete a ticket in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"delete_ticketArguments\", \"required\": [\"ticket_id\"], \"properties\": {\"ticket_id\": {\"type\": \"integer\", \"title\": \"Ticket Id\"}}}, \"source\": \"smithery\", \"access_level\": \"execute\"}, {\"name\": \"get_ticket\", \"description\": \"Get a ticket in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"get_ticketArguments\", \"required\": [\"ticket_id\"], \"properties\": {\"ticket_id\": {\"type\": \"integer\", \"title\": \"Ticket Id\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"search_tickets\", \"description\": \"Search for tickets in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"search_ticketsArguments\", \"required\": [\"query\"], \"properties\": {\"query\": {\"type\": \"string\", \"title\": \"Query\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"get_ticket_conversation\", \"description\": \"Get a ticket conversation in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"get_ticket_conversationArguments\", \"required\": [\"ticket_id\"], \"properties\": {\"ticket_id\": {\"type\": \"integer\", \"title\": \"Ticket Id\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"create_ticket_reply\", \"description\": \"Create a reply to a ticket in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"create_ticket_replyArguments\", \"required\": [\"ticket_id\", \"body\"], \"properties\": {\"body\": {\"type\": \"string\", \"title\": \"Body\"}, \"ticket_id\": {\"type\": \"integer\", \"title\": \"Ticket Id\"}}}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"create_ticket_note\", \"description\": \"Create a note for a ticket in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"create_ticket_noteArguments\", \"required\": [\"ticket_id\", \"body\"], \"properties\": {\"body\": {\"type\": \"string\", \"title\": \"Body\"}, \"ticket_id\": {\"type\": \"integer\", \"title\": \"Ticket Id\"}}}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"update_ticket_conversation\", \"description\": \"Update a conversation for a ticket in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"update_ticket_conversationArguments\", \"required\": [\"conversation_id\", \"body\"], \"properties\": {\"body\": {\"type\": \"string\", \"title\": \"Body\"}, \"conversation_id\": {\"type\": \"integer\", \"title\": \"Conversation Id\"}}}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"get_agents\", \"description\": \"Get all agents in Freshdesk with pagination support.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"get_agentsArguments\", \"properties\": {\"page\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Page\", \"default\": 1}, \"per_page\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Per Page\", \"default\": 30}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"list_contacts\", \"description\": \"List all contacts in Freshdesk with pagination support.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"list_contactsArguments\", \"properties\": {\"page\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Page\", \"default\": 1}, \"per_page\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Per Page\", \"default\": 30}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"get_contact\", \"description\": \"Get a contact in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"get_contactArguments\", \"required\": [\"contact_id\"], \"properties\": {\"contact_id\": {\"type\": \"integer\", \"title\": \"Contact Id\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"search_contacts\", \"description\": \"Search for contacts in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"search_contactsArguments\", \"required\": [\"query\"], \"properties\": {\"query\": {\"type\": \"string\", \"title\": \"Query\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"update_contact\", \"description\": \"Update a contact in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"update_contactArguments\", \"required\": [\"contact_id\", \"contact_fields\"], \"properties\": {\"contact_id\": {\"type\": \"integer\", \"title\": \"Contact Id\"}, \"contact_fields\": {\"type\": \"object\", \"title\": \"Contact Fields\", \"additionalProperties\": true}}}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"list_canned_responses\", \"description\": \"List all canned responses in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"list_canned_responsesArguments\", \"required\": [\"folder_id\"], \"properties\": {\"folder_id\": {\"type\": \"integer\", \"title\": \"Folder Id\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"list_canned_response_folders\", \"description\": \"List all canned response folders in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"list_canned_response_foldersArguments\", \"properties\": {}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"view_canned_response\", \"description\": \"View a canned response in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"view_canned_responseArguments\", \"required\": [\"canned_response_id\"], \"properties\": {\"canned_response_id\": {\"type\": \"integer\", \"title\": \"Canned Response Id\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"create_canned_response\", \"description\": \"Create a canned response in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"create_canned_responseArguments\", \"required\": [\"canned_response_fields\"], \"properties\": {\"canned_response_fields\": {\"type\": \"object\", \"title\": \"Canned Response Fields\", \"additionalProperties\": true}}}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"update_canned_response\", \"description\": \"Update a canned response in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"update_canned_responseArguments\", \"required\": [\"canned_response_id\", \"canned_response_fields\"], \"properties\": {\"canned_response_id\": {\"type\": \"integer\", \"title\": \"Canned Response Id\"}, \"canned_response_fields\": {\"type\": \"object\", \"title\": \"Canned Response Fields\", \"additionalProperties\": true}}}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"create_canned_response_folder\", \"description\": \"Create a canned response folder in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"create_canned_response_folderArguments\", \"required\": [\"name\"], \"properties\": {\"name\": {\"type\": \"string\", \"title\": \"Name\"}}}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"update_canned_response_folder\", \"description\": \"Update a canned response folder in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"update_canned_response_folderArguments\", \"required\": [\"folder_id\", \"name\"], \"properties\": {\"name\": {\"type\": \"string\", \"title\": \"Name\"}, \"folder_id\": {\"type\": \"integer\", \"title\": \"Folder Id\"}}}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"list_solution_articles\", \"description\": \"List all solution articles in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"list_solution_articlesArguments\", \"required\": [\"folder_id\"], \"properties\": {\"folder_id\": {\"type\": \"integer\", \"title\": \"Folder Id\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"list_solution_folders\", \"description\": \"\", \"inputSchema\": {\"type\": \"object\", \"title\": \"list_solution_foldersArguments\", \"required\": [\"category_id\"], \"properties\": {\"category_id\": {\"type\": \"integer\", \"title\": \"Category Id\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"list_solution_categories\", \"description\": \"List all solution categories in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"list_solution_categoriesArguments\", \"properties\": {}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"view_solution_category\", \"description\": \"View a solution category in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"view_solution_categoryArguments\", \"required\": [\"category_id\"], \"properties\": {\"category_id\": {\"type\": \"integer\", \"title\": \"Category Id\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"create_solution_category\", \"description\": \"Create a solution category in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"create_solution_categoryArguments\", \"required\": [\"category_fields\"], \"properties\": {\"category_fields\": {\"type\": \"object\", \"title\": \"Category Fields\", \"additionalProperties\": true}}}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"update_solution_category\", \"description\": \"Update a solution category in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"update_solution_categoryArguments\", \"required\": [\"category_id\", \"category_fields\"], \"properties\": {\"category_id\": {\"type\": \"integer\", \"title\": \"Category Id\"}, \"category_fields\": {\"type\": \"object\", \"title\": \"Category Fields\", \"additionalProperties\": true}}}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"create_solution_category_folder\", \"description\": \"Create a solution category folder in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"create_solution_category_folderArguments\", \"required\": [\"category_id\", \"folder_fields\"], \"properties\": {\"category_id\": {\"type\": \"integer\", \"title\": \"Category Id\"}, \"folder_fields\": {\"type\": \"object\", \"title\": \"Folder Fields\", \"additionalProperties\": true}}}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"view_solution_category_folder\", \"description\": \"View a solution category folder in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"view_solution_category_folderArguments\", \"required\": [\"folder_id\"], \"properties\": {\"folder_id\": {\"type\": \"integer\", \"title\": \"Folder Id\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"update_solution_category_folder\", \"description\": \"Update a solution category folder in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"update_solution_category_folderArguments\", \"required\": [\"folder_id\", \"folder_fields\"], \"properties\": {\"folder_id\": {\"type\": \"integer\", \"title\": \"Folder Id\"}, \"folder_fields\": {\"type\": \"object\", \"title\": \"Folder Fields\", \"additionalProperties\": true}}}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"create_solution_article\", \"description\": \"Create a solution article in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"create_solution_articleArguments\", \"required\": [\"folder_id\", \"article_fields\"], \"properties\": {\"folder_id\": {\"type\": \"integer\", \"title\": \"Folder Id\"}, \"article_fields\": {\"type\": \"object\", \"title\": \"Article Fields\", \"additionalProperties\": true}}}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"view_solution_article\", \"description\": \"View a solution article in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"view_solution_articleArguments\", \"required\": [\"article_id\"], \"properties\": {\"article_id\": {\"type\": \"integer\", \"title\": \"Article Id\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"update_solution_article\", \"description\": \"Update a solution article in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"update_solution_articleArguments\", \"required\": [\"article_id\", \"article_fields\"], \"properties\": {\"article_id\": {\"type\": \"integer\", \"title\": \"Article Id\"}, \"article_fields\": {\"type\": \"object\", \"title\": \"Article Fields\", \"additionalProperties\": true}}}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"view_agent\", \"description\": \"View an agent in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"view_agentArguments\", \"required\": [\"agent_id\"], \"properties\": {\"agent_id\": {\"type\": \"integer\", \"title\": \"Agent Id\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"create_agent\", \"description\": \"Create an agent in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"create_agentArguments\", \"required\": [\"agent_fields\"], \"properties\": {\"agent_fields\": {\"type\": \"object\", \"title\": \"Agent Fields\", \"additionalProperties\": true}}}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"update_agent\", \"description\": \"Update an agent in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"update_agentArguments\", \"required\": [\"agent_id\", \"agent_fields\"], \"properties\": {\"agent_id\": {\"type\": \"integer\", \"title\": \"Agent Id\"}, \"agent_fields\": {\"type\": \"object\", \"title\": \"Agent Fields\", \"additionalProperties\": true}}}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"search_agents\", \"description\": \"Search for agents in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"search_agentsArguments\", \"required\": [\"query\"], \"properties\": {\"query\": {\"type\": \"string\", \"title\": \"Query\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"list_groups\", \"description\": \"List all groups in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"list_groupsArguments\", \"properties\": {\"page\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Page\", \"default\": 1}, \"per_page\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Per Page\", \"default\": 30}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"create_group\", \"description\": \"Create a group in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"create_groupArguments\", \"required\": [\"group_fields\"], \"properties\": {\"group_fields\": {\"type\": \"object\", \"title\": \"Group Fields\", \"additionalProperties\": true}}}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"view_group\", \"description\": \"View a group in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"view_groupArguments\", \"required\": [\"group_id\"], \"properties\": {\"group_id\": {\"type\": \"integer\", \"title\": \"Group Id\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"create_ticket_field\", \"description\": \"Create a ticket field in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"create_ticket_fieldArguments\", \"required\": [\"ticket_field_fields\"], \"properties\": {\"ticket_field_fields\": {\"type\": \"object\", \"title\": \"Ticket Field Fields\", \"additionalProperties\": true}}}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"view_ticket_field\", \"description\": \"View a ticket field in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"view_ticket_fieldArguments\", \"required\": [\"ticket_field_id\"], \"properties\": {\"ticket_field_id\": {\"type\": \"integer\", \"title\": \"Ticket Field Id\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"update_ticket_field\", \"description\": \"Update a ticket field in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"update_ticket_fieldArguments\", \"required\": [\"ticket_field_id\", \"ticket_field_fields\"], \"properties\": {\"ticket_field_id\": {\"type\": \"integer\", \"title\": \"Ticket Field Id\"}, \"ticket_field_fields\": {\"type\": \"object\", \"title\": \"Ticket Field Fields\", \"additionalProperties\": true}}}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"update_group\", \"description\": \"Update a group in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"update_groupArguments\", \"required\": [\"group_id\", \"group_fields\"], \"properties\": {\"group_id\": {\"type\": \"integer\", \"title\": \"Group Id\"}, \"group_fields\": {\"type\": \"object\", \"title\": \"Group Fields\", \"additionalProperties\": true}}}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"list_contact_fields\", \"description\": \"List all contact fields in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"list_contact_fieldsArguments\", \"properties\": {}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"view_contact_field\", \"description\": \"View a contact field in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"view_contact_fieldArguments\", \"required\": [\"contact_field_id\"], \"properties\": {\"contact_field_id\": {\"type\": \"integer\", \"title\": \"Contact Field Id\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"create_contact_field\", \"description\": \"Create a contact field in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"create_contact_fieldArguments\", \"required\": [\"contact_field_fields\"], \"properties\": {\"contact_field_fields\": {\"type\": \"object\", \"title\": \"Contact Field Fields\", \"additionalProperties\": true}}}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"update_contact_field\", \"description\": \"Update a contact field in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"update_contact_fieldArguments\", \"required\": [\"contact_field_id\", \"contact_field_fields\"], \"properties\": {\"contact_field_id\": {\"type\": \"integer\", \"title\": \"Contact Field Id\"}, \"contact_field_fields\": {\"type\": \"object\", \"title\": \"Contact Field Fields\", \"additionalProperties\": true}}}, \"source\": \"smithery\", \"access_level\": \"write\"}, {\"name\": \"get_field_properties\", \"description\": \"Get properties of a specific field by name.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"get_field_propertiesArguments\", \"required\": [\"field_name\"], \"properties\": {\"field_name\": {\"type\": \"string\", \"title\": \"Field Name\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"list_companies\", \"description\": \"List all companies in Freshdesk with pagination support.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"list_companiesArguments\", \"properties\": {\"page\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Page\", \"default\": 1}, \"per_page\": {\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}], \"title\": \"Per Page\", \"default\": 30}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"view_company\", \"description\": \"Get a company in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"view_companyArguments\", \"required\": [\"company_id\"], \"properties\": {\"company_id\": {\"type\": \"integer\", \"title\": \"Company Id\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"search_companies\", \"description\": \"Search for companies in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"search_companiesArguments\", \"required\": [\"query\"], \"properties\": {\"query\": {\"type\": \"string\", \"title\": \"Query\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"find_company_by_name\", \"description\": \"Find a company by name in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"find_company_by_nameArguments\", \"required\": [\"name\"], \"properties\": {\"name\": {\"type\": \"string\", \"title\": \"Name\"}}}, \"source\": \"smithery\", \"access_level\": \"read\"}, {\"name\": \"list_company_fields\", \"description\": \"List all company fields in Freshdesk.\", \"inputSchema\": {\"type\": \"object\", \"title\": \"list_company_fieldsArguments\", \"properties\": {}}, \"source\": \"smithery\", \"access_level\": \"read\"}], \"tools_count\": 56, \"homepage\": \"https://smithery.ai/server/@effytech/freshdesk_mcp\", \"url\": \"\", \"topics\": [], \"data_sources\": [\"smithery\"]}", "target": "", "id": "@effytech/freshdesk_mcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"Terraform\", \"server_id\": \"terraform\", \"description\": \"Seamlessly integrate with Terraform ecosystem, enabling advanced automation and interaction capabilities for Infrastructure as Code (IaC) development powered by\", \"readme\": \"\", \"tools\": [], \"tools_count\": 0, \"homepage\": \"\", \"url\": \"https://www.hashicorp.com/en/products/terraform\", \"topics\": [], \"data_sources\": [\"official\"]}", "target": "", "id": "terraform", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"Gnuradio\", \"server_id\": \"yoelbassin/gnuradiomcp\", \"description\": \"An MCP server for GNU Radio that enables LLMs to autonomously create and modify RF .grc flowcharts.\", \"readme\": \"\", \"tools\": [], \"tools_count\": 0, \"homepage\": \"\", \"url\": \"https://github.com/yoelbassin/gnuradioMCP\", \"topics\": [], \"data_sources\": [\"official\"]}", "target": "", "id": "yoelbassin/gnuradiomcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"Tyk API Management\", \"server_id\": \"tyktechnologies/tyk-dashboard-mcp\", \"description\": \"Chat with all of your organization's managed APIs and perform other API lifecycle operations, managing tokens, users, analytics, and more.\", \"readme\": \"# OpenAPI to MCP Server\\n\\nA tool that creates MCP (Model Context Protocol) servers from OpenAPI/Swagger specifications, enabling AI assistants to interact with your APIs. **Create your own [branded and customized MCPs](#customizing-and-publishing-your-own-version)** for specific APIs or services.\\n\\n## Overview\\n\\nThis project creates a dynamic MCP server that transforms OpenAPI specifications into MCP tools. It enables seamless integration of REST APIs with AI assistants via the Model Context Protocol, turning any API into an AI-accessible tool.\\n\\n## Features\\n\\n- Dynamic loading of OpenAPI specs from file or HTTP/HTTPS URLs\\n- Support for [OpenAPI Overlays](#openapi-overlays) loaded from files or HTTP/HTTPS URLs\\n- Customizable mapping of OpenAPI operations to MCP tools\\n- Advanced filtering of operations using glob patterns for both operationId and URL paths\\n- Comprehensive parameter handling with format preservation and location metadata\\n- API authentication handling\\n- OpenAPI metadata (title, version, description) used to configure the MCP server\\n- Hierarchical description fallbacks (operation description \\u2192 operation summary \\u2192 path summary)\\n- Custom HTTP headers support via environment variables and CLI\\n- X-MCP header for API request tracking and identification\\n- Support for custom `x-mcp` extensions at the path level to override tool names and descriptions\\n\\n## Using with AI Assistants\\n\\nThis tool creates an MCP server that allows AI assistants to interact with APIs defined by OpenAPI specifications. The primary way to use it is by configuring your AI assistant to run it directly as an MCP tool.\\n\\n### Setting Up in Claude Desktop\\n\\n1. Ensure you have [Node.js](https://nodejs.org/) installed on your computer\\n2. Open Claude Desktop and navigate to Settings > Developer\\n3. Edit the configuration file (or it will be created if it doesn't exist):\\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\\n   - Windows: `%APPDATA%\\\\Claude\\\\claude_desktop_config.json`\\n\\n4. Add this configuration (customize as needed):\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"api-tools\\\": {\\n      \\\"command\\\": \\\"npx\\\",\\n      \\\"args\\\": [\\n        \\\"-y\\\",\\n        \\\"@tyktechnologies/api-to-mcp\\\",\\n        \\\"--spec\\\",\\n        \\\"https://petstore3.swagger.io/api/v3/openapi.json\\\"\\n      ],\\n      \\\"enabled\\\": true\\n    }\\n  }\\n}\\n```\\n\\n5. Restart Claude Desktop\\n6. You should now see a hammer icon in the chat input box. Click it to access your API tools.\\n\\n### Customizing the Configuration\\n\\nYou can adjust the `args` array to customize your MCP server with various options:\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"my-api\\\": {\\n      \\\"command\\\": \\\"npx\\\",\\n      \\\"args\\\": [\\n        \\\"-y\\\",\\n        \\\"@tyktechnologies/api-to-mcp\\\",\\n        \\\"--spec\\\",\\n        \\\"./path/to/your/openapi.json\\\",\\n        \\\"--overlays\\\",\\n        \\\"./path/to/overlay.json,https://example.com/api/overlay.json\\\",\\n        \\\"--whitelist\\\",\\n        \\\"getPet*,POST:/users/*\\\",\\n        \\\"--targetUrl\\\",\\n        \\\"https://api.example.com\\\"\\n      ],\\n      \\\"enabled\\\": true\\n    }\\n  }\\n}\\n```\\n\\n### Setting Up in Cursor\\n\\n1. Create a configuration file in one of these locations:\\n   - Project-specific: `.cursor/mcp.json` in your project directory\\n   - Global: `~/.cursor/mcp.json` in your home directory\\n\\n2. Add this configuration (adjust as needed for your API):\\n\\n```json\\n{\\n  \\\"servers\\\": [\\n    {\\n      \\\"command\\\": \\\"npx\\\",\\n      \\\"args\\\": [\\n        \\\"-y\\\",\\n        \\\"@tyktechnologies/api-to-mcp\\\",\\n        \\\"--spec\\\",\\n        \\\"./path/to/your/openapi.json\\\"\\n      ],\\n      \\\"name\\\": \\\"My API Tools\\\"\\n    }\\n  ]\\n}\\n```\\n\\n3. Restart Cursor or reload the window\\n\\n### Using with Vercel AI SDK\\n\\nYou can also use this MCP server directly in your JavaScript/TypeScript applications using the Vercel AI SDK's MCP client:\\n\\n```javascript\\nimport { experimental_createMCPClient } from 'ai';\\nimport { Experimental_StdioMCPTransport } from 'ai/mcp-stdio';\\nimport { generateText } from 'ai';\\nimport { createGoogleGenerativeAI } from '@ai-sdk/google';\\n\\n// Initialize the Google Generative AI provider\\nconst google = createGoogleGenerativeAI({\\n  apiKey: process.env.GOOGLE_API_KEY, // Set your API key in environment variables\\n});\\nconst model = google('gemini-2.0-flash');\\n\\n// Create an MCP client with stdio transport\\nconst mcpClient = await experimental_createMCPClient({\\n  transport: {\\n    type: 'stdio',\\n    command: 'npx', // Command to run the MCP server\\n    args: ['-y', '@tyktechnologies/api-to-mcp', '--spec', 'https://petstore3.swagger.io/api/v3/openapi.json'], // OpenAPI spec\\n    env: {\\n      // You can set environment variables here\\n      // API_KEY: process.env.YOUR_API_KEY,\\n    },\\n  },\\n});\\n\\nasync function main() {\\n  try {\\n    // Retrieve tools from the MCP server\\n    const tools = await mcpClient.tools();\\n\\n    // Generate text using the AI SDK with MCP tools\\n    const { text } = await generateText({\\n      model,\\n      prompt: 'List all available pets in the pet store using the API.',\\n      tools, // Pass the MCP tools to the model\\n    });\\n\\n    console.log('Generated text:', text);\\n  } catch (error) {\\n\\n[...truncated for length...]\", \"tools\": [{\"name\": \"args\", \"description\": \"array to customize your MCP server with various options:\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for args\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"OPENAPI_SPEC_PATH\", \"description\": \"Path to OpenAPI spec file\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"OPENAPI_OVERLAY_PATHS\", \"description\": \"Comma-separated paths to overlay JSON files\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"TARGET_API_BASE_URL\", \"description\": \"Base URL for API calls (overrides OpenAPI servers)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"URL or link to process\"}}, \"required\": [\"url\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"MCP_WHITELIST_OPERATIONS\", \"description\": \"Comma-separated list of operation IDs or URL paths to include (supports glob patterns like `getPet*` or `GET:/pets/*`)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}, \"url\": {\"type\": \"string\", \"description\": \"URL or link to process\"}}, \"required\": [\"file_path\", \"url\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"MCP_BLACKLIST_OPERATIONS\", \"description\": \"Comma-separated list of operation IDs or URL paths to exclude (supports glob patterns, ignored if whitelist used)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}, \"url\": {\"type\": \"string\", \"description\": \"URL or link to process\"}}, \"required\": [\"file_path\", \"url\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"API_KEY\", \"description\": \"API Key for the target API (if required)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for API_KEY\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"SECURITY_SCHEME_NAME\", \"description\": \"Name of the security scheme requiring the API Key\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for SECURITY_SCHEME_NAME\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"SECURITY_CREDENTIALS\", \"description\": \"JSON string containing security credentials for multiple schemes\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for SECURITY_CREDENTIALS\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"CUSTOM_HEADERS\", \"description\": \"JSON string containing custom headers to include in all API requests\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for CUSTOM_HEADERS\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"HEADER_\", \"description\": \"will be added as a custom header (e.g., `HEADER_X_API_Version=1.0.0` adds the header `X-API-Version: 1.0.0`)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for HEADER_\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"DISABLE_X_MCP\", \"description\": \"Set to `true` to disable adding the `X-MCP: 1` header to all API requests\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for DISABLE_X_MCP\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"CONFIG_FILE\", \"description\": \"Path to a JSON configuration file\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"files\", \"description\": \"field in package.json (shown above) ensures your specs and config file will be included in the published package.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"file_path\": {\"type\": \"string\", \"description\": \"File path or file to process\"}}, \"required\": [\"file_path\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"NPM_TOKEN\", \"description\": \"in your forked repository's settings.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for NPM_TOKEN\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}], \"tools_count\": 15, \"homepage\": \"\", \"url\": \"https://github.com/TykTechnologies/tyk-dashboard-mcp\", \"topics\": [], \"data_sources\": [\"official\"]}", "target": "", "id": "tyktechnologies/tyk-dashboard-mcp", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"TiDB\", \"server_id\": \"pingcap/pytidb\", \"description\": \"MCP Server to interact with TiDB database platform.\", \"readme\": \"# TiDB Python SDK\\n\\n> [!NOTE]\\n> This Python package is under rapid development and the API is subject to change, it is recommended to use a fixed version when importing, e.g. `pytidb==0.0.6`\\n\\n<p>\\n  <a href=\\\"https://pypi.org/project/pytidb\\\">\\n    <img src=\\\"https://img.shields.io/pypi/v/pytidb.svg\\\" alt=\\\"Python Package Index\\\"/>\\n  </a>\\n  <a href=\\\"https://pypistats.org/packages/pytidb\\\">\\n    <img src=\\\"https://img.shields.io/pypi/dm/pytidb.svg\\\" alt=\\\"Downloads\\\"/>\\n  </a>\\n</p>\\n\\nPython SDK for TiDB AI: A unified data platform designed to empower developers in building next-generation AI applications.\\n\\n- \\ud83d\\udd0d Support various search modes: vector search, fulltext search, hybrid search\\n- \\ud83d\\udd04 Automatic embedding generation\\n- \\ud83c\\udfaf Advanced filtering capabilities\\n- \\ud83e\\udd47 Tuning search results with Reranker\\n- \\ud83d\\udcb1 Transaction support\\n\\nDocumentation: https://pingcap.github.io/ai/\\n\\nQuick Start Guide: [Jupyter Notebook](https://github.com/pingcap/pytidb/blob/main/docs/quickstart.ipynb)\\n\\nInstall TiDB MCP Server (Docs: https://pingcap.github.io/ai/integrations/mcp): \\n\\n[![Install TiDB MCP Server](https://cursor.com/deeplink/mcp-install-light.svg)](https://cursor.com/install-mcp?name=TiDB&config=eyJjb21tYW5kIjoidXZ4IC0tZnJvbSBweXRpZGJbbWNwXSB0aWRiLW1jcC1zZXJ2ZXIiLCJlbnYiOnsiVElEQl9IT1NUIjoibG9jYWxob3N0IiwiVElEQl9QT1JUIjoiNDAwMCIsIlRJREJfVVNFUk5BTUUiOiJyb290IiwiVElEQl9QQVNTV09SRCI6IiIsIlRJREJfREFUQUJBU0UiOiJ0ZXN0In19)\\n\\n## Installation\\n\\n```bash\\npip install pytidb\\n\\n# If you want to use built-in embedding function and rerankers.\\npip install \\\"pytidb[models]\\\"\\n\\n# If you want to convert query result to pandas DataFrame.\\npip install pandas\\n```\\n\\n## Connect to TiDB Cloud\\n\\nGo to [tidbcloud.com](https://tidbcloud.com/?utm_source=github&utm_medium=referral&utm_campaign=pytidb_readme) to create a free TiDB cluster.\\n\\n```python\\nimport os\\nfrom pytidb import TiDBClient\\n\\ndb = TiDBClient.connect(\\n    host=os.getenv(\\\"TIDB_HOST\\\"),\\n    port=int(os.getenv(\\\"TIDB_PORT\\\")),\\n    username=os.getenv(\\\"TIDB_USERNAME\\\"),\\n    password=os.getenv(\\\"TIDB_PASSWORD\\\"),\\n    database=os.getenv(\\\"TIDB_DATABASE\\\"),\\n)\\n```\\n\\n## Highlights\\n\\n### \\ud83e\\udd16 Auto Embedding\\n\\nPyTiDB automatically embeds the text field (e.g. `text`) and saves the vector embedding to the vector field (e.g. `text_vec`).\\n\\n**Create a table with embedding function**:\\n\\n```python\\nfrom pytidb.schema import TableModel, Field\\nfrom pytidb.embeddings import EmbeddingFunction\\n\\ntext_embed = EmbeddingFunction(\\\"openai/text-embedding-3-small\\\")\\n\\nclass Chunk(TableModel, table=True):\\n    __tablename__ = \\\"chunks\\\"\\n\\n    id: int = Field(primary_key=True)\\n    text: str = Field()\\n    text_vec: list[float] = text_embed.VectorField(\\n        source_field=\\\"text\\\"\\n    )  # \\ud83d\\udc48 Define the vector field.\\n    user_id: int = Field()\\n\\ntable = db.create_table(schema=Chunk)\\n```\\n\\n**Bulk insert data**:\\n\\n```python\\ntable.bulk_insert(\\n    [\\n        Chunk(id=2, text=\\\"bar\\\", user_id=2),   # \\ud83d\\udc48 The text field will be embedded to a \\n        Chunk(id=3, text=\\\"baz\\\", user_id=3),   # vector and save to the text_vec field\\n        Chunk(id=4, text=\\\"qux\\\", user_id=4),   # automatically.\\n    ]\\n)\\n```\\n\\n### \\ud83d\\udd0d Search\\n\\n**Vector Search**\\n\\nVector search help you find the most relevant records based on **semantic similarity**, so you don't need to explicitly include all the keywords in your query.\\n\\n```python\\ndf = (\\n  table.search(\\\"<query>\\\")  # \\ud83d\\udc48 The query will be embedding automatically.\\n    .filter({\\\"user_id\\\": 2})\\n    .limit(2)\\n    .to_pandas()\\n)\\n```\\n\\nFor a complete example, please go to the [Vector Search](https://github.com/pingcap/pytidb/blob/main/examples/vector_search) demo.\\n\\n**Fulltext Search**\\n\\nFull-text search helps tokenize the query and find the most relevant records by matching exact keywords.\\n\\n```python\\nif not table.has_fts_index(\\\"text\\\"):\\n    table.create_fts_index(\\\"text\\\")   # \\ud83d\\udc48 Create a fulltext index on the text column.\\n\\ndf = (\\n  table.search(\\\"<query>\\\", search_type=\\\"fulltext\\\")\\n    .limit(2)\\n    .to_pandas()\\n)\\n```\\n\\nFor a complete example, please go to the [Fulltext Search](https://github.com/pingcap/pytidb/blob/main/examples/fulltext_search) demo.\\n\\n**Hybrid Search**\\n\\nHybrid search combines vector search and fulltext search to provide a more accurate and relevant search result.\\n\\n```python\\nfrom pytidb.rerankers import Reranker\\n\\njinaai = Reranker(model_name=\\\"jina_ai/jina-reranker-m0\\\")\\n\\ndf = (\\n  table.search(\\\"<query>\\\", search_type=\\\"hybrid\\\")\\n    .rerank(jinaai, \\\"text\\\")  # \\ud83d\\udc48 Rerank the query result with the jinaai model.\\n    .limit(2)\\n    .to_pandas()\\n)\\n```\\n\\nFor a complete example, please go to the [Hybrid Search](https://github.com/pingcap/pytidb/blob/main/examples/hybrid_search) demo.\\n\\n#### Advanced Filtering\\n\\nPyTiDB supports various operators for flexible filtering:\\n\\n| Operator | Description           | Example                                    |\\n| -------- | --------------------- | ------------------------------------------ |\\n| `$eq`    | Equal to              | `{\\\"field\\\": {\\\"$eq\\\": \\\"hello\\\"}}`              |\\n| `$gt`    | Greater than          | `{\\\"field\\\": {\\\"$gt\\\": 1}}`                    |\\n|\\n[...truncated for length...]\", \"tools\": [{\"name\": \"text\", \"description\": \") and saves the vector embedding to the vector field (e.g. `text_vec`).\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"message\": {\"type\": \"string\", \"description\": \"Text content or message\"}}, \"required\": [\"message\"]}, \"source\": \"readme\", \"access_level\": \"write\"}], \"tools_count\": 1, \"homepage\": \"\", \"url\": \"https://github.com/pingcap/pytidb\", \"topics\": [\"embeddings\", \"similarity-search\", \"sql\", \"tidb\", \"vector-search\", \"ai\", \"fulltext-search\", \"hybrid-search\", \"semantic-search\"], \"data_sources\": [\"official\"]}", "target": "", "id": "pingcap/pytidb", "metadata": {"stage": "finance_filter"}}
{"input": "{\"server_name\": \"Stitch AI\", \"server_id\": \"stitchai/stitch-ai-mcp\", \"description\": \"Knowledge management system for AI agents with memory space creation and retrieval capabilities.\", \"readme\": \"![image](https://github.com/user-attachments/assets/6533769e-dc98-4e64-a4ae-bfacc72f75fc)\\n[![StitchAI](https://img.shields.io/twitter/follow/StitchAI_hq?style=social&logo=twitter)](https://x.com/StitchAI_hq)\\n[![version](https://img.shields.io/badge/version-0.1.0-yellow.svg)](https://semver.org)\\n\\n# Stitch AI's MCP Server\\n\\n> Decentralized Knowledge Hub for AI\\n\\n> This repository contains a Model Context Protocol (MCP) server implementation for Stitch AI's memory management system. The server provides tools for creating, retrieving, and managing AI agent memories.\\n\\n---\\n\\n## Available Tools\\n\\nThe MCP server provides the following tools:\\n\\n### `create_space`\\nCreates a new memory space with the specified name.\\n- Parameters:\\n  - `space_name`: The name of the memory space to create\\n  - `type`: The type of memory space to create\\n\\n### `delete_space`\\nDeletes a memory space with the specified name.\\n- Parameters:\\n  - `space_name`: The name of the memory space to delete\\n\\n### `get_all_spaces`\\nGets a list of all available memory spaces.\\n- Parameters: None\\n\\n### `upload_memory`\\nUploads a new memory to a specified memory space.\\n- Parameters:\\n  - `space`: The name of the memory space to upload to\\n  - `message`: The memory message to upload\\n  - `memory`: The memory content to upload\\n\\n### `get_memory`\\nRetrieves a specific memory by ID from a memory space.\\n- Parameters:\\n  - `space`: The name of the memory space\\n  - `memory_id`: The ID of the memory to retrieve\\n\\n### `get_all_memories`\\nRetrieves all memories from a specified memory space.\\n- Parameters:\\n  - `space`: The name of the memory space to retrieve memories from\\n  - Optional Parameters:\\n    - `memory_names`: Comma-separated list of memory names to filter\\n    - `limit`: Maximum number of memories to return (default: 50)\\n    - `offset`: Number of memories to skip (default: 0)\\n\\n---\\n\\n### Run the server\\n\\n```bash\\nnpm run start\\n```\\n\\n---\\n\\n### Using with Claude Desktop\\n1. **Clone the repository**\\n   ```bash\\n   git clone https://github.com/StitchAI/stitch-ai-mcp.git\\n   ```\\n2. **Install dependencies**\\n   ```bash\\n   npm install @modelcontextprotocol/sdk zod\\n   npm install -D @types/node typescript\\n   ```\\n3. **Install Claude for Desktop**\\n   - Download and install the latest version from Claude's website\\n\\n4. **Configure Claude for Desktop**\\n   - Locate your Claude for Desktop configuration file:\\n     - **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\\n     - **Windows**: `%AppData%\\\\Claude\\\\claude_desktop_config.json`\\n   - Create the file if it doesn't exist\\n\\n5. **Edit Configuration File**\\n   - Open the configuration file in a text editor:\\n     - **macOS**: `code ~/Library/Application\\\\ Support/Claude/claude_desktop_config.json`\\n     - **Windows**: `code $env:AppData\\\\Claude\\\\claude_desktop_config.json`\\n   - Add your MCP server configuration:   \\n```json\\n{\\n    \\\"mcpServers\\\": {\\n        \\\"stitchai\\\": {\\n            \\\"command\\\": \\\"npx\\\",\\n            \\\"args\\\": [\\n                \\\"ts-node\\\",\\n                \\\"/path/to/cloned/stitch-ai-mcp/src/server.ts\\\"\\n            ],\\n            \\\"env\\\": {\\n                \\\"API_KEY\\\": \\\"<STITCH_AI_API_KEY>\\\",\\n                \\\"BASE_URL\\\": \\\"https://api-demo.stitch-ai.co\\\"\\n            }\\n        }\\n    }\\n}\\n```\\n6. **Restart Claude for Desktop**\\n   - After saving the configuration file, restart Claude for Desktop\\n   - The MCP UI elements will appear in Claude for Desktop once at least one server is properly configured\\n\\n---\\n\\n### Contact\\n\\nhttps://x.com/StitchAI_hq\\n\", \"tools\": [{\"name\": \"create_space\", \"description\": \"Creates a new memory space with the specified name.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for create_space\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"space_name\", \"description\": \"The name of the memory space to create\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for space_name\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"type\", \"description\": \"The type of memory space to create\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for type\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}, {\"name\": \"delete_space\", \"description\": \"Deletes a memory space with the specified name.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for delete_space\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"execute\"}, {\"name\": \"get_all_spaces\", \"description\": \"Gets a list of all available memory spaces.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_all_spaces\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"upload_memory\", \"description\": \"Uploads a new memory to a specified memory space.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for upload_memory\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"space\", \"description\": \"The name of the memory space to upload to\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for space\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"message\", \"description\": \"The memory message to upload\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"message\": {\"type\": \"string\", \"description\": \"Text content or message\"}}, \"required\": [\"message\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"memory\", \"description\": \"The memory content to upload\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"message\": {\"type\": \"string\", \"description\": \"Text content or message\"}}, \"required\": [\"message\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_memory\", \"description\": \"Retrieves a specific memory by ID from a memory space.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_memory\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"memory_id\", \"description\": \"The ID of the memory to retrieve\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for memory_id\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"get_all_memories\", \"description\": \"Retrieves all memories from a specified memory space.\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for get_all_memories\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"memory_names\", \"description\": \"Comma-separated list of memory names to filter\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for memory_names\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"limit\", \"description\": \"Maximum number of memories to return (default: 50)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for limit\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"read\"}, {\"name\": \"offset\", \"description\": \"Number of memories to skip (default: 0)\", \"inputSchema\": {\"type\": \"object\", \"properties\": {\"input\": {\"type\": \"string\", \"description\": \"Input parameter for offset\"}}, \"required\": [\"input\"]}, \"source\": \"readme\", \"access_level\": \"write\"}], \"tools_count\": 15, \"homepage\": \"\", \"url\": \"https://github.com/StitchAI/stitch-ai-mcp/\", \"topics\": [], \"data_sources\": [\"official\"]}", "target": "", "id": "stitchai/stitch-ai-mcp", "metadata": {"stage": "finance_filter"}}
