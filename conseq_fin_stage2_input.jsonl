{"input": "{\"raw_input\": \"ONLY RESPOND WITH JSON. NO EXPLANATIONS. NO MARKDOWN. NO TEXT OUTSIDE JSON.\\n\\nAnalyze the MCP server for financial relevance. Look for keywords: payment, banking, credit, loan, finance, money, currency, crypto, investment, trading, portfolio, market, exchange, wallet, account, budget, expense, income, tax, invoice, billing, accounting, insurance, compliance, KYC, AML.\\n\\nJSON FORMAT (NOTHING ELSE):\\n{\\n  \\\"server_name\\\": \\\"string\\\",\\n  \\\"server_id\\\": \\\"string\\\", \\n  \\\"is_finance_llm\\\": \\\"yes|no|unclear\\\",\\n  \\\"confidence\\\": \\\"high|medium|low\\\",\\n  \\\"threat_models\\\": [],\\n  \\\"analysis_notes\\\": \\\"Brief reason\\\"\\n}\\n\\nIf financial keywords found: is_finance_llm=\\\"yes\\\". If not: is_finance_llm=\\\"no\\\". If unclear: is_finance_llm=\\\"unclear\\\".\\n\\nRESPOND ONLY WITH JSON.\\n\\nMCP Server Data:\\n{\\\"server_name\\\": \\\"fdic-bank-find-mcp-server\\\", \\\"server_id\\\": \\\"clafollett/fdic-bank-find-mcp-server\\\", \\\"description\\\": \\\"The is a MCPserver that brings the power of FDIC BankFind APIs straight to your AI tools and workflows. Structured U.S. banking data, delivered with maximum vibes. \\\\ud83d\\\\ude0e\\\\ud83d\\\\udcca\\\", \\\"readme\\\": \\\"# \\\\ud83c\\\\udfe6 FDIC BankFind MCP Server \\\\ud83e\\\\udd20\\\\ud83d\\\\udcbb\\\\n\\\\n---\\\\n\\\\nThe **FDIC BankFind MCP Server** is a [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) server that brings the power of FDIC BankFind APIs straight to your AI tools and workflows. Structured U.S. banking data, delivered with maximum vibes. \\\\ud83d\\\\ude0e\\\\ud83d\\\\udcca\\\\n\\\\n[![Rust](https://img.shields.io/badge/Rust-stable-blue?logo=rust)](https://www.rust-lang.org/) ![OpenAPI](https://img.shields.io/badge/OpenAPI-3.0-green?logo=openapi-initiative) \\\\ud83e\\\\udd80\\\\n\\\\n---\\\\n\\\\n## \\\\ud83d\\\\udca1 Use Cases\\\\n\\\\n- Powering agent/LLM research on U.S. banks and institutions \\\\ud83e\\\\udd16\\\\ud83c\\\\udfe6\\\\n- Automating financial analytics, compliance, and reporting workflows \\\\ud83d\\\\udcc8\\\\ud83e\\\\uddfe\\\\n- Building AI-driven dashboards, bots, or custom fintech tools \\\\ud83e\\\\udd20\\\\ud83e\\\\udd16\\\\n- Rapid prototyping for academic or market analysis \\\\ud83c\\\\udf93\\\\ud83d\\\\udcca\\\\n\\\\n---\\\\n\\\\n## \\\\ud83d\\\\udee0\\\\ufe0f Prerequisites\\\\n\\\\n---\\\\n\\\\n1. To run the server in a container, you\\\\u2019ll need to have [Docker](https://www.docker.com/) installed. \\\\ud83d\\\\udc33\\\\n2. Once Docker is installed, make sure it\\\\u2019s running! \\\\ud83c\\\\udfc3\\\\u200d\\\\u2642\\\\ufe0f\\\\ud83d\\\\udca8\\\\n\\\\n---\\\\n\\\\n## Installation\\\\n\\\\n### \\\\ud83d\\\\ude80 Run the Official Public Docker Image (Recommended)\\\\n\\\\nThe FDIC BankFind MCP Server is published and ready to use from GitHub Container Registry (GHCR).\\\\n\\\\nTo run it (Docker will pull the image automatically if it's not present):\\\\n\\\\n```sh\\\\ndocker run -i --rm ghcr.io/clafollett/fdic-bank-find-mcp-server:main\\\\n```\\\\n\\\\nYou do NOT need to build the image yourself unless you want to develop or customize the server. For most users, just running the command above is all you need!\\\\n\\\\n---\\\\n\\\\n### Build Steps (Manual Docker Build)\\\\n\\\\nIf you want to build the image yourself (for local development or custom changes):\\\\n\\\\n1. **Clone the repository:**\\\\n\\\\n   ```bash\\\\n   git clone https://github.com/YOUR-ORG/fdic-bank-find-mcp-server.git\\\\n   cd fdic-bank-find-mcp-server\\\\n   ```\\\\n\\\\n2. **Build the Docker image:**\\\\n\\\\n   ```bash\\\\n   docker build -t fdic-bank-find-mcp-server:main .\\\\n   ```\\\\n\\\\n   This uses the included `Dockerfile` to build a release-mode Rust binary and package it into a minimal container.\\\\n\\\\n3. **Test the image locally:**\\\\n\\\\n   ```bash\\\\n   docker run -i --rm fdic-bank-find-mcp-server:main\\\\n   ```\\\\n\\\\n   (The `-i` flag is required for stdio/MCP integration.)\\\\n\\\\n4. **Use the image in your MCP host config:**\\\\n   Follow the VS Code or Claude Desktop instructions below, referencing your local image as `fdic-bank-find-mcp-server:main`.\\\\n\\\\n> If you\\\\u2019d like to tag/push to a registry, simply update the `docker build` and `docker tag` commands accordingly.\\\\n\\\\n### \\\\ud83e\\\\uddd1\\\\u200d\\\\ud83d\\\\udcbb Usage with VS Code\\\\n\\\\nOnce the image is published to GHCR you\\\\u2019ll be able to click a one-click install badge here. Until then, follow the manual steps below. \\\\ud83d\\\\udee0\\\\ufe0f\\\\n\\\\nAdd the following JSON block to your **User Settings (JSON)** file. Open it with `Ctrl + Shift + P` \\\\u2192 \\\\u201cPreferences: Open User Settings (JSON)\\\\u201d.\\\\n\\\\n```json\\\\n{\\\\n  \\\\\\\"mcp\\\\\\\": {\\\\n    \\\\\\\"servers\\\\\\\": {\\\\n      \\\\\\\"fdic\\\\\\\": {\\\\n        \\\\\\\"command\\\\\\\": \\\\\\\"docker\\\\\\\",\\\\n        \\\\\\\"args\\\\\\\": [\\\\n          \\\\\\\"run\\\\\\\",\\\\n          \\\\\\\"-i\\\\\\\",\\\\n          \\\\\\\"--rm\\\\\\\",\\\\n          \\\\\\\"ghcr.io/YOUR-ORG/fdic-bank-find-mcp-server:main\\\\\\\"\\\\n        ]\\\\n      }\\\\n    }\\\\n  }\\\\n}\\\\n```\\\\n\\\\n> \\\\ud83d\\\\udca1 For workspace-specific config, place the same block (without the outer `\\\\\\\"mcp\\\\\\\"` key) in `.vscode/mcp.json`. Easy peasy! \\\\ud83c\\\\udf4b\\\\n\\\\n### \\\\ud83e\\\\udd16 Usage with Claude Desktop (Conceptual)\\\\n\\\\n```json\\\\n{\\\\n  \\\\\\\"mcpServers\\\\\\\": {\\\\n    \\\\\\\"fdic-bank-find\\\\\\\": {\\\\n      \\\\\\\"command\\\\\\\": \\\\\\\"docker\\\\\\\",\\\\n      \\\\\\\"args\\\\\\\": [\\\\n        \\\\\\\"run\\\\\\\",\\\\n        \\\\\\\"-i\\\\\\\",\\\\n        \\\\\\\"--rm\\\\\\\",\\\\n        \\\\\\\"ghcr.io/YOUR-ORG/fdic-bank-find-mcp-server:main\\\\\\\"\\\\n      ]\\\\n    }\\\\n  }\\\\n}\\\\n```\\\\n\\\\n### \\\\ud83e\\\\udd80 Build from Source (Manual)\\\\n\\\\nIf you prefer not to use Docker (or want to hack on the server itself), you can compile the binary with the Rust toolchain and run it in **stdio** mode. \\\\ud83e\\\\uddbe\\\\n\\\\n```bash\\\\n# Clone & build\\\\n$ git clone https://github.com/YOUR-ORG/fdic-bank-find-mcp-server.git\\\\n$ cd fdic-bank-find-mcp-server\\\\n$ cargo build --release\\\\n```\\\\n\\\\nOnce built, configure your MCP host to invoke the executable directly. For example, in **VS Code User Settings (JSON)**:\\\\n\\\\n```json\\\\n{\\\\n  \\\\\\\"mcp\\\\\\\": {\\\\n    \\\\\\\"servers\\\\\\\": {\\\\n      \\\\\\\"fdic\\\\\\\": {\\\\n        \\\\\\\"command\\\\\\\": \\\\\\\"/path/to/repository/fdic-bank-find-mcp-server/target/release/fdic-bank-find-mcp-server\\\\\\\"\\\\n      }\\\\n    }\\\\n  }\\\\n}\\\\n```\\\\n\\\\n---\\\\n\\\\n## \\\\ud83d\\\\udd75\\\\ufe0f\\\\u200d\\\\u2642\\\\ufe0f MCP Inspector Setup & Usage\\\\n\\\\nWant to test, debug, or vibe with your MCP server in a beautiful UI? Enter the **MCP Inspector**! \\\\ud83d\\\\udd0d\\\\u2728\\\\n\\\\n### Running the MCP Inspector\\\\n\\\\nYou can run it directly (no install needed):\\\\n\\\\n```sh\\\\nnpx @modelcontextprotocol/inspector docker run -i --rm fdic-bank-find-mcp-server:main\\\\n```\\\\n\\\\nOr install globally for convenience:\\\\n\\\\n```sh\\\\nnpm install -g @modelcontextprotocol/inspector\\\\nmodelcontextprotocol-inspector docker run -i --rm fdic-bank-find-mcp-server:main\\\\n```\\\\n\\\\n> The Inspector launches a local UI and pipes MCP requests/responses between your server and the interface. Perfect for debugging, prototyping, and showing off your API to friends, robots, or your boss. \\\\ud83d\\\\ude0e\\\\ud83e\\\\udd16\\\\n\\\\n---\\\\n\\\\n## \\\\ud83c\\\\udfaf Tool Overview \\\\ud83c\\\\udfaf\\\\n\\\\nAll tools accept the following common parameters:\\\\n\\\\n- `api_key`: Your FDIC API key (optional)\\\\n- `filters`: Filter expression for advanced querying using FDIC BankFind syntax\\\\n- `fields`: Comma-delimited list of fields to return\\\\n- `limit`: Number of reco\\\\n[...truncated for length...]\\\", \\\"tools\\\": [{\\\"name\\\": \\\"Dockerfile\\\", \\\"description\\\": \\\"to build a release-mode Rust binary and package it into a minimal container.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"file_path\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"File path or file to process\\\"}}, \\\"required\\\": [\\\"file_path\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"api_key\\\", \\\"description\\\": \\\"Your FDIC API key (optional)\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for api_key\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"filters\\\", \\\"description\\\": \\\"Filter expression for advanced querying using FDIC BankFind syntax\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"query\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Search query or term\\\"}}, \\\"required\\\": [\\\"query\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"fields\\\", \\\"description\\\": \\\"Comma-delimited list of fields to return\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for fields\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"limit\\\", \\\"description\\\": \\\"Number of records to return\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for limit\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"offset\\\", \\\"description\\\": \\\"Pagination offset\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for offset\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"sort_by\\\", \\\"description\\\": \\\"Field to sort by\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for sort_by\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"sort_order\\\", \\\"description\\\": \\\"Sort order (ASC/DESC)\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for sort_order\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"file_format\\\", \\\"description\\\": \\\"Response format (json/csv/xml)\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"file_path\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"File path or file to process\\\"}}, \\\"required\\\": [\\\"file_path\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"file_download\\\", \\\"description\\\": \\\"Download flag (if set, triggers file download)\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"file_path\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"File path or file to process\\\"}}, \\\"required\\\": [\\\"file_path\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"execute\\\"}, {\\\"name\\\": \\\"file_name\\\", \\\"description\\\": \\\"Custom filename for download\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"file_path\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"File path or file to process\\\"}}, \\\"required\\\": [\\\"file_path\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"execute\\\"}, {\\\"name\\\": \\\"get_demographics\\\", \\\"description\\\": \\\"| Demographic summaries         |                                                                                           |\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for get_demographics\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_failures\\\", \\\"description\\\": \\\"| Historical bank failures      | `agg_by`, `agg_limit`, `agg_sum_fields`, `agg_term_fields`, `total_fields`, `subtotal_by` |\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for get_failures\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_history\\\", \\\"description\\\": \\\"| Structure change events       | `search`, `agg_by`, `agg_limit`, `agg_term_fields`                                        |\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"query\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Search query or term\\\"}}, \\\"required\\\": [\\\"query\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"get_institutions\\\", \\\"description\\\": \\\"| Institution demographics      | `search`                                                                                  |\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"query\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Search query or term\\\"}}, \\\"required\\\": [\\\"query\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_locations\\\", \\\"description\\\": \\\"| Branch locations              |                                                                                           |\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for get_locations\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_sod\\\", \\\"description\\\": \\\"| Summary of Deposits           | `agg_by`, `agg_limit`, `agg_sum_fields`, `agg_term_fields`                                |\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for get_sod\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_summary\\\", \\\"description\\\": \\\"| Historical aggregates by year | `agg_by`, `agg_limit`, `agg_sum_fields`, `agg_term_fields`, `max_value`, `max_value_by`   |\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"amount\\\": {\\\"type\\\": \\\"number\\\", \\\"description\\\": \\\"Numeric amount or value\\\"}}, \\\"required\\\": [\\\"amount\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}], \\\"tools_count\\\": 18, \\\"homepage\\\": \\\"\\\", \\\"url\\\": \\\"https://github.com/clafollett/fdic-bank-find-mcp-server\\\", \\\"topics\\\": [], \\\"data_sources\\\": [\\\"github\\\", \\\"official\\\"]}\", \"stage1_analysis\": {\"server_name\": \"fdic-bank-find-mcp-server\", \"server_id\": \"clafollett/fdic-bank-find-mcp-server\", \"is_finance_llm\": \"yes\", \"confidence\": \"high\", \"threat_models\": [\"data_exposure\", \"api_abuse\", \"regulatory_compliance\"], \"analysis_notes\": \"Server provides access to FDIC banking data including bank demographics, failures, deposits, and compliance information. Contains financial keywords: banking, finance, compliance, account, institutions.\"}, \"identified_threat_models\": [\"data_exposure\", \"api_abuse\", \"regulatory_compliance\"], \"stage1_confidence\": \"high\", \"stage1_notes\": \"Server provides access to FDIC banking data including bank demographics, failures, deposits, and compliance information. Contains financial keywords: banking, finance, compliance, account, institutions.\"}", "target": "", "id": "LJfZCWv4PkQ9ugjKBjfAM3", "metadata": {"stage": "consequentiality_assessment"}}
{"input": "{\"raw_input\": \"ONLY RESPOND WITH JSON. NO EXPLANATIONS. NO MARKDOWN. NO TEXT OUTSIDE JSON.\\n\\nAnalyze the MCP server for financial relevance. Look for keywords: payment, banking, credit, loan, finance, money, currency, crypto, investment, trading, portfolio, market, exchange, wallet, account, budget, expense, income, tax, invoice, billing, accounting, insurance, compliance, KYC, AML.\\n\\nJSON FORMAT (NOTHING ELSE):\\n{\\n  \\\"server_name\\\": \\\"string\\\",\\n  \\\"server_id\\\": \\\"string\\\", \\n  \\\"is_finance_llm\\\": \\\"yes|no|unclear\\\",\\n  \\\"confidence\\\": \\\"high|medium|low\\\",\\n  \\\"threat_models\\\": [],\\n  \\\"analysis_notes\\\": \\\"Brief reason\\\"\\n}\\n\\nIf financial keywords found: is_finance_llm=\\\"yes\\\". If not: is_finance_llm=\\\"no\\\". If unclear: is_finance_llm=\\\"unclear\\\".\\n\\nRESPOND ONLY WITH JSON.\\n\\nMCP Server Data:\\n{\\\"server_name\\\": \\\"armor-crypto-mcp\\\", \\\"server_id\\\": \\\"armorwallet/armor-crypto-mcp\\\", \\\"description\\\": \\\"MCP to interface with multiple blockchains, staking, DeFi, swap, bridging, wallet management, DCA, Limit Orders, Coin Lookup, Tracking and more.\\\", \\\"readme\\\": \\\"# Armor Crypto MCP\\\\n*Alpha Test version 0.1.24*\\\\n\\\\nA single source for integrating AI Agents with the Crypto ecosystem. This includes Wallet creation and management, swaps, transfers, event-based trades like DCA, stop loss and take profit, and much more. The Armor MCP supports Solana in Alpha and, when in beta, will support more than a dozen blockchains, including Ethereum. Base, Avalanche, Bitcoin, Sui, Berachain, megaETH, Optimism, Ton, BNB, and Arbitrum, among others. Using Armor's MCP you can bring all of crypto into your AI Agent with unified logic and a complete set of tools.\\\\n       \\\\n![Armor MCP](https://armor-assets-repository.s3.nl-ams.scw.cloud/MCP_sm.png)\\\\n<br />\\\\n<br />\\\\n<br />\\\\n<br />\\\\n<br />\\\\n<br />\\\\n# Features\\\\n\\\\n\\\\ud83e\\\\udde0 AI Native\\\\n\\\\n\\\\ud83d\\\\udcd9 Wallet Management\\\\n\\\\n\\\\ud83d\\\\udd03 Swaps\\\\n\\\\n\\\\ud83c\\\\udf08 Specialized trades (DCA, Stop Loss etc.)\\\\n\\\\n\\\\u26d3\\\\ufe0f Multi-chain\\\\n\\\\n\\\\u2194\\\\ufe0f Cross-chain transations\\\\n\\\\n\\\\ud83e\\\\udd69 Staking\\\\n\\\\n\\\\ud83e\\\\udd16 Fast intergration to Agentic frameworks\\\\n\\\\n\\\\ud83d\\\\udc6b Social Sentiment\\\\n\\\\n\\\\ud83d\\\\udd2e Prediction\\\\n<br />\\\\n<br />\\\\n![Armor MCP Diagram](https://armor-assets-repository.s3.nl-ams.scw.cloud/amor_mcp_diagram.png)\\\\n<br />\\\\n<br />\\\\n<br />\\\\n<br />\\\\n<br />\\\\n<br />\\\\n\\\\n# Requirements\\\\n\\\\n### 1. Make sure you have python installed\\\\n<br />\\\\n\\\\n### 2. Install `uv`\\\\n*Linux / Windows*\\\\n\\\\n```sh\\\\npip install uv\\\\n```\\\\n*Mac*\\\\n\\\\n```sh\\\\nbrew install uv\\\\n```\\\\n<br />\\\\n\\\\n### 3. Claude Desktop or your AI Agent will run the MCP\\\\nSee [Usage & Configuration](#usage--configuration) for details.\\\\n<br />\\\\n<br />\\\\n<br />\\\\n<br />\\\\n<br />\\\\n\\\\n# Alpha Testing\\\\n\\\\nWe are currently in pre-alpha, and we are testing the capabilities of various agents and agentic frameworks like Claude Desktop, Cline, Cursor, n8n, etc. \\\\n\\\\n## Current Features & Tools\\\\n- Wallet Management\\\\n    - Grouping & Organization\\\\n    - Archiving\\\\n- Swap & Trades\\\\n    - Normal swap\\\\n    - DCA (place / list / cancel)\\\\n    - Scheduled Orders\\\\n    - Limit Orders (place / list / cancel)\\\\n- Staking and Unstaking\\\\n- Token Search and Trending Tokens\\\\n- Statistical Calculator for accurate Analysis\\\\n- Supports Solana blockchain\\\\n\\\\n## Coming Soon\\\\n- More Blockchain Support\\\\n- Minting\\\\n- Armor Agents as a Tool (or A2A)\\\\n\\\\n## MCP Setup\\\\nCurrently you need to have the Armor NFT to get an API Key.\\\\nGet it [here](https://codex.armorwallet.ai/)\\\\n\\\\n## Usage & Configuration\\\\nTo use the Armor MCP with your agent, you need the following configuration, replace `<PUT-YOUR-KEY-HERE>` with your API key:\\\\n```json\\\\n{\\\\n  \\\\\\\"mcpServers\\\\\\\": {\\\\n    \\\\\\\"armor-crypto-mcp\\\\\\\": {\\\\n      \\\\\\\"command\\\\\\\": \\\\\\\"uvx\\\\\\\",\\\\n      \\\\\\\"args\\\\\\\": [\\\\\\\"armor-crypto-mcp@latest\\\\\\\", \\\\\\\"--version\\\\\\\"],\\\\n      \\\\\\\"env\\\\\\\": {\\\\n        \\\\\\\"ARMOR_API_KEY\\\\\\\": \\\\\\\"<PUT-YOUR-KEY-HERE>\\\\\\\"\\\\n      }\\\\n    }\\\\n  }\\\\n}\\\\n```\\\\n<br />\\\\n<br />\\\\n<br />\\\\n<br />\\\\n<br />\\\\n<br />\\\\n\\\\n# Use in Claude Desktop\\\\n1. Must have Developer Mode enabled\\\\n2. Open Claude Desktop's File Menu top left of the window.\\\\n3. Go to File > Settings\\\\n4. Under Developer, click Edit Configuration\\\\n5. In the config file, insert the `armor-wallet-mcp` section from above\\\\n6. Make sure to replace the placeholder with your API key\\\\n7. Save the file and start a new Chat in Claude Desktop\\\\n\\\\n## Use in Cline\\\\n1. Click on the `MCP Servers` button in the Cline tab in VSCode on the left panel\\\\n2. Scroll to the bottom of the left panel and click on `Configure MCP Servers`\\\\n3. In the config file, insert `armor-wallet-mcp` section from above\\\\n4. Make sure to replace the placeholder with your API key\\\\n5. Save the file, click `Done` under the `MCP Servers` tab and start chatting with Cline\\\\n\\\\n## Use in n8n\\\\n1. Open the n8n app\\\\n2. Bottom-left of screen click `...` next to your username and click `Settings`\\\\n3. On the left panel, click `Community nodes` and then `Install a Community Node` button\\\\n4. In the search field for `npm Package Name` type in *mcp*\\\\n5. Install `MCP Nodes`\\\\n6. Add any MCP node, for example: `List Tools`\\\\n7. In the MCP Client `Parameters` tab, click `Select Credential` and click `Create new credential`\\\\n8. Under `Command` enter `uvx`\\\\n9. Under `Arguments` enter `armor-crypto-mcp`\\\\n10. Under `Environments` enter `ARMOR_API_KEY=eyJhbGciOiJIUzI1NiIsIn...` paste the full API Key value after the `=`\\\\n11. Back in the `Parameters` tab you can choose the MCP `Operation` for that Node\\\\n<br />\\\\n<br />\\\\n<br />\\\\n<br />\\\\n<br />\\\\n<br />\\\\n\\\\n# Using Armor MCP\\\\n\\\\nOnce you have setup the Armor MCP [here are some prompts you can use to get started](https://github.com/armorwallet/armor-crypto-mcp/blob/main/README_prompts.md)\\\\n<br />\\\\n<br />\\\\n<br />\\\\n\\\", \\\"tools\\\": [{\\\"name\\\": \\\"uv\\\", \\\"description\\\": \\\"*Linux / Windows*\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for uv\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"Done\\\", \\\"description\\\": \\\"under the `MCP Servers` tab and start chatting with Cline\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for Done\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"Settings\\\", \\\"description\\\": \\\"3. On the left panel, click `Community nodes` and then `Install a Community Node` button\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for Settings\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"execute\\\"}, {\\\"name\\\": \\\"Parameters\\\", \\\"description\\\": \\\"tab, click `Select Credential` and click `Create new credential`\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for Parameters\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"Command\\\", \\\"description\\\": \\\"enter `uvx`\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for Command\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"Arguments\\\", \\\"description\\\": \\\"enter `armor-crypto-mcp`\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for Arguments\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"Environments\\\", \\\"description\\\": \\\"enter `ARMOR_API_KEY=eyJhbGciOiJIUzI1NiIsIn...` paste the full API Key value after the `=`\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"amount\\\": {\\\"type\\\": \\\"number\\\", \\\"description\\\": \\\"Numeric amount or value\\\"}}, \\\"required\\\": [\\\"amount\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}], \\\"tools_count\\\": 7, \\\"homepage\\\": \\\"\\\", \\\"url\\\": \\\"https://github.com/armorwallet/armor-crypto-mcp\\\", \\\"topics\\\": [\\\"ai\\\", \\\"ai-agents\\\", \\\"cryptocurrency\\\", \\\"mcp\\\", \\\"tradingbot\\\", \\\"wallet\\\"], \\\"data_sources\\\": [\\\"github\\\", \\\"official\\\"]}\", \"stage1_analysis\": {\"server_name\": \"armor-crypto-mcp\", \"server_id\": \"armorwallet/armor-crypto-mcp\", \"is_finance_llm\": \"yes\", \"confidence\": \"high\", \"threat_models\": [\"unauthorized_crypto_transactions\", \"wallet_key_exposure\", \"defi_protocol_exploitation\", \"cross_chain_bridge_attacks\", \"trading_manipulation\"], \"analysis_notes\": \"Comprehensive crypto/DeFi MCP with wallet management, trading, swaps, staking, DCA, limit orders - high financial risk\"}, \"identified_threat_models\": [\"unauthorized_crypto_transactions\", \"wallet_key_exposure\", \"defi_protocol_exploitation\", \"cross_chain_bridge_attacks\", \"trading_manipulation\"], \"stage1_confidence\": \"high\", \"stage1_notes\": \"Comprehensive crypto/DeFi MCP with wallet management, trading, swaps, staking, DCA, limit orders - high financial risk\"}", "target": "", "id": "Lx3yXwcduuYAxmeEe3KAsL", "metadata": {"stage": "consequentiality_assessment"}}
{"input": "{\"raw_input\": \"ONLY RESPOND WITH JSON. NO EXPLANATIONS. NO MARKDOWN. NO TEXT OUTSIDE JSON.\\n\\nAnalyze the MCP server for financial relevance. Look for keywords: payment, banking, credit, loan, finance, money, currency, crypto, investment, trading, portfolio, market, exchange, wallet, account, budget, expense, income, tax, invoice, billing, accounting, insurance, compliance, KYC, AML.\\n\\nJSON FORMAT (NOTHING ELSE):\\n{\\n  \\\"server_name\\\": \\\"string\\\",\\n  \\\"server_id\\\": \\\"string\\\", \\n  \\\"is_finance_llm\\\": \\\"yes|no|unclear\\\",\\n  \\\"confidence\\\": \\\"high|medium|low\\\",\\n  \\\"threat_models\\\": [],\\n  \\\"analysis_notes\\\": \\\"Brief reason\\\"\\n}\\n\\nIf financial keywords found: is_finance_llm=\\\"yes\\\". If not: is_finance_llm=\\\"no\\\". If unclear: is_finance_llm=\\\"unclear\\\".\\n\\nRESPOND ONLY WITH JSON.\\n\\nMCP Server Data:\\n{\\\"server_name\\\": \\\"ethereum-rpc-mpc\\\", \\\"server_id\\\": \\\"phillip-kemper/ethereum-rpc-mpc\\\", \\\"description\\\": \\\"A TypeScript MCP server that leverages the MCP SDK to support all Ethereum JSON-RPC calls, enabling AI models to interact with blockchain data.\\\", \\\"readme\\\": \\\"# Ethereum RPC MPC Server\\\\n\\\\n[![npm version](https://img.shields.io/npm/v/ethereum-rpc-mpc.svg)](https://www.npmjs.com/package/ethereum-rpc-mpc)\\\\n[![npm downloads](https://img.shields.io/npm/dm/ethereum-rpc-mpc.svg)](https://www.npmjs.com/package/ethereum-rpc-mpc)\\\\n\\\\nA TypeScript MCP server that leverages the MCP SDK to support all Ethereum JSON-RPC calls, enabling AI models to interact with blockchain data.\\\\n\\\\n## Overview\\\\n\\\\nThis project provides a Model Context Protocol (MCP) server that allows AI assistants like Cursor or Claude (or any MCP Client implementation) to interact with Ethereum blockchain data through standardized JSON-RPC interfaces. It acts as a bridge between AI models and EVM blockchains, enabling seamless access to on-chain data and functionality.\\\\n\\\\n## Installation\\\\n\\\\n```bash\\\\n# Clone the repository\\\\ngit clone git@github.com:Phillip-Kemper/ethereum-rpc-mpc.git\\\\ncd ethereum-rpc-mpc\\\\n\\\\n# Install dependencies\\\\nyarn install\\\\n\\\\n# Build the project\\\\nyarn build\\\\n\\\\n# Start Inspector with default Ethereum RPC (you can change in the inspector settings on )\\\\nyarn inspector\\\\n```\\\\n\\\\n## Usage\\\\n\\\\n### Using with Cursor\\\\n\\\\nTo use this MPC server with Cursor:\\\\n\\\\n1. In Cursor, go to Settings > Cursor Settings > MCP\\\\n2. Add a new MCP server with the following configuration:\\\\n   - Name: Ethereum RPC\\\\n   - Type: Command\\\\n   - Command: `npx -y ethereum-rpc-mpc https://eth.llamarpc.com Ethereum`\\\\n   or\\\\n   - Command: `node /path/to/ethereum-rpc-mpc/dist/server/index.js https://eth.llamarpc.com Ethereum`\\\\n\\\\n<img width=\\\\\\\"938\\\\\\\" alt=\\\\\\\"Screenshot 2025-03-13 at 19 41 56\\\\\\\" src=\\\\\\\"https://github.com/user-attachments/assets/f9e09d44-ea43-4ef2-9950-88300f6f9667\\\\\\\" />\\\\n\\\\n### Analytics\\\\n\\\\nYou can also enable analytics using [MCP Analytics Middleware](https://github.com/Phillip-Kemper/mcp-analytics-middleware) to get an overview about number of requests, duration of requests as well as error reporting for all your tools and resources. To enable it, just pass the --analytics flag and additionally a path for the Sqlite File.\\\\n\\\\n- Command: `npx -y ethereum-rpc-mpc https://eth.llamarpc.com Ethereum --analytics --db-path /Users/satoshi/Desktop/analytics.db`\\\\n\\\\n\\\\n### Starting the Server\\\\n\\\\nYou can start the server by providing an Ethereum RPC URL and an optional chain name:\\\\n\\\\n```bash\\\\nyarn start [RPC_URL] [CHAIN_NAME]\\\\n\\\\n# Using npx (without installing)\\\\nnpx -y ethereum-rpc-mpc [RPC_URL] [CHAIN_NAME]\\\\n```\\\\n\\\\nIf no RPC URL is provided, it will default to \\\\\\\"https://eth.llamarpc.com\\\\\\\".\\\\n\\\\nExample:\\\\n\\\\n```bash\\\\n# Connect to Ethereum mainnet\\\\nyarn start https://eth.llamarpc.com Ethereum\\\\n\\\\n# Connect to Zircuit\\\\nyarn start https://mainnet.zircuit.com Zircuit\\\\n```\\\\n\\\\n## Examples\\\\n\\\\nHere are some examples of how to use the Ethereum RPC MPC server with Claude:\\\\n\\\\n### Getting the Current Block Number\\\\n\\\\n```\\\\nWhat's the current block number?\\\\n```\\\\n\\\\n### Checking an Address Balance\\\\n\\\\n```\\\\nWhat's the ETH balance of 0x742d35Cc6634C0532925a3b844Bc454e4438f44e?\\\\n```\\\\n\\\\n### Getting Contract Information\\\\n\\\\n```\\\\nIs 0x6B175474E89094C44Da98b954EedeAC495271d0F a smart contract? If yes, what kind of contract is it?\\\\n```\\\\n\\\\n### Retrieving Transaction Details\\\\n\\\\n```\\\\nCan you show me the details of transaction 0x5c504ed432cb51138bcf09aa5e8a410dd4a1e204ef84bfed1be16dfba1b22060?\\\\n```\\\\n\\\\n## Zircuit SLS (Sequencer Level Security) Methods\\\\n\\\\nThis server includes special support for Zircuit-specific RPC methods. These methods are not enabled by default but are automatically activated when connecting to a Zircuit endpoint (Chain ID: 48900).\\\\n\\\\nThe supported Zircuit methods include:\\\\n\\\\n- `zirc_isQuarantined`: Check if a specific transaction is quarantined\\\\n- `zirc_getQuarantined`: Query all quarantined transactions with optional address filtering\\\\n\\\\nThese methods are particularly useful for monitoring transaction quarantine status.\\\\n\\\\n## Future Steps\\\\n\\\\n### Next to RPC, also support indexed API access\\\\n\\\\nWe plan to extend the functionality beyond basic RPC calls to include support for indexed blockchain data APIs. This will enable more efficient querying of historical data and complex on-chain analytics.\\\\n\\\\n### Multi Chain, Multi RPC Support\\\\n\\\\nFuture versions will support connecting to multiple chains and RPC endpoints simultaneously, allowing AI models to access data across different blockchains in a single session.\\\\n\\\\n### Client Implementation\\\\n\\\\nA future enhancement will be to develop a client-side implementation that makes it easier to interact with this MCP server from various applications.\\\\n\\\\n### Server Analytics\\\\n\\\\nWe plan to add analytics capabilities to track usage patterns, popular RPC methods, and performance metrics. This will help optimize the server and provide insights into how AI models are interacting with blockchain data.\\\\n\\\\n## License\\\\n\\\\nMIT \\\\n\\\", \\\"tools\\\": [{\\\"name\\\": \\\"zirc_isQuarantined\\\", \\\"description\\\": \\\"Check if a specific transaction is quarantined\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for zirc_isQuarantined\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"zirc_getQuarantined\\\", \\\"description\\\": \\\"Query all quarantined transactions with optional address filtering\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"query\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Search query or term\\\"}}, \\\"required\\\": [\\\"query\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"write\\\"}], \\\"tools_count\\\": 2, \\\"homepage\\\": \\\"\\\", \\\"url\\\": \\\"https://github.com/Phillip-Kemper/ethereum-rpc-mpc\\\", \\\"topics\\\": [\\\"ai\\\", \\\"claude\\\", \\\"cursor\\\", \\\"ethereum\\\", \\\"evm\\\", \\\"json-rpc\\\", \\\"mcp\\\"], \\\"data_sources\\\": [\\\"github\\\"]}\", \"stage1_analysis\": {\"server_name\": \"ethereum-rpc-mpc\", \"server_id\": \"phillip-kemper/ethereum-rpc-mcp\", \"is_finance_llm\": \"yes\", \"confidence\": \"high\", \"threat_models\": [\"cryptocurrency_transaction_analysis\", \"blockchain_data_access\", \"crypto_wallet_interaction\"], \"analysis_notes\": \"Server enables AI interaction with Ethereum blockchain data including balance checks, transactions, and smart contracts - directly related to cryptocurrency and financial operations\"}, \"identified_threat_models\": [\"cryptocurrency_transaction_analysis\", \"blockchain_data_access\", \"crypto_wallet_interaction\"], \"stage1_confidence\": \"high\", \"stage1_notes\": \"Server enables AI interaction with Ethereum blockchain data including balance checks, transactions, and smart contracts - directly related to cryptocurrency and financial operations\"}", "target": "", "id": "YSRmafqniuQ4MA8cuojWAi", "metadata": {"stage": "consequentiality_assessment"}}
{"input": "{\"raw_input\": \"ONLY RESPOND WITH JSON. NO EXPLANATIONS. NO MARKDOWN. NO TEXT OUTSIDE JSON.\\n\\nAnalyze the MCP server for financial relevance. Look for keywords: payment, banking, credit, loan, finance, money, currency, crypto, investment, trading, portfolio, market, exchange, wallet, account, budget, expense, income, tax, invoice, billing, accounting, insurance, compliance, KYC, AML.\\n\\nJSON FORMAT (NOTHING ELSE):\\n{\\n  \\\"server_name\\\": \\\"string\\\",\\n  \\\"server_id\\\": \\\"string\\\", \\n  \\\"is_finance_llm\\\": \\\"yes|no|unclear\\\",\\n  \\\"confidence\\\": \\\"high|medium|low\\\",\\n  \\\"threat_models\\\": [],\\n  \\\"analysis_notes\\\": \\\"Brief reason\\\"\\n}\\n\\nIf financial keywords found: is_finance_llm=\\\"yes\\\". If not: is_finance_llm=\\\"no\\\". If unclear: is_finance_llm=\\\"unclear\\\".\\n\\nRESPOND ONLY WITH JSON.\\n\\nMCP Server Data:\\n{\\\"server_name\\\": \\\"MessariMCP\\\", \\\"server_id\\\": \\\"n-45div/messarimcp\\\", \\\"description\\\": \\\"A MCP server powered by Messari Chat Agent API and an LLM based kit for mindshare and set insights over the time and plots to be the next crime-fighting AI toolkit.\\\", \\\"readme\\\": \\\"# Messari Influencer Mindshare and Asset Analysis\\\\r\\\\n\\\\r\\\\nThis repository contains a Python script for analyzing mindshare data of cryptocurrency assets using the Messari API. The script fetches mindshare data, performs anomaly detection, visualizes trends, and provides insights into significant spikes in attention for a given asset. The analysis is tailored for use in Google Colab, with plotting and readable insights displayed directly in the notebook.\\\\r\\\\n\\\\r\\\\n---\\\\r\\\\n\\\\r\\\\n## Overview\\\\r\\\\n\\\\r\\\\nThe Python script provides several functions to facilitate mindshare analysis for both cryptocurrency assets and Key Opinion Leaders (KOLs) on social media platforms like Twitter. Below is a description of each function:\\\\r\\\\n\\\\r\\\\n---\\\\r\\\\n\\\\r\\\\n#### `call_mistral`\\\\r\\\\n\\\\r\\\\n- **Purpose**: Interacts with the Mistral API to perform **sentiment analysis** on text data (e.g., summaries of trending topics).\\\\r\\\\n- **Returns**: A JSON object with the sentiment (`positive`, `negative`, or `neutral`) and an insight into how the topic may influence crypto market attention.\\\\r\\\\n- **Features**:\\\\r\\\\n  - Includes **retry logic** for handling rate limits.\\\\r\\\\n  - Caches responses to **avoid redundant API calls**.\\\\r\\\\n- **Used In**: KOL mindshare analysis to explain **anomalies** by sentiment-analyzing related trending topics.\\\\r\\\\n\\\\r\\\\n---\\\\r\\\\n\\\\r\\\\n#### `get_trending_details`\\\\r\\\\n\\\\r\\\\n- **Purpose**: Fetches **trending topics** from the Messari API within a given date range and topic classes (e.g., `\\\\\\\"Macro Commentary, Project Announcements, Legal and Regulatory\\\\\\\"`).\\\\r\\\\n- **Returns**: A dictionary of trending topics for the specified criteria.\\\\r\\\\n- **Used For**: Providing context for **mindshare anomalies** in the KOL analysis by correlating spikes with relevant market news and events.\\\\r\\\\n\\\\r\\\\n---\\\\r\\\\n\\\\r\\\\n#### `analyze_mindshare_data`\\\\r\\\\n\\\\r\\\\n- **Purpose**: Retrieves **mindshare data** for a specific Twitter handle (e.g., `@AltcoinGordon`) from the Messari API.\\\\r\\\\n- **Processes**:\\\\r\\\\n  - Detects **anomalies** in mindshare scores using **z-scores** (default threshold: `2.0`).\\\\r\\\\n  - **Plots** mindshare scores over time with anomalies **highlighted in red**.\\\\r\\\\n  - Provides insights on:\\\\r\\\\n    - **Trends** (upward/downward/stable)\\\\r\\\\n    - **Score and rank ranges**\\\\r\\\\n    - **List of anomalies**\\\\r\\\\n  - Uses `call_mistral` + `get_trending_details` to add **sentiment + market explanation** to detected anomalies.\\\\r\\\\n- **Display**: Results are shown **directly in Google Colab**.\\\\r\\\\n- **Best For**: KOL mindshare tracking and insight generation.\\\\r\\\\n\\\\r\\\\n---\\\\r\\\\n\\\\r\\\\n#### `analyze_asset_mindshare`\\\\r\\\\n\\\\r\\\\n- **Purpose**: Retrieves **mindshare data** for a specific cryptocurrency asset (e.g., `official-trump` for $TRUMP, `mantra-dao` for $OM).\\\\r\\\\n- **Processes**:\\\\r\\\\n  - Detects **anomalies** in asset mindshare scores using **z-scores** (default threshold: `2.0`).\\\\r\\\\n  - **Plots** scores over time with anomalies **highlighted in orange**.\\\\r\\\\n  - Provides concise insights about:\\\\r\\\\n    - **Mindshare trends**\\\\r\\\\n    - **Score and rank ranges**\\\\r\\\\n    - **Anomaly dates and scores**\\\\r\\\\n- **Display**: Designed to work **directly in Google Colab** for interactive visual exploration.\\\\r\\\\n- **Best For**: Analyzing market attention shifts for individual crypto assets.\\\\r\\\\n\\\\r\\\\n---\\\\r\\\\n\\\\r\\\\n## \\\\ud83d\\\\ude80 Running the MCP Server\\\\r\\\\n\\\\r\\\\nThe MCP Server provides a backend for broader mindshare comparison functionality.\\\\r\\\\n\\\\r\\\\n- Navigate to the server code: `server.py`\\\\r\\\\n- Ensure the Messari API key is configured correctly.\\\\r\\\\n\\\\r\\\\n---\\\\r\\\\n\\\\r\\\\n## API List\\\\r\\\\n\\\\r\\\\nThe following APIs are used in this project:\\\\r\\\\n\\\\r\\\\n- **Copilot Agent API**\\\\r\\\\n- **Current Topics API**\\\\r\\\\n- **X-Users Mindshare Over Time API**\\\\r\\\\n- **Mindshare of Asset Over Time API**\\\\r\\\\n- **Asset Details API**\\\\r\\\\n\\\\r\\\\n---\\\\r\\\\n\\\\r\\\\n## \\\\ud83d\\\\udd11 Key Features\\\\r\\\\n\\\\r\\\\n- **Mindshare Data Fetching**: Uses the Messari API to retrieve daily mindshare data for assets.\\\\r\\\\n- **Anomaly Detection**: Identifies significant spikes in mindshare scores using a z-score threshold (default: 2.0).\\\\r\\\\n- **Visualization**: Plots mindshare scores over time with anomalies highlighted in Google Colab.\\\\r\\\\n- **Insights**: Provides readable insights about trends, score ranges, rank ranges, and anomalies.\\\\r\\\\n- **Extensible**: Designed to work alongside KOL mindshare analysis (e.g., for Twitter handles) with potential for combined analysis.\\\\r\\\\n\\\\r\\\\n---\\\\r\\\\n\\\\r\\\\n## \\\\ud83d\\\\udcc2 Code Links in the repository\\\\r\\\\n\\\\r\\\\n- **Colab Notebook**: [LLM_Mindshare_asset_analysis.ipynb](https://github.com/N-45div/MessariMCP/blob/main/colab/LLM_Mindshare_asset_analysis.ipynb)\\\\r\\\\n- **MCP Server Code**: [server.py](https://github.com/N-45div/MessariMCP/blob/main/server.py)\\\\r\\\\n\\\\r\\\\n---\\\\r\\\\n\\\\r\\\\n## \\\\ud83d\\\\udcc4 License\\\\r\\\\n\\\\r\\\\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\\\\r\\\\n\\\\r\\\\n---\\\\r\\\\n\\\\r\\\\n## Acknowledgments\\\\r\\\\n\\\\r\\\\n- **Messari**: For providing the API.\\\\r\\\\n- **Google Colab**: For enabling interactive visualization.\\\\r\\\\n- **Mistral AI**: For optional sentiment integration.\\\\r\\\\n\\\", \\\"tools\\\": [{\\\"name\\\": \\\"call_mistral\\\", \\\"description\\\": \\\"- **Purpose**: Interacts with the Mistral API to perform **sentiment analysis** on text data (e.g., summaries of trending topics).\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"message\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Text content or message\\\"}}, \\\"required\\\": [\\\"message\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"positive\\\", \\\"description\\\": \\\", `negative`, or `neutral`) and an insight into how the topic may influence crypto market attention.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for positive\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_trending_details\\\", \\\"description\\\": \\\"- **Purpose**: Fetches **trending topics** from the Messari API within a given date range and topic classes (e.g., `\\\\\\\"Macro Commentary, Project Announcements, Legal and Regulatory\\\\\\\"`).\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for get_trending_details\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"analyze_mindshare_data\\\", \\\"description\\\": \\\"- **Purpose**: Retrieves **mindshare data** for a specific Twitter handle (e.g., `@AltcoinGordon`) from the Messari API.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for analyze_mindshare_data\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"analyze_asset_mindshare\\\", \\\"description\\\": \\\"- **Purpose**: Retrieves **mindshare data** for a specific cryptocurrency asset (e.g., `official-trump` for $TRUMP, `mantra-dao` for $OM).\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for analyze_asset_mindshare\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"write\\\"}], \\\"tools_count\\\": 5, \\\"homepage\\\": \\\"\\\", \\\"url\\\": \\\"https://github.com/N-45div/MessariMCP\\\", \\\"topics\\\": [], \\\"data_sources\\\": [\\\"github\\\"]}\", \"stage1_analysis\": {\"server_name\": \"MessariMCP\", \"server_id\": \"n-45div/messarimcp\", \"is_finance_llm\": \"yes\", \"confidence\": \"high\", \"threat_models\": [], \"analysis_notes\": \"Cryptocurrency analysis server using Messari API for crypto asset mindshare tracking, market attention analysis, and trading sentiment insights\"}, \"identified_threat_models\": [], \"stage1_confidence\": \"high\", \"stage1_notes\": \"Cryptocurrency analysis server using Messari API for crypto asset mindshare tracking, market attention analysis, and trading sentiment insights\"}", "target": "", "id": "fbSBErYqA9hroiBKoKo3My", "metadata": {"stage": "consequentiality_assessment"}}
{"input": "{\"raw_input\": \"ONLY RESPOND WITH JSON. NO EXPLANATIONS. NO MARKDOWN. NO TEXT OUTSIDE JSON.\\n\\nAnalyze the MCP server for financial relevance. Look for keywords: payment, banking, credit, loan, finance, money, currency, crypto, investment, trading, portfolio, market, exchange, wallet, account, budget, expense, income, tax, invoice, billing, accounting, insurance, compliance, KYC, AML.\\n\\nJSON FORMAT (NOTHING ELSE):\\n{\\n  \\\"server_name\\\": \\\"string\\\",\\n  \\\"server_id\\\": \\\"string\\\", \\n  \\\"is_finance_llm\\\": \\\"yes|no|unclear\\\",\\n  \\\"confidence\\\": \\\"high|medium|low\\\",\\n  \\\"threat_models\\\": [],\\n  \\\"analysis_notes\\\": \\\"Brief reason\\\"\\n}\\n\\nIf financial keywords found: is_finance_llm=\\\"yes\\\". If not: is_finance_llm=\\\"no\\\". If unclear: is_finance_llm=\\\"unclear\\\".\\n\\nRESPOND ONLY WITH JSON.\\n\\nMCP Server Data:\\n{\\\"server_name\\\": \\\"neo-n3-mcp\\\", \\\"server_id\\\": \\\"r3e-network/neo-n3-mcp\\\", \\\"description\\\": \\\"An MCP server for interacting with the Neo N3 blockchain.\\\", \\\"readme\\\": \\\"# Neo N3 MCP Server\\\\n\\\\n**MCP Server for Neo N3 Blockchain Integration** | Version 1.5.0\\\\n\\\\n[![MCP SDK](https://img.shields.io/badge/MCP%20SDK-1.9.0-blue)](https://github.com/modelcontextprotocol/typescript-sdk)\\\\n[![Neo N3](https://img.shields.io/badge/Neo%20N3-Compatible-green)](https://neo.org/)\\\\n[![NPM](https://img.shields.io/badge/NPM-@r3e/neo--n3--mcp-red)](https://www.npmjs.com/package/@r3e/neo-n3-mcp)\\\\n\\\\nA production-ready MCP server providing Neo N3 blockchain integration with 34 tools and 9 resources for wallet management, asset transfers, contract interactions, and blockchain queries.\\\\n\\\\n## \\\\ud83d\\\\ude80 Quick Start\\\\n\\\\n### Install from NPM\\\\n```bash\\\\n# Install globally\\\\nnpm install -g @r3e/neo-n3-mcp\\\\n\\\\n# Or install locally\\\\nnpm install @r3e/neo-n3-mcp\\\\n```\\\\n\\\\n### Basic Usage\\\\n```bash\\\\n# Run with default configuration\\\\nnpx @r3e/neo-n3-mcp\\\\n\\\\n# Or if installed globally\\\\nneo-n3-mcp\\\\n```\\\\n\\\\n## \\\\u2699\\\\ufe0f Configuration\\\\n\\\\n### 1. Command Line Configuration\\\\n\\\\n```bash\\\\n# Specify network\\\\nneo-n3-mcp --network testnet\\\\n\\\\n# Custom RPC endpoints\\\\nneo-n3-mcp --mainnet-rpc https://mainnet1.neo.coz.io:443 --testnet-rpc https://testnet1.neo.coz.io:443\\\\n\\\\n# Enable logging\\\\nneo-n3-mcp --log-level info --log-file ./neo-mcp.log\\\\n\\\\n# Complete example\\\\nneo-n3-mcp \\\\\\\\\\\\n  --network mainnet \\\\\\\\\\\\n  --mainnet-rpc https://mainnet1.neo.coz.io:443 \\\\\\\\\\\\n  --testnet-rpc https://testnet1.neo.coz.io:443 \\\\\\\\\\\\n  --log-level debug \\\\\\\\\\\\n  --log-file ./logs/neo-mcp.log\\\\n```\\\\n\\\\n### 2. JSON Configuration\\\\n\\\\nCreate a `neo-mcp-config.json` file:\\\\n\\\\n```json\\\\n{\\\\n  \\\\\\\"network\\\\\\\": \\\\\\\"mainnet\\\\\\\",\\\\n  \\\\\\\"rpc\\\\\\\": {\\\\n    \\\\\\\"mainnet\\\\\\\": \\\\\\\"https://mainnet1.neo.coz.io:443\\\\\\\",\\\\n    \\\\\\\"testnet\\\\\\\": \\\\\\\"https://testnet1.neo.coz.io:443\\\\\\\"\\\\n  },\\\\n  \\\\\\\"logging\\\\\\\": {\\\\n    \\\\\\\"level\\\\\\\": \\\\\\\"info\\\\\\\",\\\\n    \\\\\\\"file\\\\\\\": \\\\\\\"./logs/neo-mcp.log\\\\\\\",\\\\n    \\\\\\\"console\\\\\\\": true\\\\n  },\\\\n  \\\\\\\"server\\\\\\\": {\\\\n    \\\\\\\"name\\\\\\\": \\\\\\\"neo-n3-mcp-server\\\\\\\",\\\\n    \\\\\\\"version\\\\\\\": \\\\\\\"1.5.0\\\\\\\"\\\\n  },\\\\n  \\\\\\\"wallets\\\\\\\": {\\\\n    \\\\\\\"directory\\\\\\\": \\\\\\\"./wallets\\\\\\\"\\\\n  }\\\\n}\\\\n```\\\\n\\\\nRun with config file:\\\\n```bash\\\\nneo-n3-mcp --config ./neo-mcp-config.json\\\\n```\\\\n\\\\n### 3. Docker Configuration\\\\n\\\\n#### Using Docker Hub Image\\\\n```bash\\\\n# Basic run\\\\ndocker run -p 3000:3000 r3e/neo-n3-mcp:1.5.0\\\\n\\\\n# With environment variables\\\\ndocker run -p 3000:3000 \\\\\\\\\\\\n  -e NEO_NETWORK=mainnet \\\\\\\\\\\\n  -e NEO_MAINNET_RPC=https://mainnet1.neo.coz.io:443 \\\\\\\\\\\\n  -e NEO_TESTNET_RPC=https://testnet1.neo.coz.io:443 \\\\\\\\\\\\n  -e LOG_LEVEL=info \\\\\\\\\\\\n  r3e/neo-n3-mcp:1.5.0\\\\n\\\\n# With volume for persistent data\\\\ndocker run -p 3000:3000 \\\\\\\\\\\\n  -v $(pwd)/wallets:/app/wallets \\\\\\\\\\\\n  -v $(pwd)/logs:/app/logs \\\\\\\\\\\\n  -e NEO_NETWORK=testnet \\\\\\\\\\\\n  r3e/neo-n3-mcp:1.5.0\\\\n```\\\\n\\\\n#### Docker Compose\\\\nCreate a `docker-compose.yml`:\\\\n\\\\n```yaml\\\\nversion: '3.8'\\\\nservices:\\\\n  neo-mcp:\\\\n    image: r3e/neo-n3-mcp:1.5.0\\\\n    ports:\\\\n      - \\\\\\\"3000:3000\\\\\\\"\\\\n    environment:\\\\n      - NEO_NETWORK=mainnet\\\\n      - NEO_MAINNET_RPC=https://mainnet1.neo.coz.io:443\\\\n      - NEO_TESTNET_RPC=https://testnet1.neo.coz.io:443\\\\n      - LOG_LEVEL=info\\\\n      - LOG_FILE=/app/logs/neo-mcp.log\\\\n    volumes:\\\\n      - ./wallets:/app/wallets\\\\n      - ./logs:/app/logs\\\\n      - ./config:/app/config\\\\n    restart: unless-stopped\\\\n```\\\\n\\\\nRun with:\\\\n```bash\\\\ndocker-compose up -d\\\\n```\\\\n\\\\n#### Custom Dockerfile\\\\n```dockerfile\\\\nFROM node:18-alpine\\\\n\\\\nWORKDIR /app\\\\nCOPY package*.json ./\\\\nRUN npm ci --only=production\\\\n\\\\nCOPY dist/ ./dist/\\\\nCOPY config/ ./config/\\\\n\\\\n# Create necessary directories\\\\nRUN mkdir -p wallets logs\\\\n\\\\nEXPOSE 3000\\\\n\\\\nCMD [\\\\\\\"node\\\\\\\", \\\\\\\"dist/index.js\\\\\\\"]\\\\n```\\\\n\\\\n## \\\\ud83d\\\\udd27 Configuration Options\\\\n\\\\n### Environment Variables\\\\n| Variable | Description | Default |\\\\n|----------|-------------|---------|\\\\n| `NEO_NETWORK` | Default network (mainnet/testnet) | `testnet` |\\\\n| `NEO_MAINNET_RPC` | Mainnet RPC endpoint | `https://mainnet1.neo.coz.io:443` |\\\\n| `NEO_TESTNET_RPC` | Testnet RPC endpoint | `https://testnet1.neo.coz.io:443` |\\\\n| `LOG_LEVEL` | Logging level (debug/info/warn/error) | `info` |\\\\n| `LOG_FILE` | Log file path | `./logs/neo-mcp.log` |\\\\n| `WALLET_DIR` | Wallet storage directory | `./wallets` |\\\\n\\\\n### Command Line Options\\\\n| Option | Description |\\\\n|--------|-------------|\\\\n| `--network` | Set default network |\\\\n| `--mainnet-rpc` | Mainnet RPC URL |\\\\n| `--testnet-rpc` | Testnet RPC URL |\\\\n| `--log-level` | Set logging level |\\\\n| `--log-file` | Set log file path |\\\\n| `--config` | Load configuration from JSON file |\\\\n| `--help` | Show help information |\\\\n\\\\n## \\\\ud83d\\\\udee0\\\\ufe0f MCP Client Integration\\\\n\\\\n### Claude Desktop\\\\nAdd to your Claude Desktop config (`~/.cursor/mcp.json` or similar):\\\\n\\\\n```json\\\\n{\\\\n  \\\\\\\"mcpServers\\\\\\\": {\\\\n    \\\\\\\"neo-n3\\\\\\\": {\\\\n      \\\\\\\"command\\\\\\\": \\\\\\\"npx\\\\\\\",\\\\n      \\\\\\\"args\\\\\\\": [\\\\n        \\\\\\\"-y\\\\\\\",\\\\n        \\\\\\\"@r3e/neo-n3-mcp\\\\\\\",\\\\n        \\\\\\\"--network\\\\\\\",\\\\n        \\\\\\\"testnet\\\\\\\"\\\\n      ],\\\\n      \\\\\\\"disabled\\\\\\\": false,\\\\n      \\\\\\\"env\\\\\\\": {\\\\n        \\\\\\\"NEO_NETWORK\\\\\\\": \\\\\\\"testnet\\\\\\\",\\\\n        \\\\\\\"LOG_LEVEL\\\\\\\": \\\\\\\"info\\\\\\\"\\\\n      }\\\\n    }\\\\n  }\\\\n}\\\\n```\\\\n\\\\nFor mainnet configuration:\\\\n```json\\\\n{\\\\n  \\\\\\\"mcpServers\\\\\\\": {\\\\n    \\\\\\\"neo-n3\\\\\\\": {\\\\n      \\\\\\\"command\\\\\\\": \\\\\\\"npx\\\\\\\",\\\\n      \\\\\\\"args\\\\\\\": [\\\\n        \\\\\\\"-y\\\\\\\",\\\\n        \\\\\\\"@r3e/neo-n3-mcp\\\\\\\",\\\\n        \\\\\\\"--network\\\\\\\",\\\\n        \\\\\\\"mainnet\\\\\\\"\\\\n      ],\\\\n      \\\\\\\"disabled\\\\\\\": false,\\\\n      \\\\\\\"env\\\\\\\": {\\\\n        \\\\\\\"NEO_NETWORK\\\\\\\": \\\\\\\"mainnet\\\\\\\",\\\\n        \\\\\\\"NEO_MAINNET_RPC\\\\\\\": \\\\\\\"https://mainnet1.neo.coz.io:443\\\\\\\",\\\\n        \\\\\\\"NEO_TESTNET_RPC\\\\\\\": \\\\\\\"https://testnet1.neo.coz.io:443\\\\\\\",\\\\n        \\\\\\\"LOG_LEVEL\\\\\\\": \\\\\\\"inf\\\\n[...truncated for length...]\\\", \\\"tools\\\": [{\\\"name\\\": \\\"NEO_NETWORK\\\", \\\"description\\\": \\\"| Default network (mainnet/testnet) | `testnet` |\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for NEO_NETWORK\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"NEO_MAINNET_RPC\\\", \\\"description\\\": \\\"| Mainnet RPC endpoint | `https://mainnet1.neo.coz.io:443` |\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for NEO_MAINNET_RPC\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"NEO_TESTNET_RPC\\\", \\\"description\\\": \\\"| Testnet RPC endpoint | `https://testnet1.neo.coz.io:443` |\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for NEO_TESTNET_RPC\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"LOG_LEVEL\\\", \\\"description\\\": \\\"| Logging level (debug/info/warn/error) | `info` |\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for LOG_LEVEL\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"LOG_FILE\\\", \\\"description\\\": \\\"| Log file path | `./logs/neo-mcp.log` |\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"file_path\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"File path or file to process\\\"}}, \\\"required\\\": [\\\"file_path\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"WALLET_DIR\\\", \\\"description\\\": \\\"| Wallet storage directory | `./wallets` |\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for WALLET_DIR\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_network_mode\\\", \\\"description\\\": \\\", `set_network_mode`\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for get_network_mode\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"get_blockchain_info\\\", \\\"description\\\": \\\", `get_block_count`, `get_block`, `get_transaction`\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for get_blockchain_info\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"create_wallet\\\", \\\"description\\\": \\\", `import_wallet`\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for create_wallet\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"get_balance\\\", \\\"description\\\": \\\", `transfer_assets`, `estimate_transfer_fees`\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for get_balance\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"invoke_contract\\\", \\\"description\\\": \\\", `list_famous_contracts`, `get_contract_info`\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for invoke_contract\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"claim_gas\\\", \\\"description\\\": \\\", `estimate_invoke_fees`\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for claim_gas\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}], \\\"tools_count\\\": 12, \\\"homepage\\\": \\\"https://neomcp.xyz\\\", \\\"url\\\": \\\"https://github.com/r3e-network/neo-n3-mcp\\\", \\\"topics\\\": [], \\\"data_sources\\\": [\\\"github\\\"]}\", \"stage1_analysis\": {\"server_name\": \"neo-n3-mcp\", \"server_id\": \"r3e-network/neo-n3-mcp\", \"is_finance_llm\": \"yes\", \"confidence\": \"high\", \"threat_models\": [], \"analysis_notes\": \"Blockchain/crypto server with wallet management, asset transfers, balance checking, and GAS claiming capabilities\"}, \"identified_threat_models\": [], \"stage1_confidence\": \"high\", \"stage1_notes\": \"Blockchain/crypto server with wallet management, asset transfers, balance checking, and GAS claiming capabilities\"}", "target": "", "id": "aeJsgWeHRWxdRn3E8kQFxM", "metadata": {"stage": "consequentiality_assessment"}}
{"input": "{\"raw_input\": \"ONLY RESPOND WITH JSON. NO EXPLANATIONS. NO MARKDOWN. NO TEXT OUTSIDE JSON.\\n\\nAnalyze the MCP server for financial relevance. Look for keywords: payment, banking, credit, loan, finance, money, currency, crypto, investment, trading, portfolio, market, exchange, wallet, account, budget, expense, income, tax, invoice, billing, accounting, insurance, compliance, KYC, AML.\\n\\nJSON FORMAT (NOTHING ELSE):\\n{\\n  \\\"server_name\\\": \\\"string\\\",\\n  \\\"server_id\\\": \\\"string\\\", \\n  \\\"is_finance_llm\\\": \\\"yes|no|unclear\\\",\\n  \\\"confidence\\\": \\\"high|medium|low\\\",\\n  \\\"threat_models\\\": [],\\n  \\\"analysis_notes\\\": \\\"Brief reason\\\"\\n}\\n\\nIf financial keywords found: is_finance_llm=\\\"yes\\\". If not: is_finance_llm=\\\"no\\\". If unclear: is_finance_llm=\\\"unclear\\\".\\n\\nRESPOND ONLY WITH JSON.\\n\\nMCP Server Data:\\n{\\\"server_name\\\": \\\"mcp-web3-stats\\\", \\\"server_id\\\": \\\"crazyrabbitltc/mcp-web3-stats\\\", \\\"description\\\": \\\"A high-performance MCP server providing blockchain wallet analysis and token data via the Dune API for AI assistants and MCP clients.\\\", \\\"readme\\\": \\\"\\\\n![ChatGPT Image May 23, 2025, 10_25_41 AM](https://github.com/user-attachments/assets/fe40d718-d1d8-44e9-a8a4-a5ad39153218)\\\\n\\\\n# Dune API MCP Server\\\\n\\\\nThis project implements a Model Context Protocol (MCP) server that exposes functionality from the Dune API, allowing LLM agents and other MCP clients to analyze blockchain information.\\\\n\\\\n## Features\\\\n\\\\nThe server provides the following MCP tools and resources based on the Dune API:\\\\n\\\\n**EVM Tools:**\\\\n*   `get_evm_balances`: Fetches EVM token balances for a wallet.\\\\n*   `get_evm_activity`: Fetches EVM account activity.\\\\n*   `get_evm_collectibles`: Fetches EVM NFT collectibles.\\\\n*   `get_evm_transactions`: Retrieves granular EVM transaction details.\\\\n*   `get_evm_token_info`: Fetches metadata and price for EVM tokens.\\\\n*   `get_evm_token_holders`: Discovers EVM token holder distributions.\\\\n\\\\n**SVM Tools:**\\\\n*   `get_svm_balances`: Fetches SVM token balances.\\\\n*   `get_svm_transactions`: Fetches SVM transactions (Solana only).\\\\n\\\\n**Resources:**\\\\n*   `dune://evm/supported-chains`: Provides a list of EVM chains supported by the Dune API.\\\\n\\\\n**Prompts:**\\\\n*   `/evm_wallet_overview {walletAddress}`: Get a quick overview of an EVM wallet.\\\\n*   `/analyze_erc20_token {chainId} {tokenAddress}`: Analyze a specific ERC20 token.\\\\n*   `/svm_address_check {walletAddress}`: Check basic information for an SVM address.\\\\n\\\\n## Quick Start\\\\n\\\\n```bash\\\\n# Clone the repository\\\\ngit clone https://github.com/crazyrabbitLTC/mcp-web3-stats.git\\\\ncd mcp-web3-stats\\\\n\\\\n# Install dependencies\\\\nbun install\\\\n\\\\n# Create .env file with your Dune API key\\\\necho \\\\\\\"DUNE_API_KEY=your_actual_dune_api_key_here\\\\\\\" > .env\\\\n\\\\n# Start the server\\\\nbun start\\\\n\\\\n# In a separate terminal, run the MCP Inspector to test the tools\\\\nnpx @modelcontextprotocol/inspector bun run index.ts\\\\n```\\\\n\\\\n## Installation from npm\\\\n\\\\nYou can install the Web3 Stats Server globally via npm:\\\\n\\\\n```bash\\\\n# Install globally\\\\nnpm install -g mcp-web3-stats\\\\n\\\\n# Set your Dune API key as an environment variable\\\\nexport DUNE_API_KEY=your_actual_dune_api_key_here\\\\n\\\\n# Run the server\\\\nmcp-web3-stats\\\\n\\\\n# In a separate terminal, test with the MCP Inspector\\\\nnpx @modelcontextprotocol/inspector mcp-web3-stats\\\\n```\\\\n\\\\nAlternatively, you can run it directly with npx:\\\\n\\\\n```bash\\\\n# Set your Dune API key as an environment variable\\\\nexport DUNE_API_KEY=your_actual_dune_api_key_here\\\\n\\\\n# Run the server with npx\\\\nnpx mcp-web3-stats\\\\n\\\\n# In a separate terminal, test with the MCP Inspector\\\\nnpx @modelcontextprotocol/inspector npx mcp-web3-stats\\\\n```\\\\n\\\\n## What You Can Do With This\\\\n\\\\nThis MCP server allows you and your AI assistant to analyze blockchain data and wallet information directly. Here are some example use cases:\\\\n\\\\n### 1. Check Wallet Balances\\\\n\\\\nYou can quickly view all tokens (including ERC20s and NFTs) held by any wallet address:\\\\n\\\\n```\\\\nAssistant: Let me check the balances in this wallet for you.\\\\n\\\\n[Uses get_evm_balances with walletAddress=0xYourWalletAddress]\\\\n\\\\nThis wallet contains:\\\\n- 1.25 ETH (~$3,800)\\\\n- 500 USDC ($500)\\\\n- Several NFTs including a CryptoPunk and two Bored Apes\\\\n```\\\\n\\\\n### 2. Analyze Token Information and Holders\\\\n\\\\nYou can research specific tokens and their distribution:\\\\n\\\\n```\\\\nAssistant: Let me analyze this token for you.\\\\n\\\\n[Uses get_evm_token_info with chainId=1 and tokenAddress=0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984]\\\\n\\\\nUNI Token Information:\\\\n- Current price: $5.32\\\\n- Market cap: $2.7B \\\\n- 24h trading volume: $89M\\\\n\\\\n[Uses get_evm_token_holders with chainId=1 and tokenAddress=0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984]\\\\n\\\\nTop UNI Token Holders:\\\\n1. 0x47173B170C64d16393a52e6C480b3Ad8c302ba1e: 5.2% of supply\\\\n2. 0x1a9C8182C09F50C8318d769245beA52c32BE35BC: 3.8% of supply\\\\n...\\\\n```\\\\n\\\\n### 3. Review Recent Transactions\\\\n\\\\nYou can analyze transaction history for any address:\\\\n\\\\n```\\\\nAssistant: Here's a summary of recent transactions.\\\\n\\\\n[Uses get_evm_transactions with walletAddress=0xYourWalletAddress]\\\\n\\\\nRecent activity:\\\\n- Yesterday: Swapped 2 ETH for 3,500 UNI on Uniswap\\\\n- 3 days ago: Withdrew 5 ETH from Binance\\\\n- Last week: Minted an NFT for 0.08 ETH\\\\n```\\\\n\\\\n### 4. Check Solana Balances\\\\n\\\\nYou can also analyze Solana wallets:\\\\n\\\\n```\\\\nAssistant: Let me check your Solana wallet balances.\\\\n\\\\n[Uses get_svm_balances with walletAddress=YourSolanaAddress]\\\\n\\\\nThis wallet contains:\\\\n- 12.5 SOL (~$875)\\\\n- 2,500 USDC ($2,500)\\\\n- Several SPL tokens including 150 BONK\\\\n```\\\\n\\\\nConfigure this server with Claude Desktop or other MCP clients to enable your AI assistant to retrieve and analyze on-chain data in real time.\\\\n\\\\n## Prerequisites\\\\n\\\\n*   [Bun](https://bun.sh/) (latest version recommended)\\\\n*   A Dune API Key from [Sim API](https://docs.sim.dune.com/)\\\\n\\\\n## Setup\\\\n\\\\n1.  **Clone the repository (if applicable) or ensure you have the project files.**\\\\n\\\\n2.  **Install dependencies:**\\\\n    ```bash\\\\n    bun install\\\\n    ```\\\\n\\\\n3.  **Configure Environment Variables:**\\\\n    Create a `.env` file in the project root and add your Dune API key:\\\\n    ```env\\\\n    DUNE_API_KEY=your_actual_dune_api_key_here\\\\n    ```\\\\n    Replace `your_actual_dune_api_key_here` with your valid key.\\\\n\\\\n## Running the Se\\\\n[...truncated for length...]\\\", \\\"tools\\\": [{\\\"name\\\": \\\"get_evm_balances\\\", \\\"description\\\": \\\"Fetches EVM token balances for a wallet.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for get_evm_balances\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_evm_activity\\\", \\\"description\\\": \\\"Fetches EVM account activity.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for get_evm_activity\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_evm_collectibles\\\", \\\"description\\\": \\\"Fetches EVM NFT collectibles.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for get_evm_collectibles\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_evm_transactions\\\", \\\"description\\\": \\\"Retrieves granular EVM transaction details.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for get_evm_transactions\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_evm_token_info\\\", \\\"description\\\": \\\"Fetches metadata and price for EVM tokens.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"amount\\\": {\\\"type\\\": \\\"number\\\", \\\"description\\\": \\\"Numeric amount or value\\\"}}, \\\"required\\\": [\\\"amount\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_evm_token_holders\\\", \\\"description\\\": \\\"Discovers EVM token holder distributions.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for get_evm_token_holders\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_svm_balances\\\", \\\"description\\\": \\\"Fetches SVM token balances.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for get_svm_balances\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_svm_transactions\\\", \\\"description\\\": \\\"Fetches SVM transactions (Solana only).\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for get_svm_transactions\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"your_actual_dune_api_key_here\\\", \\\"description\\\": \\\"with your valid key.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for your_actual_dune_api_key_here\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"tsc\\\", \\\"description\\\": \\\"):\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for tsc\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"dune_api_server\\\", \\\"description\\\": \\\"or `web3_stats_server`) that makes sense to you.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for dune_api_server\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"env\\\", \\\"description\\\": \\\"block with your actual Dune API key. While the server script includes `dotenv` to load a local `.env` file, relying on the client (like Claude Desktop) to pass the environment variable via its configuration is more reliable for servers launched by external hosts.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"file_path\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"File path or file to process\\\"}}, \\\"required\\\": [\\\"file_path\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"execute\\\"}, {\\\"name\\\": \\\"command\\\", \\\"description\\\": \\\"might need to be the full, absolute path to your Bun executable (e.g., `~/.bun/bin/bun` on macOS/Linux, or the equivalent path on Windows) if it's not universally in the PATH for applications like Claude Desktop.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"file_path\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"File path or file to process\\\"}}, \\\"required\\\": [\\\"file_path\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}], \\\"tools_count\\\": 13, \\\"homepage\\\": \\\"\\\", \\\"url\\\": \\\"https://github.com/crazyrabbitLTC/mcp-web3-stats\\\", \\\"topics\\\": [], \\\"data_sources\\\": [\\\"github\\\"]}\", \"stage1_analysis\": {\"server_name\": \"mcp-web3-stats\", \"server_id\": \"crazyrabbitltc/mcp-web3-stats\", \"is_finance_llm\": \"yes\", \"confidence\": \"high\", \"threat_models\": [], \"analysis_notes\": \"Blockchain wallet analysis, token data, crypto balances, trading analysis, and market data via Dune API - clearly cryptocurrency and financial focused\"}, \"identified_threat_models\": [], \"stage1_confidence\": \"high\", \"stage1_notes\": \"Blockchain wallet analysis, token data, crypto balances, trading analysis, and market data via Dune API - clearly cryptocurrency and financial focused\"}", "target": "", "id": "9KPtVZB4c9M5wj9q7KXhmi", "metadata": {"stage": "consequentiality_assessment"}}
{"input": "{\"raw_input\": \"ONLY RESPOND WITH JSON. NO EXPLANATIONS. NO MARKDOWN. NO TEXT OUTSIDE JSON.\\n\\nAnalyze the MCP server for financial relevance. Look for keywords: payment, banking, credit, loan, finance, money, currency, crypto, investment, trading, portfolio, market, exchange, wallet, account, budget, expense, income, tax, invoice, billing, accounting, insurance, compliance, KYC, AML.\\n\\nJSON FORMAT (NOTHING ELSE):\\n{\\n  \\\"server_name\\\": \\\"string\\\",\\n  \\\"server_id\\\": \\\"string\\\", \\n  \\\"is_finance_llm\\\": \\\"yes|no|unclear\\\",\\n  \\\"confidence\\\": \\\"high|medium|low\\\",\\n  \\\"threat_models\\\": [],\\n  \\\"analysis_notes\\\": \\\"Brief reason\\\"\\n}\\n\\nIf financial keywords found: is_finance_llm=\\\"yes\\\". If not: is_finance_llm=\\\"no\\\". If unclear: is_finance_llm=\\\"unclear\\\".\\n\\nRESPOND ONLY WITH JSON.\\n\\nMCP Server Data:\\n{\\\"server_name\\\": \\\"A2A-MCP-Server\\\", \\\"server_id\\\": \\\"gongrzhe/a2a-mcp-server\\\", \\\"description\\\": \\\"An MCP server that bridges the Model Context Protocol (MCP) with the Agent-to-Agent (A2A) protocol, enabling MCP-compatible AI assistants (like Claude) to seamlessly interact with A2A agents.\\\", \\\"readme\\\": \\\"# A2A MCP Server\\\\n\\\\n[![License](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\\\\n![](https://badge.mcpx.dev?type=server 'MCP Server')\\\\n[![smithery badge](https://smithery.ai/badge/@GongRzhe/A2A-MCP-Server)](https://smithery.ai/server/@GongRzhe/A2A-MCP-Server)\\\\n\\\\nA mcp server that bridges the Model Context Protocol (MCP) with the Agent-to-Agent (A2A) protocol, enabling MCP-compatible AI assistants (like Claude) to seamlessly interact with A2A agents.\\\\n\\\\n## Overview\\\\n\\\\nThis project serves as an integration layer between two cutting-edge AI agent protocols:\\\\n\\\\n- **Model Context Protocol (MCP)**: Developed by Anthropic, MCP allows AI assistants to connect to external tools and data sources. It standardizes how AI applications and large language models connect to external resources in a secure, composable way.\\\\n\\\\n- **Agent-to-Agent Protocol (A2A)**: Developed by Google, A2A enables communication and interoperability between different AI agents through a standardized JSON-RPC interface.\\\\n\\\\nBy bridging these protocols, this server allows MCP clients (like Claude) to discover, register, communicate with, and manage tasks on A2A agents through a unified interface.\\\\n\\\\n### Demo\\\\n\\\\n#### 1, Run The Currency Agent in A2A Sample\\\\n\\\\n![agent](public/agent.png)\\\\n\\\\n`also support cloud deployed Agent`\\\\n\\\\n![cloudAgent](https://github.com/user-attachments/assets/481cbf01-95a0-4b0a-9ac5-898aef66a944)\\\\n\\\\n\\\\n#### 2, Use Claude to Register the Currency Agent \\\\n\\\\n![register](public/register.png)\\\\n\\\\n#### 3, Use Claude to Send a task to the Currency Agent and get the result \\\\n\\\\n![task](public/task.png)\\\\n\\\\n## Features\\\\n\\\\n- **Agent Management**\\\\n  - Register A2A agents with the bridge server\\\\n  - List all registered agents\\\\n  - Unregister agents when no longer needed\\\\n\\\\n- **Communication**\\\\n  - Send messages to A2A agents and receive responses\\\\n  - Stream responses from A2A agents in real-time\\\\n\\\\n- **Task Management**\\\\n  - Track which A2A agent handles which task\\\\n  - Retrieve task results using task IDs\\\\n  - Cancel running tasks\\\\n\\\\n- **Transport Support**\\\\n  - Multiple transport types: stdio, streamable-http, SSE\\\\n  - Configure transport type using MCP_TRANSPORT environment variable\\\\n\\\\n## Installation\\\\n\\\\n### Installing via Smithery\\\\n\\\\nTo install A2A Bridge Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@GongRzhe/A2A-MCP-Server):\\\\n\\\\n```bash\\\\nnpx -y @smithery/cli install @GongRzhe/A2A-MCP-Server --client claude\\\\n```\\\\n\\\\n### Option 1: Install from PyPI\\\\n\\\\n```bash\\\\npip install a2a-mcp-server\\\\n```\\\\n\\\\n### Option 2: Local Installation\\\\n\\\\n1. Clone the repository:\\\\n   ```bash\\\\n   git clone https://github.com/GongRzhe/A2A-MCP-Server.git\\\\n   cd A2A-MCP-Server\\\\n   ```\\\\n\\\\n2. Set up a virtual environment:\\\\n   ```bash\\\\n   python -m venv .venv\\\\n   source .venv/bin/activate  # On Windows: .venv\\\\\\\\Scripts\\\\\\\\activate\\\\n   ```\\\\n\\\\n3. Install dependencies:\\\\n   ```bash\\\\n   pip install -r requirements.txt\\\\n   ```\\\\n\\\\n## Configuration\\\\n\\\\n### Environment Variables\\\\n\\\\nConfigure how the MCP server runs using these environment variables:\\\\n\\\\n```bash\\\\n# Transport type: stdio, streamable-http, or sse\\\\nexport MCP_TRANSPORT=\\\\\\\"streamable-http\\\\\\\"\\\\n\\\\n# Host for the MCP server\\\\nexport MCP_HOST=\\\\\\\"0.0.0.0\\\\\\\"\\\\n\\\\n# Port for the MCP server (when using HTTP transports)\\\\nexport MCP_PORT=\\\\\\\"8000\\\\\\\"\\\\n\\\\n# Path for the MCP server endpoint (when using HTTP transports)\\\\nexport MCP_PATH=\\\\\\\"/mcp\\\\\\\"\\\\n\\\\n# Path for SSE endpoint (when using SSE transport)\\\\nexport MCP_SSE_PATH=\\\\\\\"/sse\\\\\\\"\\\\n\\\\n# Enable debug logging\\\\nexport MCP_DEBUG=\\\\\\\"true\\\\\\\"\\\\n```\\\\n\\\\n### Transport Types\\\\n\\\\nThe A2A MCP Server supports multiple transport types:\\\\n\\\\n1. **stdio** (default): Uses standard input/output for communication\\\\n   - Ideal for command-line usage and testing\\\\n   - No HTTP server is started\\\\n   - Required for Claude Desktop\\\\n\\\\n2. **streamable-http** (recommended for web clients): HTTP transport with streaming support\\\\n   - Recommended for production deployments\\\\n   - Starts an HTTP server to handle MCP requests\\\\n   - Enables streaming of large responses\\\\n\\\\n3. **sse**: Server-Sent Events transport\\\\n   - Provides real-time event streaming\\\\n   - Useful for real-time updates\\\\n\\\\nTo specify the transport type:\\\\n\\\\n```bash\\\\n# Using environment variable\\\\nexport MCP_TRANSPORT=\\\\\\\"streamable-http\\\\\\\"\\\\nuvx a2a-mcp-server\\\\n\\\\n# Or directly in the command\\\\nMCP_TRANSPORT=streamable-http uvx a2a-mcp-server\\\\n```\\\\n\\\\n## Running the Server\\\\n\\\\n### From Command Line\\\\n\\\\n```bash\\\\n# Using default settings (stdio transport)\\\\nuvx a2a-mcp-server\\\\n\\\\n# Using HTTP transport on specific host and port\\\\nMCP_TRANSPORT=streamable-http MCP_HOST=127.0.0.1 MCP_PORT=8080 uvx a2a-mcp-server\\\\n```\\\\n\\\\n## Configuring in Claude Desktop\\\\n\\\\nClaude Desktop allows you to configure MCP servers in the `claude_desktop_config.json` file. This file is typically located at:\\\\n\\\\n- **Windows**: `%APPDATA%\\\\\\\\Claude\\\\\\\\claude_desktop_config.json`\\\\n- **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\\\\n- **Linux**: `~/.config/Claude/claude_desktop_config.json`\\\\n\\\\n### Method 1: PyPI Installation (Recommended)\\\\n\\\\nAdd the following to the `mcpServers` section of your `\\\\n[...truncated for length...]\\\", \\\"tools\\\": [{\\\"name\\\": \\\"mcpServers\\\", \\\"description\\\": \\\"section of your `claude_desktop_config.json`:\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for mcpServers\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"task_id\\\", \\\"description\\\": \\\"2. Maps this ID to the agent's URL in the `task_agent_mapping` dictionary\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"url\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"URL or link to process\\\"}}, \\\"required\\\": [\\\"url\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"list_agents\\\", \\\"description\\\": \\\")\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for list_agents\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"MCP_TRANSPORT\\\", \\\"description\\\": \\\"is set to `\\\\\\\"stdio\\\\\\\"` in the `env` section\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for MCP_TRANSPORT\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"A2AServerTaskManager\\\", \\\"description\\\": \\\"class that extends `InMemoryTaskManager`. You can customize its behavior by modifying this class.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for A2AServerTaskManager\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"write\\\"}], \\\"tools_count\\\": 5, \\\"homepage\\\": \\\"\\\", \\\"url\\\": \\\"https://github.com/GongRzhe/A2A-MCP-Server\\\", \\\"topics\\\": [], \\\"data_sources\\\": [\\\"github\\\", \\\"official\\\"]}\", \"stage1_analysis\": {\"server_name\": \"A2A-MCP-Server\", \"server_id\": \"gongrzhe/a2a-mcp-server\", \"is_finance_llm\": \"yes\", \"confidence\": \"medium\", \"threat_models\": [], \"analysis_notes\": \"Demo shows Currency Agent usage, suggesting financial data handling capabilities\"}, \"identified_threat_models\": [], \"stage1_confidence\": \"medium\", \"stage1_notes\": \"Demo shows Currency Agent usage, suggesting financial data handling capabilities\"}", "target": "", "id": "7ZnnMHJNUCddsNTjZCFa45", "metadata": {"stage": "consequentiality_assessment"}}
{"input": "{\"raw_input\": \"ONLY RESPOND WITH JSON. NO EXPLANATIONS. NO MARKDOWN. NO TEXT OUTSIDE JSON.\\n\\nAnalyze the MCP server for financial relevance. Look for keywords: payment, banking, credit, loan, finance, money, currency, crypto, investment, trading, portfolio, market, exchange, wallet, account, budget, expense, income, tax, invoice, billing, accounting, insurance, compliance, KYC, AML.\\n\\nJSON FORMAT (NOTHING ELSE):\\n{\\n  \\\"server_name\\\": \\\"string\\\",\\n  \\\"server_id\\\": \\\"string\\\", \\n  \\\"is_finance_llm\\\": \\\"yes|no|unclear\\\",\\n  \\\"confidence\\\": \\\"high|medium|low\\\",\\n  \\\"threat_models\\\": [],\\n  \\\"analysis_notes\\\": \\\"Brief reason\\\"\\n}\\n\\nIf financial keywords found: is_finance_llm=\\\"yes\\\". If not: is_finance_llm=\\\"no\\\". If unclear: is_finance_llm=\\\"unclear\\\".\\n\\nRESPOND ONLY WITH JSON.\\n\\nMCP Server Data:\\n{\\\"server_name\\\": \\\"celo-mcp\\\", \\\"server_id\\\": \\\"celo-org/celo-mcp\\\", \\\"description\\\": \\\"MCP server that provides AI agents with access to Celo blockchain data and functionality\\\", \\\"readme\\\": \\\"# Celo MCP Server\\\\n\\\\nA Model Context Protocol (MCP) server for interacting with the Celo blockchain. This server provides comprehensive access to Celo blockchain data, token operations, NFT management, smart contract interactions, transaction handling, and governance operations.\\\\n\\\\n## Installation\\\\n\\\\n1. Clone the repository:\\\\n\\\\n```bash\\\\ngit clone https://github.com/celo-org/celo-mcp\\\\ncd celo-mcp\\\\n```\\\\n\\\\n2. Install dependencies:\\\\n\\\\n```bash\\\\npip install -e .\\\\n```\\\\n\\\\n3. Set up environment variables (optional):\\\\n\\\\n```bash\\\\nexport CELO_RPC_URL=\\\\\\\"https://forno.celo.org\\\\\\\"  # Default: Celo mainnet\\\\nexport CELO_TESTNET_RPC_URL=\\\\\\\"https://alfajores-forno.celo-testnet.org\\\\\\\"  # Alfajores testnet\\\\n```\\\\n\\\\n## MCP Integration\\\\n\\\\n### Cursor IDE Integration\\\\n\\\\nTo use this MCP server with Cursor IDE, add the following configuration to your MCP settings file (`~/.cursor/mcp.json`):\\\\n\\\\n```json\\\\n{\\\\n  \\\\\\\"mcpServers\\\\\\\": {\\\\n    \\\\\\\"celo-mcp\\\\\\\": {\\\\n      \\\\\\\"command\\\\\\\": \\\\\\\"uvx\\\\\\\",\\\\n      \\\\\\\"args\\\\\\\": [\\\\\\\"--refresh\\\\\\\", \\\\\\\"celo-mcp\\\\\\\"]\\\\n    }\\\\n  }\\\\n}\\\\n```\\\\n\\\\nThe `--refresh` flag ensures that the latest code is always loaded when the MCP server starts.\\\\n\\\\n### Claude Desktop Integration\\\\n\\\\nFor Claude Desktop, add this configuration to your MCP settings file (`~/Library/Application Support/Claude/claude_desktop_config.json` on macOS):\\\\n\\\\n```json\\\\n{\\\\n  \\\\\\\"mcpServers\\\\\\\": {\\\\n    \\\\\\\"celo-mcp\\\\\\\": {\\\\n      \\\\\\\"command\\\\\\\": \\\\\\\"uvx\\\\\\\",\\\\n      \\\\\\\"args\\\\\\\": [\\\\\\\"--refresh\\\\\\\", \\\\\\\"celo-mcp\\\\\\\"]\\\\n    }\\\\n  }\\\\n}\\\\n```\\\\n\\\\n## Usage\\\\n\\\\n### Running the Server\\\\n\\\\n```bash\\\\n# Run the MCP server\\\\npython -m celo_mcp.server\\\\n\\\\n# Or use the CLI entry point\\\\ncelo-mcp-server\\\\n```\\\\n\\\\n### Available Tools\\\\n\\\\n#### Blockchain Data Operations\\\\n\\\\n1. **get_network_status**\\\\n\\\\n   - Get current network status and connection information\\\\n   - No parameters required\\\\n\\\\n2. **get_block**\\\\n\\\\n   - Fetch block information by number, hash, or \\\\\\\"latest\\\\\\\"\\\\n   - Parameters: `block_identifier`, `include_transactions` (optional)\\\\n\\\\n3. **get_transaction**\\\\n\\\\n   - Get transaction details by hash\\\\n   - Parameters: `tx_hash`\\\\n\\\\n4. **get_account**\\\\n\\\\n   - Get account information including balance and nonce\\\\n   - Parameters: `address`\\\\n\\\\n5. **get_latest_blocks**\\\\n   - Get information about recent blocks\\\\n   - Parameters: `count` (optional, default: 10, max: 100)\\\\n\\\\n#### Token Operations\\\\n\\\\n6. **get_token_info**\\\\n\\\\n   - Get detailed token information (name, symbol, decimals, supply)\\\\n   - Parameters: `token_address`\\\\n\\\\n7. **get_token_balance**\\\\n\\\\n   - Get token balance for a specific address\\\\n   - Parameters: `token_address`, `address`\\\\n\\\\n8. **get_celo_balances**\\\\n   - Get CELO and stable token balances for an address\\\\n   - Parameters: `address`\\\\n\\\\n#### NFT Operations\\\\n\\\\n9. **get_nft_info**\\\\n\\\\n   - Get NFT information including metadata and collection details\\\\n   - Parameters: `contract_address`, `token_id`\\\\n\\\\n10. **get_nft_balance**\\\\n    - Get NFT balance for an address (supports ERC721 and ERC1155)\\\\n    - Parameters: `contract_address`, `address`, `token_id` (optional for ERC1155)\\\\n\\\\n#### Smart Contract Operations\\\\n\\\\n11. **call_contract_function**\\\\n\\\\n    - Call a read-only contract function\\\\n    - Parameters: `contract_address`, `function_name`, `abi`, `function_args` (optional), `from_address` (optional)\\\\n\\\\n12. **estimate_contract_gas**\\\\n    - Estimate gas for a contract function call\\\\n    - Parameters: `contract_address`, `function_name`, `abi`, `from_address`, `function_args` (optional), `value` (optional)\\\\n\\\\n#### Transaction Operations\\\\n\\\\n13. **estimate_transaction**\\\\n\\\\n    - Estimate gas and cost for a transaction\\\\n    - Parameters: `to`, `from_address`, `value` (optional), `data` (optional)\\\\n\\\\n14. **get_gas_fee_data**\\\\n    - Get current gas fee data including EIP-1559 fees\\\\n    - No parameters required\\\\n\\\\n#### Governance Operations\\\\n\\\\n15. **get_governance_proposals**\\\\n\\\\n    - Get Celo governance proposals with pagination support\\\\n    - Parameters: `include_inactive` (optional), `include_metadata` (optional), `page` (optional), `page_size` (optional), `offset` (optional), `limit` (optional)\\\\n\\\\n16. **get_proposal_details**\\\\n    - Get detailed information about a specific governance proposal including content and voting history\\\\n    - Parameters: `proposal_id`\\\\n\\\\n#### Staking Operations\\\\n\\\\n17. **get_staking_balances**\\\\n\\\\n    - Get staking balances for an address, including active and pending stakes broken down by validator group\\\\n    - Parameters: `address`\\\\n\\\\n18. **get_activatable_stakes**\\\\n\\\\n    - Get information about pending stakes that can be activated for earning rewards\\\\n    - Parameters: `address`\\\\n\\\\n19. **get_validator_groups**\\\\n\\\\n    - Get information about all validator groups, including their members, votes, capacity, and performance metrics\\\\n    - No parameters required\\\\n\\\\n20. **get_validator_group_details**\\\\n\\\\n    - Get detailed information about a specific validator group including its members and performance data\\\\n    - Parameters: `group_address`\\\\n\\\\n21. **get_total_staking_info**\\\\n    - Get network-wide staking information including total votes and participation metrics\\\\n    - No parameters required\\\\n\\\\n## Key Features\\\\n\\\\n### Token Support\\\\n\\\\n- **ERC20 Standard**: Full support for ERC20 tokens\\\\n- **Celo Stable Tokens**: Built-in su\\\\n[...truncated for length...]\\\", \\\"tools\\\": [{\\\"name\\\": \\\"block_identifier\\\", \\\"description\\\": \\\", `include_transactions` (optional)\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for block_identifier\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"tx_hash\\\", \\\"description\\\": \\\"4. **get_account**\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for tx_hash\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"address\\\", \\\"description\\\": \\\"5. **get_latest_blocks**\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for address\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"count\\\", \\\"description\\\": \\\"(optional, default: 10, max: 100)\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for count\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"token_address\\\", \\\"description\\\": \\\"7. **get_token_balance**\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for token_address\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"contract_address\\\", \\\"description\\\": \\\", `token_id`\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for contract_address\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"to\\\", \\\"description\\\": \\\", `from_address`, `value` (optional), `data` (optional)\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"amount\\\": {\\\"type\\\": \\\"number\\\", \\\"description\\\": \\\"Numeric amount or value\\\"}}, \\\"required\\\": [\\\"amount\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"include_inactive\\\", \\\"description\\\": \\\"(optional), `include_metadata` (optional), `page` (optional), `page_size` (optional), `offset` (optional), `limit` (optional)\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for include_inactive\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"proposal_id\\\", \\\"description\\\": \\\"#### Staking Operations\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for proposal_id\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"group_address\\\", \\\"description\\\": \\\"21. **get_total_staking_info**\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"input\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Input parameter for group_address\\\"}}, \\\"required\\\": [\\\"input\\\"]}, \\\"source\\\": \\\"readme\\\", \\\"access_level\\\": \\\"write\\\"}], \\\"tools_count\\\": 10, \\\"homepage\\\": \\\"\\\", \\\"url\\\": \\\"https://github.com/celo-org/celo-mcp\\\", \\\"topics\\\": [], \\\"data_sources\\\": [\\\"github\\\"]}\", \"stage1_analysis\": {\"server_name\": \"celo-mcp\", \"server_id\": \"celo-org/celo-mcp\", \"is_finance_llm\": \"yes\", \"confidence\": \"high\", \"threat_models\": [], \"analysis_notes\": \"Blockchain server with crypto, token, wallet operations, transaction handling, staking, and financial data access\"}, \"identified_threat_models\": [], \"stage1_confidence\": \"high\", \"stage1_notes\": \"Blockchain server with crypto, token, wallet operations, transaction handling, staking, and financial data access\"}", "target": "", "id": "S3MHPVLQ2mKo99AKbT54bG", "metadata": {"stage": "consequentiality_assessment"}}
{"input": "{\"raw_input\": \"ONLY RESPOND WITH JSON. NO EXPLANATIONS. NO MARKDOWN. NO TEXT OUTSIDE JSON.\\n\\nAnalyze the MCP server for financial relevance. Look for keywords: payment, banking, credit, loan, finance, money, currency, crypto, investment, trading, portfolio, market, exchange, wallet, account, budget, expense, income, tax, invoice, billing, accounting, insurance, compliance, KYC, AML.\\n\\nJSON FORMAT (NOTHING ELSE):\\n{\\n  \\\"server_name\\\": \\\"string\\\",\\n  \\\"server_id\\\": \\\"string\\\", \\n  \\\"is_finance_llm\\\": \\\"yes|no|unclear\\\",\\n  \\\"confidence\\\": \\\"high|medium|low\\\",\\n  \\\"threat_models\\\": [],\\n  \\\"analysis_notes\\\": \\\"Brief reason\\\"\\n}\\n\\nIf financial keywords found: is_finance_llm=\\\"yes\\\". If not: is_finance_llm=\\\"no\\\". If unclear: is_finance_llm=\\\"unclear\\\".\\n\\nRESPOND ONLY WITH JSON.\\n\\nMCP Server Data:\\n{\\\"server_name\\\": \\\"COTI Blockchain MCP Server\\\", \\\"server_id\\\": \\\"@davibauer/coti-mcp\\\", \\\"description\\\": \\\"This tool lets you play with the COTI blockchain right from your AI assistant.\\\", \\\"readme\\\": \\\"\\\", \\\"tools\\\": [{\\\"name\\\": \\\"change_default_account\\\", \\\"description\\\": \\\"Change the default account used for COTI blockchain operations. This allows switching between different accounts configured in the environment. The account must be configured in the environment variables with corresponding private and AES keys. Returns the new default account address upon successful change.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"account_address\\\"], \\\"properties\\\": {\\\"account_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"COTI account address to set as default, e.g., 0x0D7C5C1DA069fd7C1fAFBeb922482B2C7B15D273\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"create_account\\\", \\\"description\\\": \\\"Create a new COTI account with a randomly generated private key and AES key. Returns the new account address, private key, and AES key.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"set_as_default\\\": {\\\"type\\\": \\\"boolean\\\", \\\"description\\\": \\\"Optional, whether to set the new account as the default account. Default is false.\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"decrypt_value\\\", \\\"description\\\": \\\"Decrypt a value using the COTI AES key. Requires a ciphertext as input. Returns the decrypted value.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"ciphertext\\\"], \\\"properties\\\": {\\\"ciphertext\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Ciphertext to decrypt\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"encrypt_value\\\", \\\"description\\\": \\\"Encrypt a value using the COTI AES key. This is used for encrypting values to be sent to another address. Requires a value, contract address, and function selector as input. Returns the signature.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"message\\\", \\\"contract_address\\\", \\\"function_selector\\\"], \\\"properties\\\": {\\\"message\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Message to encrypt\\\"}, \\\"contract_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Contract address\\\"}, \\\"function_selector\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Function selector. To get the function selector, use the keccak256 hash of the function signature. For instance, for the transfer function of an ERC20 token, the function selector is '0xa9059cbb'.\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"export_accounts\\\", \\\"description\\\": \\\"Backup all available COTI accounts and export them as a JSON string for future import. Returns a JSON string that can be copied and used for importing later.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"account_addresses\\\": {\\\"type\\\": \\\"array\\\", \\\"items\\\": {\\\"type\\\": \\\"string\\\"}, \\\"description\\\": \\\"Optional list of account addresses to export. If not provided, all accounts will be exported.\\\"}, \\\"include_sensitive_data\\\": {\\\"type\\\": \\\"boolean\\\", \\\"description\\\": \\\"Whether to include sensitive data (private keys and AES keys) in the output. Default is true.\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"generate_aes_key\\\", \\\"description\\\": \\\"Generate a new AES key for the current account. Returns the AES key.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"account_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The address of the account to generate the AES key for.\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"import_accounts\\\", \\\"description\\\": \\\"Import COTI accounts from a JSON backup string previously created with the export_accounts tool.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"backup_data\\\"], \\\"properties\\\": {\\\"backup_data\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The JSON backup string containing the accounts to import. Example:\\\\n\\\\n{\\\\n    \\\\\\\"timestamp\\\\\\\": \\\\\\\"2025-06-03T17:18:55.123Z\\\\\\\",\\\\n    \\\\\\\"accounts\\\\\\\": [\\\\n        {\\\\n            \\\\\\\"address\\\\\\\": \\\\\\\"0x123...\\\\\\\",\\\\n            \\\\\\\"private_key\\\\\\\": \\\\\\\"0x456...\\\\\\\",\\\\n            \\\\\\\"aes_key\\\\\\\": \\\\\\\"0x789...\\\\\\\",\\\\n            \\\\\\\"is_default\\\\\\\": true\\\\n        },\\\\n        ...\\\\n    ]\\\\n}\\\\n\\\"}, \\\"merge_with_existing\\\": {\\\"type\\\": \\\"boolean\\\", \\\"description\\\": \\\"Whether to merge with existing accounts or replace them. Default is true (merge).\\\"}, \\\"set_default_account\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Optional address to set as the default account after import. If not provided, will use the default from the backup.\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"list_accounts\\\", \\\"description\\\": \\\"List all available COTI accounts configured in the environment. Returns the account addresses, current default account, and masked versions of the private and AES keys.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"sign_message\\\", \\\"description\\\": \\\"Sign a message using the COTI private key. This creates a cryptographic signature that proves the message was signed by the owner of the private key. Requires a message to sign as input. Returns the signature.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"message\\\"], \\\"properties\\\": {\\\"message\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Message to sign\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"verify_signature\\\", \\\"description\\\": \\\"Verify a message signature and recover the address that signed it. This is used to determine who signed a specific message. Requires the original message and the signature as input. Returns the address that created the signature.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"message\\\", \\\"signature\\\"], \\\"properties\\\": {\\\"message\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Original message that was signed\\\"}, \\\"signature\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Signature to verify (hexadecimal string)\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"approve_erc20_spender\\\", \\\"description\\\": \\\"Approve another address to spend tokens on behalf of the owner. This is used for allowing another address (like a contract) to transfer your tokens. Requires token contract address, spender address, and amount as input. Returns the transaction hash upon successful approval.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"token_address\\\", \\\"spender_address\\\", \\\"amount_wei\\\"], \\\"properties\\\": {\\\"gas_limit\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Optional gas limit for the transaction\\\"}, \\\"amount_wei\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Amount of tokens to approve (in Wei)\\\"}, \\\"token_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"ERC20 token contract address on COTI blockchain\\\"}, \\\"spender_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Address to approve as spender, e.g., 0x0D7C5C1DA069fd7C1fAFBeb922482B2C7B15D273\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"deploy_private_erc20_contract\\\", \\\"description\\\": \\\"Deploy a new standard private ERC20 token contract on the COTI blockchain. This creates a new private token with the specified name, symbol, and decimals. Returns the deployed contract address upon successful deployment.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"name\\\", \\\"symbol\\\", \\\"decimals\\\"], \\\"properties\\\": {\\\"name\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Name of the token\\\"}, \\\"symbol\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Symbol of the token (typically 3-5 characters)\\\"}, \\\"decimals\\\": {\\\"type\\\": \\\"number\\\", \\\"description\\\": \\\"Number of decimals for the token\\\"}, \\\"gas_limit\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Optional gas limit for the deployment transaction\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"execute\\\"}, {\\\"name\\\": \\\"get_erc20_allowance\\\", \\\"description\\\": \\\"Check how many tokens a spender is allowed to use. This is used for checking the current allowance a spender has for an owner's tokens. Requires token contract address, owner address, and spender address as input. Returns the allowance amount.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"token_address\\\", \\\"owner_address\\\", \\\"spender_address\\\"], \\\"properties\\\": {\\\"owner_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Address of the token owner\\\"}, \\\"token_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"ERC20 token contract address on COTI blockchain\\\"}, \\\"spender_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Address of the spender to check allowance for\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"get_private_erc20_balance\\\", \\\"description\\\": \\\"Get the balance of a private ERC20 token on the COTI blockchain. This is used for checking the current balance of a private token for a COTI account. Requires a COTI account address and token contract address as input. Returns the decrypted token balance.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"account_address\\\", \\\"token_address\\\"], \\\"properties\\\": {\\\"token_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"ERC20 token contract address on COTI blockchain\\\"}, \\\"account_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"COTI account address, e.g., 0x0D7C5C1DA069fd7C1fAFBeb922482B2C7B15D273\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"get_private_erc20_decimals\\\", \\\"description\\\": \\\"Get the number of decimals for a private ERC20 token on the COTI blockchain. This is used for checking the number of decimals in this token. Requires token contract address as input. Returns the number of decimals in this contract.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"token_address\\\"], \\\"properties\\\": {\\\"token_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"ERC20 token contract address on COTI blockchain\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"get_private_erc20_total_supply\\\", \\\"description\\\": \\\"Get the total supply of tokens for a private ERC20 token on the COTI blockchain. This is used for checking how many tokens have been minted in this token. Requires token contract address as input. Returns the total number of tokens in this contract.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"token_address\\\"], \\\"properties\\\": {\\\"token_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"ERC20 token contract address on COTI blockchain\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"mint_private_erc20_token\\\", \\\"description\\\": \\\"Mint additional private ERC20 tokens on the COTI blockchain. This adds new tokens to the specified recipient address. Returns the transaction hash upon successful minting.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"token_address\\\", \\\"recipient_address\\\", \\\"amount_wei\\\"], \\\"properties\\\": {\\\"gas_limit\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Optional gas limit for the minting transaction\\\"}, \\\"amount_wei\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Amount of tokens to mint in wei (smallest unit)\\\"}, \\\"token_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"ERC20 token contract address on COTI blockchain\\\"}, \\\"recipient_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Address to receive the minted tokens\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"transfer_private_erc20\\\", \\\"description\\\": \\\"Transfer private ERC20 tokens on the COTI blockchain. This is used for sending private tokens from your wallet to another address. Requires token contract address, recipient address, and amount as input. Returns the transaction hash upon successful transfer.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"token_address\\\", \\\"recipient_address\\\", \\\"amount_wei\\\"], \\\"properties\\\": {\\\"gas_limit\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Optional gas limit for the transaction\\\"}, \\\"amount_wei\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Amount of tokens to transfer (in Wei)\\\"}, \\\"token_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"ERC20 token contract address on COTI blockchain\\\"}, \\\"recipient_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Recipient COTI address, e.g., 0x0D7C5C1DA069fd7C1fAFBeb922482B2C7B15D273\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"execute\\\"}, {\\\"name\\\": \\\"approve_private_erc721\\\", \\\"description\\\": \\\"Approve an address to transfer a specific private ERC721 NFT token on the COTI blockchain. This allows the approved address to transfer the specified NFT on behalf of the owner. Requires token contract address, token ID, and spender address as input. Returns the transaction hash upon successful approval.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"token_address\\\", \\\"token_id\\\", \\\"spender_address\\\"], \\\"properties\\\": {\\\"token_id\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"ID of the NFT token to approve for transfer\\\"}, \\\"gas_limit\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Optional gas limit for the transaction\\\"}, \\\"token_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"ERC721 token contract address on COTI blockchain\\\"}, \\\"spender_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Address to approve as spender, e.g., 0x0D7C5C1DA069fd7C1fAFBeb922482B2C7B15D273\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"deploy_private_erc721_contract\\\", \\\"description\\\": \\\"Deploy a new standard private ERC721 NFT contract on the COTI blockchain. This creates a new private NFT collection with the specified name and symbol. Returns the deployed contract address upon successful deployment.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"name\\\", \\\"symbol\\\"], \\\"properties\\\": {\\\"name\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Name of the NFT collection\\\"}, \\\"symbol\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Symbol of the NFT collection (typically 3-5 characters)\\\"}, \\\"gas_limit\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Optional gas limit for the deployment transaction\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"execute\\\"}, {\\\"name\\\": \\\"get_private_erc721_approved\\\", \\\"description\\\": \\\"Get the approved address for a private ERC721 NFT token on the COTI blockchain. This is used for checking which address is currently approved to transfer a specific NFT. Requires token contract address and token ID as input. Returns the address that is approved to transfer the specified NFT.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"token_address\\\", \\\"token_id\\\"], \\\"properties\\\": {\\\"token_id\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"ID of the NFT token to check approval for\\\"}, \\\"token_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"ERC721 token contract address on COTI blockchain\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"get_private_erc721_balance\\\", \\\"description\\\": \\\"Get the balance of a private ERC721 NFT collection on the COTI blockchain. This is used for checking how many NFTs an address owns in a collection. Requires token contract address and account address as input. Returns the number of NFTs owned by the specified address.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"token_address\\\", \\\"account_address\\\"], \\\"properties\\\": {\\\"token_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"ERC721 token contract address on COTI blockchain\\\"}, \\\"account_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"COTI account address, e.g., 0x0D7C5C1DA069fd7C1fAFBeb922482B2C7B15D273\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"get_private_erc721_is_approved_for_all\\\", \\\"description\\\": \\\"Check if an operator is approved to transfer all private ERC721 NFT tokens on the COTI blockchain. This is used for checking if an operator has been granted approval to manage all NFTs owned by an address. Requires token contract address, owner address, and operator address as input. Returns whether the operator is approved for all NFTs.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"token_address\\\", \\\"owner_address\\\", \\\"operator_address\\\"], \\\"properties\\\": {\\\"owner_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Address of the token owner\\\"}, \\\"token_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"ERC721 token contract address on COTI blockchain\\\"}, \\\"operator_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Address of the operator to check approval for\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"get_private_erc721_token_owner\\\", \\\"description\\\": \\\"Get the owner address of a private ERC721 NFT token on the COTI blockchain. This is used for checking who currently owns a specific NFT. Requires token contract address and token ID as input. Returns the owner's address of the specified NFT.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"token_address\\\", \\\"token_id\\\"], \\\"properties\\\": {\\\"token_id\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"ID of the NFT token to check ownership for\\\"}, \\\"token_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"ERC721 token contract address on COTI blockchain\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"get_private_erc721_token_uri\\\", \\\"description\\\": \\\"Get the tokenURI for a private ERC721 NFT token on the COTI blockchain. This is used for retrieving the metadata URI of a private NFT. Requires token contract address and token ID as input. Returns the decrypted tokenURI.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"token_address\\\", \\\"token_id\\\"], \\\"properties\\\": {\\\"token_id\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"ID of the NFT token to get the URI for\\\"}, \\\"token_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"ERC721 token contract address on COTI blockchain\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"get_private_erc721_total_supply\\\", \\\"description\\\": \\\"Get the total supply of tokens for a private ERC721 NFT collection on the COTI blockchain. This is used for checking how many NFTs have been minted in a collection. Requires token contract address as input. Returns the total number of tokens in the collection.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"token_address\\\"], \\\"properties\\\": {\\\"token_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"ERC721 token contract address on COTI blockchain\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"mint_private_erc721_token\\\", \\\"description\\\": \\\"Mint a new private ERC721 NFT token on the COTI blockchain. This creates a new NFT in the specified collection with the provided token URI. Returns the transaction hash and token ID upon successful minting.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"token_address\\\", \\\"to_address\\\", \\\"token_uri\\\"], \\\"properties\\\": {\\\"gas_limit\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Optional gas limit for the minting transaction\\\"}, \\\"token_uri\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"URI for the token metadata (can be IPFS URI or any other URI), Example: \\\\\\\"https://example.com/token/0\\\\\\\"\\\"}, \\\"to_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Address to receive the minted NFT\\\"}, \\\"token_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"ERC721 token contract address on COTI blockchain\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"set_private_erc721_approval_for_all\\\", \\\"description\\\": \\\"Approve or revoke an operator to transfer all private ERC721 NFT tokens on the COTI blockchain. This allows the operator to transfer any NFT owned by the caller in this collection. Requires token contract address, operator address, and approval status as input. Returns the transaction hash upon successful approval setting.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"token_address\\\", \\\"operator_address\\\", \\\"approved\\\"], \\\"properties\\\": {\\\"approved\\\": {\\\"type\\\": \\\"boolean\\\", \\\"description\\\": \\\"Whether to approve (true) or revoke (false) the operator\\\"}, \\\"gas_limit\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Optional gas limit for the transaction\\\"}, \\\"token_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"ERC721 token contract address on COTI blockchain\\\"}, \\\"operator_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Address to approve as operator, e.g., 0x0D7C5C1DA069fd7C1fAFBeb922482B2C7B15D273\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"transfer_private_erc721\\\", \\\"description\\\": \\\"Transfer a private ERC721 NFT token on the COTI blockchain. This is used for sending a private NFT from your wallet to another address. Requires token contract address, recipient address, and token ID as input. Returns the transaction hash upon successful transfer.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"token_address\\\", \\\"recipient_address\\\", \\\"token_id\\\"], \\\"properties\\\": {\\\"token_id\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"ID of the NFT token to transfer\\\"}, \\\"gas_limit\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Optional gas limit for the transaction\\\"}, \\\"from_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Optional, address to transfer from. If not provided, the current account will be used.\\\"}, \\\"token_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"ERC721 token contract address on COTI blockchain\\\"}, \\\"recipient_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Recipient COTI address, e.g., 0x0D7C5C1DA069fd7C1fAFBeb922482B2C7B15D273\\\"}, \\\"use_safe_transfer\\\": {\\\"type\\\": \\\"boolean\\\", \\\"description\\\": \\\"Optional, whether to use safeTransferFrom instead of transferFrom. Default is false.\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"execute\\\"}, {\\\"name\\\": \\\"get_native_balance\\\", \\\"description\\\": \\\"Get the native COTI token balance of a COTI blockchain account. This is used for checking the current balance of a COTI account. Requires a COTI account address as input. Returns the account balance in COTI tokens.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"account_address\\\"], \\\"properties\\\": {\\\"account_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"COTI account address, e.g., 0x0D7C5C1DA069fd7C1fAFBeb922482B2C7B15D273\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"transfer_native\\\", \\\"description\\\": \\\"Transfer native COTI tokens to another wallet. This is used for sending COTI tokens from your wallet to another address. Requires recipient address and amount in Wei as input. Returns the transaction hash upon successful transfer.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"recipient_address\\\", \\\"amount_wei\\\"], \\\"properties\\\": {\\\"gas_limit\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Optional gas limit for the transaction\\\"}, \\\"amount_wei\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Amount of COTI to transfer (in Wei)\\\"}, \\\"recipient_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Recipient COTI address, e.g., 0x0D7C5C1DA069fd7C1fAFBeb922482B2C7B15D273\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"execute\\\"}, {\\\"name\\\": \\\"call_contract_function\\\", \\\"description\\\": \\\"Call a read-only function on any smart contract on the COTI blockchain. This allows retrieving data from any contract by specifying the contract address, function name, and parameters. Returns the function result in a human-readable format.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"contract_address\\\", \\\"function_name\\\", \\\"function_args\\\"], \\\"properties\\\": {\\\"abi\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Optional JSON string representation of the contract ABI. If not provided, will attempt to use standard ERC20/ERC721 ABIs.\\\"}, \\\"function_args\\\": {\\\"type\\\": \\\"array\\\", \\\"items\\\": {\\\"type\\\": \\\"string\\\"}, \\\"description\\\": \\\"Array of arguments to pass to the function (can be empty if function takes no arguments)\\\"}, \\\"function_name\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Name of the function to call on the contract\\\"}, \\\"contract_address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Address of the smart contract to call\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"decode_event_data\\\", \\\"description\\\": \\\"Decode event data from a transaction log based on the event signature. This helps interpret the raw data in transaction logs by matching the event signature to known event types and decoding the parameters. Requires event signature, topics, and data from a transaction log.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"topics\\\", \\\"data\\\"], \\\"properties\\\": {\\\"abi\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Optional JSON string representation of the contract ABI. If not provided, will attempt to use standard ERC20/ERC721 ABIs.\\\"}, \\\"data\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Data field from the transaction log\\\"}, \\\"topics\\\": {\\\"type\\\": \\\"array\\\", \\\"items\\\": {\\\"type\\\": \\\"string\\\"}, \\\"description\\\": \\\"Array of topics from the transaction log\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_transaction_logs\\\", \\\"description\\\": \\\"Get the logs from a transaction on the COTI blockchain. This is used for retrieving event logs emitted during transaction execution. Requires a transaction hash as input. Returns detailed information about the transaction logs including event names, topics, and data.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"transaction_hash\\\"], \\\"properties\\\": {\\\"transaction_hash\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Transaction hash to get logs for\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_transaction_status\\\", \\\"description\\\": \\\"Get the status of a transaction on the COTI blockchain. This is used for checking if a transaction has been confirmed, pending, or failed. Requires a transaction hash as input. Returns detailed information about the transaction status.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"required\\\": [\\\"transaction_hash\\\"], \\\"properties\\\": {\\\"transaction_hash\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Transaction hash to check status for\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}], \\\"tools_count\\\": 35, \\\"homepage\\\": \\\"https://smithery.ai/server/@davibauer/coti-mcp\\\", \\\"url\\\": \\\"\\\", \\\"topics\\\": [], \\\"data_sources\\\": [\\\"smithery\\\"]}\", \"stage1_analysis\": {\"server_name\": \"COTI Blockchain MCP Server\", \"server_id\": \"@davibauer/coti-mcp\", \"is_finance_llm\": \"yes\", \"confidence\": \"high\", \"threat_models\": [], \"analysis_notes\": \"Blockchain server with extensive financial functionality including token transfers, balance checking, account management, ERC20/ERC721 token operations, minting, and native cryptocurrency transactions\"}, \"identified_threat_models\": [], \"stage1_confidence\": \"high\", \"stage1_notes\": \"Blockchain server with extensive financial functionality including token transfers, balance checking, account management, ERC20/ERC721 token operations, minting, and native cryptocurrency transactions\"}", "target": "", "id": "frKCVcTLtA4YB3MPjJ64WV", "metadata": {"stage": "consequentiality_assessment"}}
{"input": "{\"raw_input\": \"ONLY RESPOND WITH JSON. NO EXPLANATIONS. NO MARKDOWN. NO TEXT OUTSIDE JSON.\\n\\nAnalyze the MCP server for financial relevance. Look for keywords: payment, banking, credit, loan, finance, money, currency, crypto, investment, trading, portfolio, market, exchange, wallet, account, budget, expense, income, tax, invoice, billing, accounting, insurance, compliance, KYC, AML.\\n\\nJSON FORMAT (NOTHING ELSE):\\n{\\n  \\\"server_name\\\": \\\"string\\\",\\n  \\\"server_id\\\": \\\"string\\\", \\n  \\\"is_finance_llm\\\": \\\"yes|no|unclear\\\",\\n  \\\"confidence\\\": \\\"high|medium|low\\\",\\n  \\\"threat_models\\\": [],\\n  \\\"analysis_notes\\\": \\\"Brief reason\\\"\\n}\\n\\nIf financial keywords found: is_finance_llm=\\\"yes\\\". If not: is_finance_llm=\\\"no\\\". If unclear: is_finance_llm=\\\"unclear\\\".\\n\\nRESPOND ONLY WITH JSON.\\n\\nMCP Server Data:\\n{\\\"server_name\\\": \\\"Etherscan API Integration Server\\\", \\\"server_id\\\": \\\"@xiaok/etherscan-mcp-server\\\", \\\"description\\\": \\\"Enable dynamic interaction with Etherscan's blockchain data and services through a standardized MCP interface. Access supported chains and endpoints to retrieve blockchain information seamlessly. Simplify blockchain data queries and integration for your applications.\\\", \\\"readme\\\": \\\"\\\", \\\"tools\\\": [{\\\"name\\\": \\\"account/balance\\\", \\\"description\\\": \\\"Returns the Ether balance of a given address.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"address\\\"], \\\"properties\\\": {\\\"address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` representing the address to check for balance\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"The chain id, default is 1\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"account/balancemulti\\\", \\\"description\\\": \\\"Get Ether Balance for Multiple Addresses in a Single Call\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"address\\\"], \\\"properties\\\": {\\\"address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `strings` representing the addresses to check for balance, separated by `,`\\\\nup to **20 addresses** per call\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"The chain id, default is 1\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"account/txlist\\\", \\\"description\\\": \\\"Returns the list of 'Normal' Transactions By Address\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"address\\\"], \\\"properties\\\": {\\\"page\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"the `integer` page number, if pagination is enabled\\\"}, \\\"sort\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"asc\\\", \\\"description\\\": \\\"the sorting preference, use `asc` to sort by ascending and `desc` to sort by descending\\\"}, \\\"offset\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"10\\\", \\\"description\\\": \\\"the number of transactions displayed per page\\\"}, \\\"address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` representing the addresses to check for balance\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"The chain id, default is 1\\\"}, \\\"endblock\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"99999999\\\", \\\"description\\\": \\\"the `integer` block number to stop searching for transactions\\\"}, \\\"startblock\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"0\\\", \\\"description\\\": \\\"the `integer` block number to start searching for transactions\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"account/txlistinternal\\\", \\\"description\\\": \\\"Returns the list of 'Internal' Transactions by Address\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"address\\\"], \\\"properties\\\": {\\\"page\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"the `integer` page number, if pagination is enabled\\\"}, \\\"sort\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"asc\\\", \\\"description\\\": \\\"the sorting preference, use `asc` to sort by ascending and `desc` to sort by descending\\\"}, \\\"offset\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"10\\\", \\\"description\\\": \\\"the number of transactions displayed per page\\\"}, \\\"address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` representing the address to get internal txs for\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"The chain id, default is 1\\\"}, \\\"endblock\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"99999999\\\", \\\"description\\\": \\\"the `integer` block number to stop searching for transactions\\\"}, \\\"startblock\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"0\\\", \\\"description\\\": \\\"the `integer` block number to start searching for transactions\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"account/txlistinternal_byhash\\\", \\\"description\\\": \\\"Returns the list of 'Internal' Transactions by Transaction Hash\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"txhash\\\"], \\\"properties\\\": {\\\"txhash\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` representing the transaction hash to get internal txs for\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"The chain id, default is 1\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"account/txlistinternal_byblock\\\", \\\"description\\\": \\\"Returns the list of 'Internal' Transactions by Block Range\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"startblock\\\", \\\"endblock\\\"], \\\"properties\\\": {\\\"page\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"the `integer` page number, if pagination is enabled\\\"}, \\\"sort\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"asc\\\", \\\"description\\\": \\\"the sorting preference, use `asc` to sort by ascending and `desc` to sort by descending\\\"}, \\\"offset\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"10\\\", \\\"description\\\": \\\"the number of transactions displayed per page\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"The chain id, default is 1\\\"}, \\\"endblock\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `integer` block number to stop searching for transactions\\\"}, \\\"startblock\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `integer` block number to start searching for transactions\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"account/tokentx\\\", \\\"description\\\": \\\"Returns the list of ERC20 Token Transfer Events by Address\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"address\\\"], \\\"properties\\\": {\\\"page\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"the `integer` page number, if pagination is enabled\\\"}, \\\"sort\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"asc\\\", \\\"description\\\": \\\"the sorting preference, use `asc` to sort by ascending and `desc` to sort by descending\\\"}, \\\"offset\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"10\\\", \\\"description\\\": \\\"the number of transactions displayed per page\\\"}, \\\"address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` representing the address to get token transfers for\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"The chain id, default is 1\\\"}, \\\"endblock\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"99999999\\\", \\\"description\\\": \\\"the `integer` block number to stop searching for transactions\\\"}, \\\"startblock\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"0\\\", \\\"description\\\": \\\"the `integer` block number to start searching for transactions\\\"}, \\\"contractaddress\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` representing the token contract address to check for balance\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"account/tokennfttx\\\", \\\"description\\\": \\\"Returns the list of ERC721 Token Transfer Events by Address\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"address\\\"], \\\"properties\\\": {\\\"page\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"the `integer` page number, if pagination is enabled\\\"}, \\\"sort\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"asc\\\", \\\"description\\\": \\\"the sorting preference, use `asc` to sort by ascending and `desc` to sort by descending\\\"}, \\\"offset\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"10\\\", \\\"description\\\": \\\"the number of transactions displayed per page\\\"}, \\\"address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` representing the address to get NFT transfers for\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"The chain id, default is 1\\\"}, \\\"endblock\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"99999999\\\", \\\"description\\\": \\\"the `integer` block number to stop searching for transactions\\\"}, \\\"startblock\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"0\\\", \\\"description\\\": \\\"the `integer` block number to start searching for transactions\\\"}, \\\"contractaddress\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` representing the NFT contract address to check for balance\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"account/token1155tx\\\", \\\"description\\\": \\\"Returns the list of ERC1155 Token Transfer Events by Address\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"address\\\"], \\\"properties\\\": {\\\"page\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"the `integer` page number, if pagination is enabled\\\"}, \\\"sort\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"asc\\\", \\\"description\\\": \\\"the sorting preference, use `asc` to sort by ascending and `desc` to sort by descending\\\"}, \\\"offset\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"10\\\", \\\"description\\\": \\\"the number of transactions displayed per page\\\"}, \\\"address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` representing the address to get ERC1155 transfers for\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"The chain id, default is 1\\\"}, \\\"endblock\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"99999999\\\", \\\"description\\\": \\\"the `integer` block number to stop searching for transactions\\\"}, \\\"startblock\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"0\\\", \\\"description\\\": \\\"the `integer` block number to start searching for transactions\\\"}, \\\"contractaddress\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` representing the ERC1155 contract address to check for balance\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"account/fundedby\\\", \\\"description\\\": \\\"Returns the address that funded an address, and its relative age.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"address\\\"], \\\"properties\\\": {\\\"address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` representing the address that received funding\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"The chain id, default is 1\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"account/getminedblocks\\\", \\\"description\\\": \\\"Returns the list of blocks validated by an address.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"address\\\"], \\\"properties\\\": {\\\"page\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"the `integer` page number, if pagination is enabled\\\"}, \\\"offset\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"10\\\", \\\"description\\\": \\\"the number of blocks displayed per page\\\"}, \\\"address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` representing the address to check for validated blocks\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"The chain id, default is 1\\\"}, \\\"blocktype\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"blocks\\\", \\\"description\\\": \\\"the `string` pre-defined block type, either `blocks` for canonical blocks or `uncles` for uncle blocks only\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"account/txsBeaconWithdrawal\\\", \\\"description\\\": \\\"Returns the beacon chain withdrawals made to an address.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"address\\\"], \\\"properties\\\": {\\\"page\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"the `integer` page number, if pagination is enabled\\\"}, \\\"sort\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"asc\\\", \\\"description\\\": \\\"the sorting preference, use `asc` to sort by ascending and `desc` to sort by descending\\\"}, \\\"offset\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"100\\\", \\\"description\\\": \\\"the number of withdrawals displayed per page\\\"}, \\\"address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` representing the address to check for beacon withdrawals\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"The chain id, default is 1\\\"}, \\\"endblock\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"99999999\\\", \\\"description\\\": \\\"the `integer` block number to stop searching for transactions\\\"}, \\\"startblock\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"0\\\", \\\"description\\\": \\\"the `integer` block number to start searching for transactions\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"contract/getabi\\\", \\\"description\\\": \\\"Returns the Contract Application Binary Interface ( ABI ) of a verified smart contract.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"address\\\"], \\\"properties\\\": {\\\"address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `contract address` that has a verified source code\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"contract/getsourcecode\\\", \\\"description\\\": \\\"Returns the Contract Source Code for Verified Contract Source Codes.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"address\\\"], \\\"properties\\\": {\\\"address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `contract address` that has a verified source code\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"contract/getcontractcreation\\\", \\\"description\\\": \\\"Returns the Contract Creator and Creation Tx Hash.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"contractaddresses\\\"], \\\"properties\\\": {\\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}, \\\"contractaddresses\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `contract address` to check for contract creator and creation tx hash, up to 5 at a time\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"contract/checkverifystatus\\\", \\\"description\\\": \\\"Returns the success or error status of a contract verification request.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"guid\\\"], \\\"properties\\\": {\\\"guid\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the unique `guid` received from the verification request\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"transaction/getstatus\\\", \\\"description\\\": \\\"Returns the status code of a contract execution.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"txhash\\\"], \\\"properties\\\": {\\\"txhash\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` representing the transaction hash to check the execution status\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"The chain id, default is 1\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"transaction/gettxreceiptstatus\\\", \\\"description\\\": \\\"Returns the status code of a transaction execution.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"txhash\\\"], \\\"properties\\\": {\\\"txhash\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` representing the transaction hash to check the execution status\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"The chain id, default is 1\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"block/getblockreward\\\", \\\"description\\\": \\\"Returns the block reward and 'Uncle' block rewards.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"blockno\\\"], \\\"properties\\\": {\\\"blockno\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `integer` block number to check block rewards for eg.\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"The chain id, default is 1\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"block/getblockcountdown\\\", \\\"description\\\": \\\"Returns the estimated time remaining, in seconds, until a certain block is mined.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"blockno\\\"], \\\"properties\\\": {\\\"blockno\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `integer` block number to estimate time remaining to be mined eg.\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"The chain id, default is 1\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"block/getblocknobytime\\\", \\\"description\\\": \\\"Returns the block number that was mined at a certain timestamp.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"timestamp\\\", \\\"closest\\\"], \\\"properties\\\": {\\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"The chain id, default is 1\\\"}, \\\"closest\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the closest available block to the provided timestamp, either `before` or `after`\\\"}, \\\"timestamp\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `integer` representing the Unix timestamp in **seconds**.\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"block/getblocktxnscount\\\", \\\"description\\\": \\\"Returns the number of transactions in a specified block.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"blockno\\\"], \\\"properties\\\": {\\\"blockno\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `integer` block number to get the transaction count for, eg.\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"The chain id, default is 1\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"logs/getLogsByAddress\\\", \\\"description\\\": \\\"Returns the event logs from an address, with optional filtering by block range.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"address\\\"], \\\"properties\\\": {\\\"page\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"the `integer` page number, if pagination is enabled\\\"}, \\\"offset\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1000\\\", \\\"description\\\": \\\"the number of transactions displayed per page limited to **1000 records** per query, use the `page` parameter for subsequent records\\\"}, \\\"address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` representing the address to check for logs\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"The chain id, default is 1\\\"}, \\\"toBlock\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `integer` block number to stop searching for logs eg. `12879196`\\\"}, \\\"fromBlock\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `integer` block number to start searching for logs eg. `12878196`\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"logs/getLogsByTopics\\\", \\\"description\\\": \\\"Returns the events log in a block range, filtered by topics.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"fromBlock\\\", \\\"toBlock\\\"], \\\"properties\\\": {\\\"page\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `integer` page number, if pagination is enabled\\\"}, \\\"offset\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the number of transactions displayed per page limited to **1000 records** per query, use the `page` parameter for subsequent records\\\"}, \\\"topic0\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the topic numbers to search for limited to`topic0`, `topic1`, `topic2`, `topic3`\\\"}, \\\"topic1\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the topic numbers to search for limited to`topic0`, `topic1`, `topic2`, `topic3`\\\"}, \\\"topic2\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the topic numbers to search for limited to`topic0`, `topic1`, `topic2`, `topic3`\\\"}, \\\"topic3\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the topic numbers to search for limited to`topic0`, `topic1`, `topic2`, `topic3`\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"The chain id, default is 1\\\"}, \\\"toBlock\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `integer` block number to stop searching for logs eg. `12879196`\\\"}, \\\"fromBlock\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `integer` block number to start searching for logs eg. `12878196`\\\"}, \\\"topic0_1_opr\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the topic operator when multiple topic combinations are used limited to `and` or `or`\\\"}, \\\"topic0_2_opr\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the topic operator when multiple topic combinations are used limited to `and` or `or`\\\"}, \\\"topic0_3_opr\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the topic operator when multiple topic combinations are used limited to `and` or `or`\\\"}, \\\"topic1_2_opr\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the topic operator when multiple topic combinations are used limited to `and` or `or`\\\"}, \\\"topic1_3_opr\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the topic operator when multiple topic combinations are used limited to `and` or `or`\\\"}, \\\"topic2_3_opr\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the topic operator when multiple topic combinations are used limited to `and` or `or`\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"logs/getLogsByAddressAndTopics\\\", \\\"description\\\": \\\"Returns the event logs from an address, filtered by topics and block range.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"fromBlock\\\", \\\"toBlock\\\", \\\"address\\\"], \\\"properties\\\": {\\\"page\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `integer` page number, if pagination is enabled\\\"}, \\\"offset\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the number of transactions displayed per page limited to **1000 records** per query, use the `page` parameter for subsequent records\\\"}, \\\"topic0\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the topic numbers to search for limited to`topic0`, `topic1`, `topic2`, `topic3`\\\"}, \\\"topic1\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the topic numbers to search for limited to`topic0`, `topic1`, `topic2`, `topic3`\\\"}, \\\"topic2\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the topic numbers to search for limited to`topic0`, `topic1`, `topic2`, `topic3`\\\"}, \\\"topic3\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the topic numbers to search for limited to`topic0`, `topic1`, `topic2`, `topic3`\\\"}, \\\"address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` representing the address to check for logs\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"The chain id, default is 1\\\"}, \\\"toBlock\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `integer` block number to stop searching for logs eg. `12879196`\\\"}, \\\"fromBlock\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `integer` block number to start searching for logs eg. `12878196`\\\"}, \\\"topic0_1_opr\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the topic operator when multiple topic combinations are used limited to `and` or `or`\\\"}, \\\"topic0_2_opr\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the topic operator when multiple topic combinations are used limited to `and` or `or`\\\"}, \\\"topic0_3_opr\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the topic operator when multiple topic combinations are used limited to `and` or `or`\\\"}, \\\"topic1_2_opr\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the topic operator when multiple topic combinations are used limited to `and` or `or`\\\"}, \\\"topic1_3_opr\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the topic operator when multiple topic combinations are used limited to `and` or `or`\\\"}, \\\"topic2_3_opr\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the topic operator when multiple topic combinations are used limited to `and` or `or`\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"proxy/eth_blockNumber\\\", \\\"description\\\": \\\"Returns the number of most recent block.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"properties\\\": {\\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"proxy/eth_getBlockByNumber\\\", \\\"description\\\": \\\"Returns information about a block by block number.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"tag\\\", \\\"boolean\\\"], \\\"properties\\\": {\\\"tag\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the block number, in hex eg. `0xC36B3C`\\\"}, \\\"boolean\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `boolean` value to show full transaction objects. when `true`, returns full transaction objects and their information, when `false` only returns a list of transactions.\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"proxy/eth_getUncleByBlockNumberAndIndex\\\", \\\"description\\\": \\\"Returns information about a uncle by block number.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"tag\\\", \\\"index\\\"], \\\"properties\\\": {\\\"tag\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the block number, in hex eg. `0xC36B3C`\\\"}, \\\"index\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the position of the uncle's index in the block, in hex eg. `0x5`\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"proxy/eth_getBlockTransactionCountByNumber\\\", \\\"description\\\": \\\"Returns the number of transactions in a block.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"tag\\\"], \\\"properties\\\": {\\\"tag\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the block number, in hex eg. `0xC36B3C`\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"proxy/eth_getTransactionByHash\\\", \\\"description\\\": \\\"Returns information about a transaction requested by transaction hash.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"txhash\\\"], \\\"properties\\\": {\\\"txhash\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` representing the hash of the transaction\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"proxy/eth_getTransactionByBlockNumberAndIndex\\\", \\\"description\\\": \\\"Returns information about a transaction requested by block number and transaction index position.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"tag\\\", \\\"index\\\"], \\\"properties\\\": {\\\"tag\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the block number, in hex eg. `0xC36B3C`\\\"}, \\\"index\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the position of the uncle's index in the block, in hex eg. `0x5`\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"proxy/eth_getTransactionCount\\\", \\\"description\\\": \\\"Returns the number of transactions performed by an address.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"address\\\", \\\"tag\\\"], \\\"properties\\\": {\\\"tag\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` pre-defined block parameter, either `earliest`, `pending` or `latest`\\\"}, \\\"address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` representing the address to get transaction count\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"proxy/eth_getTransactionReceipt\\\", \\\"description\\\": \\\"Returns the receipt of a transaction that has been validated.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"txhash\\\"], \\\"properties\\\": {\\\"txhash\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` representing the hash of the transaction\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"proxy/eth_call\\\", \\\"description\\\": \\\"Executes a new message call immediately without creating a transaction on the block chain.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"to\\\", \\\"data\\\", \\\"tag\\\"], \\\"properties\\\": {\\\"to\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` representing the address to interact with\\\"}, \\\"tag\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` pre-defined block parameter, either `earliest`, `pending` or `latest`\\\"}, \\\"data\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the hash of the method signature and encoded parameters\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"execute\\\"}, {\\\"name\\\": \\\"proxy/eth_getCode\\\", \\\"description\\\": \\\"Returns code at a given address.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"address\\\", \\\"tag\\\"], \\\"properties\\\": {\\\"tag\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` pre-defined block parameter, either `earliest`, `pending` or `latest`\\\"}, \\\"address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` representing the address to get code\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"proxy/eth_getStorageAt\\\", \\\"description\\\": \\\"Returns the value from a storage position at a given address.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"address\\\", \\\"position\\\", \\\"tag\\\"], \\\"properties\\\": {\\\"tag\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` pre-defined block parameter, either `earliest`, `pending` or `latest`\\\"}, \\\"address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` representing the address to get code\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}, \\\"position\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the hex code of the position in storage, eg `0x0`\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"proxy/eth_gasPrice\\\", \\\"description\\\": \\\"Returns the current price per gas in wei.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"properties\\\": {\\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"proxy/eth_estimateGas\\\", \\\"description\\\": \\\"Makes a call or transaction, which won't be added to the blockchain and returns the used gas.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"data\\\", \\\"to\\\"], \\\"properties\\\": {\\\"to\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` representing the address to interact with\\\"}, \\\"gas\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the amount of gas provided for the transaction, in hex eg. `0x5f5e0ff`\\\"}, \\\"data\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the hash of the method signature and encoded parameters\\\"}, \\\"value\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the value sent in this transaction, in hex eg. `0xff22`\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}, \\\"gasPrice\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the gas price paid for each unit of gas, in wei\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"stats/tokensupply\\\", \\\"description\\\": \\\"Returns the current amount of an ERC-20 token in circulation.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"contractaddress\\\"], \\\"properties\\\": {\\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}, \\\"contractaddress\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `contract address` of the ERC-20 token\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"account/tokenbalance\\\", \\\"description\\\": \\\"Returns the current balance of an ERC-20 token of an address.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"contractaddress\\\", \\\"address\\\"], \\\"properties\\\": {\\\"address\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `string` representing the address to check for token balance\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}, \\\"contractaddress\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the `contract address` of the ERC-20 token\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"gas/gasestimate\\\", \\\"description\\\": \\\"Returns the estimated time, in seconds, for a transaction to be confirmed on the blockchain.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"gasprice\\\"], \\\"properties\\\": {\\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}, \\\"gasprice\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the price paid per unit of gas, in `wei`\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"gas/gasoracle\\\", \\\"description\\\": \\\"Returns the current Safe, Proposed and Fast gas prices.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"properties\\\": {\\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"stats/dailyavggaslimit\\\", \\\"description\\\": \\\"Returns the historical daily average gas limit of the Ethereum network.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"startdate\\\", \\\"enddate\\\", \\\"sort\\\"], \\\"properties\\\": {\\\"sort\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the sorting preference, use `asc` to sort by ascending and `desc` to sort by descending\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}, \\\"enddate\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the ending date in `yyyy-MM-dd` format, eg. `2019-02-28`\\\"}, \\\"startdate\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the starting date in `yyyy-MM-dd` format, eg. `2019-01-31`\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"stats/ethsupply\\\", \\\"description\\\": \\\"Returns the current amount of Ether in circulation excluding ETH2 Staking rewards and EIP1559 burnt fees.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"properties\\\": {\\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"stats/ethsupply2\\\", \\\"description\\\": \\\"Returns the current amount of Ether in circulation, ETH2 Staking rewards, EIP1559 burnt fees, and total withdrawn ETH from the beacon chain.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"properties\\\": {\\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"stats/ethprice\\\", \\\"description\\\": \\\"Returns the latest price of 1 ETH.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"properties\\\": {\\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"stats/chainsize\\\", \\\"description\\\": \\\"Returns the size of the Ethereum blockchain, in bytes, over a date range.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"startdate\\\", \\\"enddate\\\", \\\"clienttype\\\", \\\"syncmode\\\", \\\"sort\\\"], \\\"properties\\\": {\\\"sort\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the sorting preference, use `asc` to sort by ascending and `desc` to sort by descending\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}, \\\"enddate\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the ending date in `yyyy-MM-dd` format, eg. `2019-02-28`\\\"}, \\\"syncmode\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the type of node to run, either `default` or `archive`\\\"}, \\\"startdate\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the starting date in `yyyy-MM-dd` format, eg. `2019-02-01`\\\"}, \\\"clienttype\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the Ethereum node client to use, either `geth` or `parity`\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"stats/nodecount\\\", \\\"description\\\": \\\"Returns the total number of discoverable Ethereum nodes.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"properties\\\": {\\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"stats/dailytxnfee\\\", \\\"description\\\": \\\"Returns the amount of transaction fees paid to miners per day.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"startdate\\\", \\\"enddate\\\", \\\"sort\\\"], \\\"properties\\\": {\\\"sort\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the sorting preference, use `asc` to sort by ascending and `desc` to sort by descending\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}, \\\"enddate\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the ending date in `yyyy-MM-dd` format, eg. `2019-02-28`\\\"}, \\\"startdate\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the starting date in `yyyy-MM-dd` format, eg. `2019-02-01`\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"stats/dailynewaddress\\\", \\\"description\\\": \\\"Returns the number of new Ethereum addresses created per day.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"startdate\\\", \\\"enddate\\\", \\\"sort\\\"], \\\"properties\\\": {\\\"sort\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the sorting preference, use `asc` to sort by ascending and `desc` to sort by descending\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}, \\\"enddate\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the ending date in `yyyy-MM-dd` format, eg. `2019-02-28`\\\"}, \\\"startdate\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the starting date in `yyyy-MM-dd` format, eg. `2019-02-01`\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"stats/dailynetutilization\\\", \\\"description\\\": \\\"Returns the daily average gas used over gas limit, in percentage.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"startdate\\\", \\\"enddate\\\", \\\"sort\\\"], \\\"properties\\\": {\\\"sort\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the sorting preference, use `asc` to sort by ascending and `desc` to sort by descending\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}, \\\"enddate\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the ending date in `yyyy-MM-dd` format, eg. `2019-02-28`\\\"}, \\\"startdate\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the starting date in `yyyy-MM-dd` format, eg. `2019-02-01`\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"stats/dailyavghashrate\\\", \\\"description\\\": \\\"Returns the historical measure of processing power of the Ethereum network.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"startdate\\\", \\\"enddate\\\", \\\"sort\\\"], \\\"properties\\\": {\\\"sort\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the sorting preference, use `asc` to sort by ascending and `desc` to sort by descending\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}, \\\"enddate\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the ending date in `yyyy-MM-dd` format, eg. `2019-02-28`\\\"}, \\\"startdate\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the starting date in `yyyy-MM-dd` format, eg. `2019-02-01`\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"stats/dailytx\\\", \\\"description\\\": \\\"Returns the number of transactions performed on the Ethereum blockchain per day.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"startdate\\\", \\\"enddate\\\", \\\"sort\\\"], \\\"properties\\\": {\\\"sort\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the sorting preference, use `asc` to sort by ascending and `desc` to sort by descending\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}, \\\"enddate\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the ending date in `yyyy-MM-dd` format, eg. `2019-02-28`\\\"}, \\\"startdate\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the starting date in `yyyy-MM-dd` format, eg. `2019-02-01`\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"stats/dailyavgnetdifficulty\\\", \\\"description\\\": \\\"Returns the historical mining difficulty of the Ethereum network.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"startdate\\\", \\\"enddate\\\", \\\"sort\\\"], \\\"properties\\\": {\\\"sort\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the sorting preference, use `asc` to sort by ascending and `desc` to sort by descending\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}, \\\"enddate\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the ending date in `yyyy-MM-dd` format, eg. `2019-02-28`\\\"}, \\\"startdate\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the starting date in `yyyy-MM-dd` format, eg. `2019-02-01`\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"stats/ethdailyprice\\\", \\\"description\\\": \\\"Returns the historical price of 1 ETH.\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"startdate\\\", \\\"enddate\\\", \\\"sort\\\"], \\\"properties\\\": {\\\"sort\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the sorting preference, use `asc` to sort by ascending and `desc` to sort by descending\\\"}, \\\"chainid\\\": {\\\"type\\\": \\\"string\\\", \\\"default\\\": \\\"1\\\", \\\"description\\\": \\\"chain id, default 1 ( Ethereum )\\\"}, \\\"enddate\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the ending date in `yyyy-MM-dd` format, eg. `2019-02-28`\\\"}, \\\"startdate\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"the starting date in `yyyy-MM-dd` format, eg. `2019-02-01`\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}], \\\"tools_count\\\": 55, \\\"homepage\\\": \\\"https://smithery.ai/server/@xiaok/etherscan-mcp-server\\\", \\\"url\\\": \\\"\\\", \\\"topics\\\": [], \\\"data_sources\\\": [\\\"smithery\\\"]}\", \"stage1_analysis\": {\"server_name\": \"Etherscan API Integration Server\", \"server_id\": \"@xiaok/etherscan-mcp-server\", \"is_finance_llm\": \"yes\", \"confidence\": \"high\", \"threat_models\": [], \"analysis_notes\": \"Extensive blockchain financial functionality including crypto account balances, trading history, ETH prices, gas fees, token transfers, and transaction analysis\"}, \"identified_threat_models\": [], \"stage1_confidence\": \"high\", \"stage1_notes\": \"Extensive blockchain financial functionality including crypto account balances, trading history, ETH prices, gas fees, token transfers, and transaction analysis\"}", "target": "", "id": "QM34KLQoysQkYaztvANiMj", "metadata": {"stage": "consequentiality_assessment"}}
{"input": "{\"raw_input\": \"ONLY RESPOND WITH JSON. NO EXPLANATIONS. NO MARKDOWN. NO TEXT OUTSIDE JSON.\\n\\nAnalyze the MCP server for financial relevance. Look for keywords: payment, banking, credit, loan, finance, money, currency, crypto, investment, trading, portfolio, market, exchange, wallet, account, budget, expense, income, tax, invoice, billing, accounting, insurance, compliance, KYC, AML.\\n\\nJSON FORMAT (NOTHING ELSE):\\n{\\n  \\\"server_name\\\": \\\"string\\\",\\n  \\\"server_id\\\": \\\"string\\\", \\n  \\\"is_finance_llm\\\": \\\"yes|no|unclear\\\",\\n  \\\"confidence\\\": \\\"high|medium|low\\\",\\n  \\\"threat_models\\\": [],\\n  \\\"analysis_notes\\\": \\\"Brief reason\\\"\\n}\\n\\nIf financial keywords found: is_finance_llm=\\\"yes\\\". If not: is_finance_llm=\\\"no\\\". If unclear: is_finance_llm=\\\"unclear\\\".\\n\\nRESPOND ONLY WITH JSON.\\n\\nMCP Server Data:\\n{\\\"server_name\\\": \\\"Blockscout MCP Server\\\", \\\"server_id\\\": \\\"@blockscout/mcp-server\\\", \\\"description\\\": \\\"Provide AI agents and automation tools with contextual access to blockchain data including balances, tokens, NFTs, and contract metadata. Enable multi-chain support and deliver enhanced user experience with progress notifications for long-running queries. Facilitate seamless integration with AI hosts like Claude Desktop for blockchain data analysis.\\\", \\\"readme\\\": \\\"\\\", \\\"tools\\\": [{\\\"name\\\": \\\"__get_instructions__\\\", \\\"description\\\": \\\"\\\\n    This tool MUST be called BEFORE any other tool.\\\\n    Without calling it, the MCP server will not work as expected.\\\\n    It MUST be called once in a session.\\\\n    \\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"title\\\": \\\"__get_instructions__Arguments\\\", \\\"properties\\\": {}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_block_info\\\", \\\"description\\\": \\\"\\\\n    Get block information like timestamp, gas used, burnt fees, transaction count etc.\\\\n    Can optionally include the list of transaction hashes contained in the block. Transaction hashes are omitted by default; request them only when you truly need them, because on high-traffic chains the list may exhaust the context.\\\\n    \\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"title\\\": \\\"get_block_infoArguments\\\", \\\"required\\\": [\\\"chain_id\\\", \\\"number_or_hash\\\"], \\\"properties\\\": {\\\"chain_id\\\": {\\\"type\\\": \\\"string\\\", \\\"title\\\": \\\"Chain Id\\\", \\\"description\\\": \\\"The ID of the blockchain\\\"}, \\\"number_or_hash\\\": {\\\"type\\\": \\\"string\\\", \\\"title\\\": \\\"Number Or Hash\\\", \\\"description\\\": \\\"Block number or hash\\\"}, \\\"include_transactions\\\": {\\\"anyOf\\\": [{\\\"type\\\": \\\"boolean\\\"}, {\\\"type\\\": \\\"null\\\"}], \\\"title\\\": \\\"Include Transactions\\\", \\\"default\\\": false, \\\"description\\\": \\\"If true, includes a list of transaction hashes from the block.\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_latest_block\\\", \\\"description\\\": \\\"\\\\n    Get the latest indexed block number and timestamp, which represents the most recent state of the blockchain. \\\\n    No transactions or token transfers can exist beyond this point, making it useful as a reference timestamp for other API calls.\\\\n    \\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"title\\\": \\\"get_latest_blockArguments\\\", \\\"required\\\": [\\\"chain_id\\\"], \\\"properties\\\": {\\\"chain_id\\\": {\\\"type\\\": \\\"string\\\", \\\"title\\\": \\\"Chain Id\\\", \\\"description\\\": \\\"The ID of the blockchain\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_address_by_ens_name\\\", \\\"description\\\": \\\"\\\\n    Useful for when you need to convert an ENS domain name (e.g. \\\\\\\"blockscout.eth\\\\\\\")\\\\n    to its corresponding Ethereum address.\\\\n    \\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"title\\\": \\\"get_address_by_ens_nameArguments\\\", \\\"required\\\": [\\\"name\\\"], \\\"properties\\\": {\\\"name\\\": {\\\"type\\\": \\\"string\\\", \\\"title\\\": \\\"Name\\\", \\\"description\\\": \\\"ENS domain name to resolve\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"get_transactions_by_address\\\", \\\"description\\\": \\\"\\\\n    Get transactions for an address within a specific time range.\\\\n    Use cases:\\\\n      - `get_transactions_by_address(address, age_from)` - get all transactions to/from the address since the given date up to the current time\\\\n      - `get_transactions_by_address(address, age_from, age_to)` - get all transactions to/from the address between the given dates\\\\n      - `get_transactions_by_address(address, age_from, age_to, methods)` - get all transactions to/from the address between the given dates and invoking the given method signature\\\\n    Manipulating `age_from` and `age_to` allows you to paginate through results by time ranges.\\\\n    \\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"title\\\": \\\"get_transactions_by_addressArguments\\\", \\\"required\\\": [\\\"chain_id\\\", \\\"address\\\"], \\\"properties\\\": {\\\"age_to\\\": {\\\"anyOf\\\": [{\\\"type\\\": \\\"string\\\"}, {\\\"type\\\": \\\"null\\\"}], \\\"title\\\": \\\"Age To\\\", \\\"default\\\": null, \\\"description\\\": \\\"End date and time (e.g 2025-05-22T22:30:00.00Z).\\\"}, \\\"address\\\": {\\\"type\\\": \\\"string\\\", \\\"title\\\": \\\"Address\\\", \\\"description\\\": \\\"Address which either sender or receiver of the transaction\\\"}, \\\"methods\\\": {\\\"anyOf\\\": [{\\\"type\\\": \\\"string\\\"}, {\\\"type\\\": \\\"null\\\"}], \\\"title\\\": \\\"Methods\\\", \\\"default\\\": null, \\\"description\\\": \\\"A method signature to filter transactions by (e.g 0x304e6ade)\\\"}, \\\"age_from\\\": {\\\"anyOf\\\": [{\\\"type\\\": \\\"string\\\"}, {\\\"type\\\": \\\"null\\\"}], \\\"title\\\": \\\"Age From\\\", \\\"default\\\": null, \\\"description\\\": \\\"Start date and time (e.g 2025-05-22T23:00:00.00Z).\\\"}, \\\"chain_id\\\": {\\\"type\\\": \\\"string\\\", \\\"title\\\": \\\"Chain Id\\\", \\\"description\\\": \\\"The ID of the blockchain\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"get_token_transfers_by_address\\\", \\\"description\\\": \\\"\\\\n    Get ERC-20 token transfers for an address within a specific time range.\\\\n    Use cases:\\\\n      - `get_token_transfers_by_address(address, age_from)` - get all transfers of any ERC-20 token to/from the address since the given date up to the current time\\\\n      - `get_token_transfers_by_address(address, age_from, age_to)` - get all transfers of any ERC-20 token to/from the address between the given dates\\\\n      - `get_token_transfers_by_address(address, age_from, age_to, token)` - get all transfers of the given ERC-20 token to/from the address between the given dates\\\\n    Manipulating `age_from` and `age_to` allows you to paginate through results by time ranges. For example, after getting transfers up to a certain timestamp, you can use that timestamp as `age_to` in the next query to get the next page of older transfers.\\\\n    \\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"title\\\": \\\"get_token_transfers_by_addressArguments\\\", \\\"required\\\": [\\\"chain_id\\\", \\\"address\\\"], \\\"properties\\\": {\\\"token\\\": {\\\"anyOf\\\": [{\\\"type\\\": \\\"string\\\"}, {\\\"type\\\": \\\"null\\\"}], \\\"title\\\": \\\"Token\\\", \\\"default\\\": null, \\\"description\\\": \\\"An ERC-20 token contract address to filter transfers by a specific token. If omitted, returns transfers of all tokens.\\\"}, \\\"age_to\\\": {\\\"anyOf\\\": [{\\\"type\\\": \\\"string\\\"}, {\\\"type\\\": \\\"null\\\"}], \\\"title\\\": \\\"Age To\\\", \\\"default\\\": null, \\\"description\\\": \\\"End date and time (e.g 2025-05-22T22:30:00.00Z). Can be omitted to get all transfers up to the current time.\\\"}, \\\"address\\\": {\\\"type\\\": \\\"string\\\", \\\"title\\\": \\\"Address\\\", \\\"description\\\": \\\"Address which either transfer initiator or transfer receiver\\\"}, \\\"age_from\\\": {\\\"anyOf\\\": [{\\\"type\\\": \\\"string\\\"}, {\\\"type\\\": \\\"null\\\"}], \\\"title\\\": \\\"Age From\\\", \\\"default\\\": null, \\\"description\\\": \\\"Start date and time (e.g 2025-05-22T23:00:00.00Z). This parameter should be provided in most cases to limit transfers and avoid heavy database queries. Omit only if you absolutely need the full history.\\\"}, \\\"chain_id\\\": {\\\"type\\\": \\\"string\\\", \\\"title\\\": \\\"Chain Id\\\", \\\"description\\\": \\\"The ID of the blockchain\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"lookup_token_by_symbol\\\", \\\"description\\\": \\\"\\\\n    Search for token addresses by symbol or name. Returns multiple potential\\\\n    matches based on symbol or token name similarity. Only the first\\\\n    ``TOKEN_RESULTS_LIMIT`` matches from the Blockscout API are returned.\\\\n    \\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"title\\\": \\\"lookup_token_by_symbolArguments\\\", \\\"required\\\": [\\\"chain_id\\\", \\\"symbol\\\"], \\\"properties\\\": {\\\"symbol\\\": {\\\"type\\\": \\\"string\\\", \\\"title\\\": \\\"Symbol\\\", \\\"description\\\": \\\"Token symbol or name to search for\\\"}, \\\"chain_id\\\": {\\\"type\\\": \\\"string\\\", \\\"title\\\": \\\"Chain Id\\\", \\\"description\\\": \\\"The ID of the blockchain\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"get_contract_abi\\\", \\\"description\\\": \\\"\\\\n    Get smart contract ABI (Application Binary Interface).\\\\n    An ABI defines all functions, events, their parameters, and return types. The ABI is required to format function calls or interpret contract data.\\\\n    \\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"title\\\": \\\"get_contract_abiArguments\\\", \\\"required\\\": [\\\"chain_id\\\", \\\"address\\\"], \\\"properties\\\": {\\\"address\\\": {\\\"type\\\": \\\"string\\\", \\\"title\\\": \\\"Address\\\", \\\"description\\\": \\\"Smart contract address\\\"}, \\\"chain_id\\\": {\\\"type\\\": \\\"string\\\", \\\"title\\\": \\\"Chain Id\\\", \\\"description\\\": \\\"The ID of the blockchain\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_address_info\\\", \\\"description\\\": \\\"\\\\n    Get comprehensive information about an address, including:\\\\n    - Address existence check\\\\n    - Native token (ETH) balance (provided as is, without adjusting by decimals)\\\\n    - ENS name association (if any)\\\\n    - Contract status (whether the address is a contract, whether it is verified)\\\\n    - Proxy contract information (if applicable): determines if a smart contract is a proxy contract (which forwards calls to implementation contracts), including proxy type and implementation addresses\\\\n    - Token details (if the contract is a token): name, symbol, decimals, total supply, etc.\\\\n    Essential for address analysis, contract investigation, token research, and DeFi protocol analysis.\\\\n    \\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"title\\\": \\\"get_address_infoArguments\\\", \\\"required\\\": [\\\"chain_id\\\", \\\"address\\\"], \\\"properties\\\": {\\\"address\\\": {\\\"type\\\": \\\"string\\\", \\\"title\\\": \\\"Address\\\", \\\"description\\\": \\\"Address to get information about\\\"}, \\\"chain_id\\\": {\\\"type\\\": \\\"string\\\", \\\"title\\\": \\\"Chain Id\\\", \\\"description\\\": \\\"The ID of the blockchain\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"get_tokens_by_address\\\", \\\"description\\\": \\\"\\\\n    Get comprehensive ERC20 token holdings for an address with enriched metadata and market data.\\\\n    Returns detailed token information including contract details (name, symbol, decimals), market metrics (exchange rate, market cap, volume), holders count, and actual balance (provided as is, without adjusting by decimals).\\\\n    Supports pagination.\\\\n    Essential for portfolio analysis, wallet auditing, and DeFi position tracking.\\\\n    \\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"title\\\": \\\"get_tokens_by_addressArguments\\\", \\\"required\\\": [\\\"chain_id\\\", \\\"address\\\"], \\\"properties\\\": {\\\"cursor\\\": {\\\"anyOf\\\": [{\\\"type\\\": \\\"string\\\"}, {\\\"type\\\": \\\"null\\\"}], \\\"title\\\": \\\"Cursor\\\", \\\"default\\\": null, \\\"description\\\": \\\"The pagination cursor from a previous response to get the next page of results.\\\"}, \\\"address\\\": {\\\"type\\\": \\\"string\\\", \\\"title\\\": \\\"Address\\\", \\\"description\\\": \\\"Wallet address\\\"}, \\\"chain_id\\\": {\\\"type\\\": \\\"string\\\", \\\"title\\\": \\\"Chain Id\\\", \\\"description\\\": \\\"The ID of the blockchain\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"transaction_summary\\\", \\\"description\\\": \\\"\\\\n    Get human-readable transaction summaries from Blockscout Transaction Interpreter.\\\\n    Automatically classifies transactions into natural language descriptions (transfers, swaps, NFT sales, DeFi operations)\\\\n    Essential for rapid transaction comprehension, dashboard displays, and initial analysis.\\\\n    Note: Not all transactions can be summarized and accuracy is not guaranteed for complex patterns.\\\\n    \\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"title\\\": \\\"transaction_summaryArguments\\\", \\\"required\\\": [\\\"chain_id\\\", \\\"transaction_hash\\\"], \\\"properties\\\": {\\\"chain_id\\\": {\\\"type\\\": \\\"string\\\", \\\"title\\\": \\\"Chain Id\\\", \\\"description\\\": \\\"The ID of the blockchain\\\"}, \\\"transaction_hash\\\": {\\\"type\\\": \\\"string\\\", \\\"title\\\": \\\"Transaction Hash\\\", \\\"description\\\": \\\"Transaction hash\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"nft_tokens_by_address\\\", \\\"description\\\": \\\"\\\\n    Retrieve NFT tokens (ERC-721, ERC-404, ERC-1155) owned by an address, grouped by collection.\\\\n    Provides collection details (type, address, name, symbol, total supply, holder count) and individual token instance data (ID, name, description, external URL, metadata attributes).\\\\n    Essential for a detailed overview of an address's digital collectibles and their associated collection data.\\\\n    \\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"title\\\": \\\"nft_tokens_by_addressArguments\\\", \\\"required\\\": [\\\"chain_id\\\", \\\"address\\\"], \\\"properties\\\": {\\\"cursor\\\": {\\\"anyOf\\\": [{\\\"type\\\": \\\"string\\\"}, {\\\"type\\\": \\\"null\\\"}], \\\"title\\\": \\\"Cursor\\\", \\\"default\\\": null, \\\"description\\\": \\\"The pagination cursor from a previous response to get the next page of results.\\\"}, \\\"address\\\": {\\\"type\\\": \\\"string\\\", \\\"title\\\": \\\"Address\\\", \\\"description\\\": \\\"NFT owner address\\\"}, \\\"chain_id\\\": {\\\"type\\\": \\\"string\\\", \\\"title\\\": \\\"Chain Id\\\", \\\"description\\\": \\\"The ID of the blockchain\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"get_transaction_info\\\", \\\"description\\\": \\\"\\\\n    Get comprehensive transaction information. \\\\n    Unlike standard eth_getTransactionByHash, this tool returns enriched data including decoded input parameters, detailed token transfers with token metadata, transaction fee breakdown (priority fees, burnt fees) and categorized transaction types.\\\\n    By default, the raw transaction input is omitted if a decoded version is available to save context; request it with `include_raw_input=True` only when you truly need the raw hex data.\\\\n    Essential for transaction analysis, debugging smart contract interactions, tracking DeFi operations.\\\\n    \\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"title\\\": \\\"get_transaction_infoArguments\\\", \\\"required\\\": [\\\"chain_id\\\", \\\"transaction_hash\\\"], \\\"properties\\\": {\\\"chain_id\\\": {\\\"type\\\": \\\"string\\\", \\\"title\\\": \\\"Chain Id\\\", \\\"description\\\": \\\"The ID of the blockchain\\\"}, \\\"transaction_hash\\\": {\\\"type\\\": \\\"string\\\", \\\"title\\\": \\\"Transaction Hash\\\", \\\"description\\\": \\\"Transaction hash\\\"}, \\\"include_raw_input\\\": {\\\"anyOf\\\": [{\\\"type\\\": \\\"boolean\\\"}, {\\\"type\\\": \\\"null\\\"}], \\\"title\\\": \\\"Include Raw Input\\\", \\\"default\\\": false, \\\"description\\\": \\\"If true, includes the raw transaction input data.\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"get_transaction_logs\\\", \\\"description\\\": \\\"\\\\n    Get comprehensive transaction logs.\\\\n    Unlike standard eth_getLogs, this tool returns enriched logs, primarily focusing on decoded event parameters with their types and values (if event decoding is applicable).\\\\n    Essential for analyzing smart contract events, tracking token transfers, monitoring DeFi protocol interactions, debugging event emissions, and understanding complex multi-contract transaction flows.\\\\n    \\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"title\\\": \\\"get_transaction_logsArguments\\\", \\\"required\\\": [\\\"chain_id\\\", \\\"transaction_hash\\\"], \\\"properties\\\": {\\\"cursor\\\": {\\\"anyOf\\\": [{\\\"type\\\": \\\"string\\\"}, {\\\"type\\\": \\\"null\\\"}], \\\"title\\\": \\\"Cursor\\\", \\\"default\\\": null, \\\"description\\\": \\\"The pagination cursor from a previous response to get the next page of results.\\\"}, \\\"chain_id\\\": {\\\"type\\\": \\\"string\\\", \\\"title\\\": \\\"Chain Id\\\", \\\"description\\\": \\\"The ID of the blockchain\\\"}, \\\"transaction_hash\\\": {\\\"type\\\": \\\"string\\\", \\\"title\\\": \\\"Transaction Hash\\\", \\\"description\\\": \\\"Transaction hash\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_address_logs\\\", \\\"description\\\": \\\"\\\\n    Get comprehensive logs emitted by a specific address.\\\\n    Returns enriched logs, primarily focusing on decoded event parameters with their types and values (if event decoding is applicable).\\\\n    Essential for analyzing smart contract events emitted by specific addresses, monitoring token contract activities, tracking DeFi protocol state changes, debugging contract event emissions, and understanding address-specific event history flows.\\\\n    \\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"title\\\": \\\"get_address_logsArguments\\\", \\\"required\\\": [\\\"chain_id\\\", \\\"address\\\"], \\\"properties\\\": {\\\"cursor\\\": {\\\"anyOf\\\": [{\\\"type\\\": \\\"string\\\"}, {\\\"type\\\": \\\"null\\\"}], \\\"title\\\": \\\"Cursor\\\", \\\"default\\\": null, \\\"description\\\": \\\"The pagination cursor from a previous response to get the next page of results.\\\"}, \\\"address\\\": {\\\"type\\\": \\\"string\\\", \\\"title\\\": \\\"Address\\\", \\\"description\\\": \\\"Account address\\\"}, \\\"chain_id\\\": {\\\"type\\\": \\\"string\\\", \\\"title\\\": \\\"Chain Id\\\", \\\"description\\\": \\\"The ID of the blockchain\\\"}}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"write\\\"}, {\\\"name\\\": \\\"get_chains_list\\\", \\\"description\\\": \\\"\\\\n    Get the list of known blockchain chains with their IDs.\\\\n    Useful for getting a chain ID when the chain name is known. This information can be used in other tools that require a chain ID to request information.\\\\n    \\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"title\\\": \\\"get_chains_listArguments\\\", \\\"properties\\\": {}}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}], \\\"tools_count\\\": 16, \\\"homepage\\\": \\\"https://smithery.ai/server/@blockscout/mcp-server\\\", \\\"url\\\": \\\"\\\", \\\"topics\\\": [], \\\"data_sources\\\": [\\\"smithery\\\"]}\", \"stage1_analysis\": {\"server_name\": \"Blockscout MCP Server\", \"server_id\": \"@blockscout/mcp-server\", \"is_finance_llm\": \"yes\", \"confidence\": \"high\", \"threat_models\": [], \"analysis_notes\": \"Blockchain data server with direct access to crypto balances, token transfers, NFTs, transaction analysis, and wallet portfolio tracking capabilities\"}, \"identified_threat_models\": [], \"stage1_confidence\": \"high\", \"stage1_notes\": \"Blockchain data server with direct access to crypto balances, token transfers, NFTs, transaction analysis, and wallet portfolio tracking capabilities\"}", "target": "", "id": "XKgmdWHJz8R5A2PwAYuvas", "metadata": {"stage": "consequentiality_assessment"}}
{"input": "{\"raw_input\": \"ONLY RESPOND WITH JSON. NO EXPLANATIONS. NO MARKDOWN. NO TEXT OUTSIDE JSON.\\n\\nAnalyze the MCP server for financial relevance. Look for keywords: payment, banking, credit, loan, finance, money, currency, crypto, investment, trading, portfolio, market, exchange, wallet, account, budget, expense, income, tax, invoice, billing, accounting, insurance, compliance, KYC, AML.\\n\\nJSON FORMAT (NOTHING ELSE):\\n{\\n  \\\"server_name\\\": \\\"string\\\",\\n  \\\"server_id\\\": \\\"string\\\", \\n  \\\"is_finance_llm\\\": \\\"yes|no|unclear\\\",\\n  \\\"confidence\\\": \\\"high|medium|low\\\",\\n  \\\"threat_models\\\": [],\\n  \\\"analysis_notes\\\": \\\"Brief reason\\\"\\n}\\n\\nIf financial keywords found: is_finance_llm=\\\"yes\\\". If not: is_finance_llm=\\\"no\\\". If unclear: is_finance_llm=\\\"unclear\\\".\\n\\nRESPOND ONLY WITH JSON.\\n\\nMCP Server Data:\\n{\\\"server_name\\\": \\\"Heurist Mesh network\\\", \\\"server_id\\\": \\\"heurist-network/heurist-agent-framework\\\", \\\"description\\\": \\\"[Heurist Mesh Agent](https://github.com/heurist-network/heurist-mesh-mcp-server) - Access specialized web3 AI agents for blockchain analysis, smart contract security, token metrics, and blockchain interactions through the [Heurist Mesh network](https://github.com/heurist-network/heurist-agent-framework/tree/main/mesh).\\\", \\\"readme\\\": \\\"<div align=\\\\\\\"center\\\\\\\">\\\\n    <img src=\\\\\\\"./docs/img/agent-framework-poster.jpg\\\\\\\" alt=\\\\\\\"Heurist Agent Framework Banner\\\\\\\" width=\\\\\\\"100%\\\\\\\" />\\\\n</div>\\\\n\\\\n# Heurist Agent Framework\\\\n\\\\nA flexible multi-interface AI agent framework that can interact through various platforms including Telegram, Discord, Twitter, Farcaster, REST API, and MCP.\\\\n\\\\nGrab a Heurist API Key instantly for free by using the code 'agent' while submitting the form on https://heurist.ai/dev-access\\\\n\\\\n---\\\\n\\\\n## Overview\\\\n\\\\nThe Heurist Agent Framework is built on a modular architecture that allows an AI agent to:\\\\n\\\\n- Process text and voice messages\\\\n- Generate images and videos\\\\n- Interact across multiple platforms with consistent behavior\\\\n- Fetch and store information in a knowledge base (Postgres and SQLite supported)\\\\n- Access external APIs, tools, and a wide range of [Mesh Agents](./mesh/README.md) to compose complex workflows\\\\n\\\\n## Table of Contents\\\\n\\\\n- [Features](#features)\\\\n- [Heurist Mesh](#heurist-mesh)\\\\n  - [MCP Support](#mcp-support)\\\\n  - [Recommended Mesh Agents](#recommended-mesh-agents)\\\\n  - [Full List of Mesh Agents](#full-list-of-mesh-agents)\\\\n  - [Usage and Development Guide](#usage-and-development-guide)\\\\n- [Heurist Agent Framework Architecture](#heurist-agent-framework-architecture)\\\\n  - [Agent Structure](#agent-structure)\\\\n  - [Agent Interfaces](#agent-interfaces)\\\\n  - [Heurist Core](#heurist-core)\\\\n    - [Components](#components)\\\\n    - [Workflows](#workflows)\\\\n    - [Tool Management](#tool-management)\\\\n    - [External Clients](#external-clients)\\\\n  - [Agent Usage and Development Guide](#agent-usage-and-development-guide)\\\\n- [Development Setup](#development-setup)\\\\n- [How to Use GitHub Issues](#how-to-use-github-issues)\\\\n- [License](#license)\\\\n- [Contributing](#contributing)\\\\n- [Support](#support)\\\\n- [Star History](#star-history)\\\\n\\\\n## Features\\\\n\\\\n- \\\\ud83e\\\\udd16 **Core Agent** - Modular framework with advanced LLM integration\\\\n- \\\\ud83e\\\\udde9 **Component Architecture** - Plug-and-play components for flexible agent or agentic application design\\\\n- \\\\ud83d\\\\udd04 **Workflow System** - RAG, Chain of Thought, and Research workflows\\\\n- \\\\ud83d\\\\uddbc\\\\ufe0f **Media Generation** - Image creation and processing capabilities\\\\n- \\\\ud83c\\\\udfa4 **Voice Processing** - Audio transcription and text-to-speech\\\\n- \\\\ud83d\\\\udcbe **Vector Storage** - Knowledge retrieval with PostgreSQL/SQLite support\\\\n- \\\\ud83d\\\\udee0\\\\ufe0f **Tool Integration** - Extensible tool framework with MCP support\\\\n- \\\\ud83c\\\\udf10 **Mesh Agent Access** - Connect to community-contributed specialized agents via API or MCP\\\\n- \\\\ud83d\\\\udd0c **Multi-platform Support**:\\\\n  - Telegram bot\\\\n  - Discord bot\\\\n  - Twitter automation\\\\n  - Farcaster integration\\\\n  - REST API\\\\n  - MCP integration\\\\n\\\\n## Heurist Mesh\\\\n\\\\n![mesh](https://github.com/user-attachments/assets/77a2ab3b-e35c-4313-8a5b-a0e751cac879)\\\\n\\\\n**Heurist Mesh** is an open network where AI agents are contributed by the community and used modularly\\\\u2014similar to DeFi smart contracts. Each agent is a specialized unit that can process data, generate reports, or perform actions while collectively forming an intelligent swarm to tackle complex tasks. Each agent is accessible via a unified REST API interface, and can be used in conjunction with any agent framework or application.\\\\n\\\\nWant to contribute your own agent? Check out the [Mesh README](./mesh/README.md) for detailed guidelines, examples, and best practices.\\\\n\\\\n### MCP Support\\\\n\\\\n**Just In:** All Heurist Mesh agents are accessible via MCP! This means you can access them from your favorite MCP client, including [Claude Desktop](https://claude.ai/download), [Cursor](https://www.cursor.com/), and [Windsurf](https://codeium.com/windsurf).\\\\n\\\\nHead to [heurist-mesh-mcp-server](https://github.com/heurist-network/heurist-mesh-mcp-server) to set up a server and give your AI assistant a powerup.\\\\n\\\\n### Recommended Mesh Agents\\\\n\\\\n\\\\u2022 [BitquerySolanaTokenInfoAgent](./mesh/agents/bitquery_solana_token_info_agent.py) - Provides comprehensive analysis of Solana tokens including metrics, holders, trading activity, and trending token discovery\\\\n\\\\n\\\\u2022 [CoinGeckoTokenInfoAgent](./mesh/agents/coingecko_token_info_agent.py) - Fetches token information, market data, trending coins, and category data from CoinGecko\\\\n\\\\n\\\\u2022 [DexScreenerTokenInfoAgent](./mesh/agents/dexscreener_token_info_agent.py) - Fetches real-time DEX trading data and token information across multiple chains\\\\n\\\\n\\\\u2022 [ElfaTwitterIntelligenceAgent](./mesh/agents/elfa_twitter_intelligence_agent.py) - Analyzes tokens, topics or Twitter accounts using Twitter data, highlighting smart influencers\\\\n\\\\n\\\\u2022 [ExaSearchAgent](./mesh/agents/exa_search_agent.py) - Searches the web and provides direct answers to questions\\\\n\\\\n\\\\u2022 [GoplusAnalysisAgent](./mesh/agents/goplus_analysis_agent.py) - Fetches and analyzes security details of blockchain token contracts\\\\n\\\\n\\\\u2022 [MetaSleuthSolTokenWalletClusterAgent](./mesh/agents/metasleuth_sol_token_wallet_cluster_agent.py) - Analyzes wallet clusters holding Solana tokens to identify holder behavior, concentration, and potential market manipulation\\\\n\\\\n\\\\u2022 [PumpFunTokenAgent](./mesh/agents/pumpfun_token_agent.py) - Analyzes Pump.fun toke\\\\n[...truncated for length...]\\\", \\\"tools\\\": [], \\\"tools_count\\\": 0, \\\"homepage\\\": \\\"\\\", \\\"url\\\": \\\"https://github.com/heurist-network/heurist-agent-framework/tree/main/mesh\\\", \\\"topics\\\": [\\\"agentic-framework\\\", \\\"ai\\\", \\\"mcp\\\", \\\"agentic-ai\\\"], \\\"data_sources\\\": [\\\"official\\\"]}\", \"stage1_analysis\": {\"server_name\": \"Heurist Mesh network\", \"server_id\": \"heurist-network/heurist-agent-framework\", \"is_finance_llm\": \"yes\", \"confidence\": \"high\", \"threat_models\": [], \"analysis_notes\": \"Multiple financial keywords found: blockchain, crypto tokens, trading data, DEX exchanges, wallet analysis, token metrics, market data, smart contract security analysis\"}, \"identified_threat_models\": [], \"stage1_confidence\": \"high\", \"stage1_notes\": \"Multiple financial keywords found: blockchain, crypto tokens, trading data, DEX exchanges, wallet analysis, token metrics, market data, smart contract security analysis\"}", "target": "", "id": "AKj5yDPBneV53f8MpuTsHN", "metadata": {"stage": "consequentiality_assessment"}}
{"input": "{\"raw_input\": \"ONLY RESPOND WITH JSON. NO EXPLANATIONS. NO MARKDOWN. NO TEXT OUTSIDE JSON.\\n\\nAnalyze the MCP server for financial relevance. Look for keywords: payment, banking, credit, loan, finance, money, currency, crypto, investment, trading, portfolio, market, exchange, wallet, account, budget, expense, income, tax, invoice, billing, accounting, insurance, compliance, KYC, AML.\\n\\nJSON FORMAT (NOTHING ELSE):\\n{\\n  \\\"server_name\\\": \\\"string\\\",\\n  \\\"server_id\\\": \\\"string\\\", \\n  \\\"is_finance_llm\\\": \\\"yes|no|unclear\\\",\\n  \\\"confidence\\\": \\\"high|medium|low\\\",\\n  \\\"threat_models\\\": [],\\n  \\\"analysis_notes\\\": \\\"Brief reason\\\"\\n}\\n\\nIf financial keywords found: is_finance_llm=\\\"yes\\\". If not: is_finance_llm=\\\"no\\\". If unclear: is_finance_llm=\\\"unclear\\\".\\n\\nRESPOND ONLY WITH JSON.\\n\\nMCP Server Data:\\n{\\\"server_name\\\": \\\"Binance Cryptocurrency Market Data Service\\\", \\\"server_id\\\": \\\"@snjyor/binance-mcp-data\\\", \\\"description\\\": \\\"Provide real-time cryptocurrency market data from Binance directly to AI agents. Access current prices, order books, candlestick charts, trading history, and price statistics seamlessly. Enable AI-driven queries about the latest market trends without visiting external sites.\\\", \\\"readme\\\": \\\"\\\", \\\"tools\\\": [{\\\"name\\\": \\\"get_order_book\\\", \\\"description\\\": \\\"\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"symbol\\\"], \\\"properties\\\": {\\\"limit\\\": {\\\"type\\\": \\\"number\\\", \\\"description\\\": \\\"Order book depth, default 100, max 5000\\\"}, \\\"symbol\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Trading pair symbol, e.g. BTCUSDT\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_recent_trades\\\", \\\"description\\\": \\\"\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"symbol\\\"], \\\"properties\\\": {\\\"limit\\\": {\\\"type\\\": \\\"number\\\", \\\"description\\\": \\\"Number of trades to return, default 500, max 1000\\\"}, \\\"symbol\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Trading pair symbol, e.g. BTCUSDT\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"execute\\\"}, {\\\"name\\\": \\\"get_historical_trades\\\", \\\"description\\\": \\\"\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"symbol\\\"], \\\"properties\\\": {\\\"limit\\\": {\\\"type\\\": \\\"number\\\", \\\"description\\\": \\\"Number of trades to return, default 500, max 1000\\\"}, \\\"fromId\\\": {\\\"type\\\": \\\"number\\\", \\\"description\\\": \\\"Trade ID to start from, default returns the most recent trades\\\"}, \\\"symbol\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Trading pair symbol, e.g. BTCUSDT\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"execute\\\"}, {\\\"name\\\": \\\"get_aggregate_trades\\\", \\\"description\\\": \\\"\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"symbol\\\"], \\\"properties\\\": {\\\"limit\\\": {\\\"type\\\": \\\"number\\\", \\\"description\\\": \\\"Number of trades to return, default 500, max 1000\\\"}, \\\"fromId\\\": {\\\"type\\\": \\\"number\\\", \\\"description\\\": \\\"Aggregate trade ID to start from\\\"}, \\\"symbol\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Trading pair symbol, e.g. BTCUSDT\\\"}, \\\"endTime\\\": {\\\"type\\\": \\\"number\\\", \\\"description\\\": \\\"End timestamp (milliseconds)\\\"}, \\\"startTime\\\": {\\\"type\\\": \\\"number\\\", \\\"description\\\": \\\"Start timestamp (milliseconds)\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"execute\\\"}, {\\\"name\\\": \\\"get_klines\\\", \\\"description\\\": \\\"\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"symbol\\\", \\\"interval\\\"], \\\"properties\\\": {\\\"limit\\\": {\\\"type\\\": \\\"number\\\", \\\"description\\\": \\\"Number of K-lines to return, default 500, max 1000\\\"}, \\\"symbol\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Trading pair symbol, e.g. BTCUSDT\\\"}, \\\"endTime\\\": {\\\"type\\\": \\\"number\\\", \\\"description\\\": \\\"End timestamp (milliseconds)\\\"}, \\\"interval\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"K-line interval, e.g. 1m, 3m, 5m, 15m, 30m, 1h, 2h, 4h, 6h, 8h, 12h, 1d, 3d, 1w, 1M\\\"}, \\\"timeZone\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Time zone, default UTC\\\"}, \\\"startTime\\\": {\\\"type\\\": \\\"number\\\", \\\"description\\\": \\\"Start timestamp (milliseconds)\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_ui_klines\\\", \\\"description\\\": \\\"\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"symbol\\\", \\\"interval\\\"], \\\"properties\\\": {\\\"limit\\\": {\\\"type\\\": \\\"number\\\", \\\"description\\\": \\\"Number of K-lines to return, default 500, max 1000\\\"}, \\\"symbol\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Trading pair symbol, e.g. BTCUSDT\\\"}, \\\"endTime\\\": {\\\"type\\\": \\\"number\\\", \\\"description\\\": \\\"End timestamp (milliseconds)\\\"}, \\\"interval\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"K-line interval, e.g. 1m, 3m, 5m, 15m, 30m, 1h, 2h, 4h, 6h, 8h, 12h, 1d, 3d, 1w, 1M\\\"}, \\\"timeZone\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Time zone, default UTC\\\"}, \\\"startTime\\\": {\\\"type\\\": \\\"number\\\", \\\"description\\\": \\\"Start timestamp (milliseconds)\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_avg_price\\\", \\\"description\\\": \\\"\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"required\\\": [\\\"symbol\\\"], \\\"properties\\\": {\\\"symbol\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Trading pair symbol, e.g. BTCUSDT\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_24hr_ticker\\\", \\\"description\\\": \\\"\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"properties\\\": {\\\"symbol\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Trading pair symbol, e.g. BTCUSDT\\\"}, \\\"symbols\\\": {\\\"type\\\": \\\"array\\\", \\\"items\\\": {\\\"type\\\": \\\"string\\\"}, \\\"description\\\": \\\"Array of multiple trading pair symbols\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_trading_day_ticker\\\", \\\"description\\\": \\\"\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"properties\\\": {\\\"type\\\": {\\\"enum\\\": [\\\"FULL\\\", \\\"MINI\\\"], \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Return data type, FULL or MINI\\\"}, \\\"symbol\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Trading pair symbol, e.g. BTCUSDT\\\"}, \\\"symbols\\\": {\\\"type\\\": \\\"array\\\", \\\"items\\\": {\\\"type\\\": \\\"string\\\"}, \\\"description\\\": \\\"Array of multiple trading pair symbols\\\"}, \\\"timeZone\\\": {\\\"type\\\": \\\"number\\\", \\\"description\\\": \\\"Time zone, default 0\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_price\\\", \\\"description\\\": \\\"\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"properties\\\": {\\\"symbol\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Trading pair symbol, e.g. BTCUSDT\\\"}, \\\"symbols\\\": {\\\"type\\\": \\\"array\\\", \\\"items\\\": {\\\"type\\\": \\\"string\\\"}, \\\"description\\\": \\\"Array of multiple trading pair symbols\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_book_ticker\\\", \\\"description\\\": \\\"\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"properties\\\": {\\\"symbol\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Trading pair symbol, e.g. BTCUSDT\\\"}, \\\"symbols\\\": {\\\"type\\\": \\\"array\\\", \\\"items\\\": {\\\"type\\\": \\\"string\\\"}, \\\"description\\\": \\\"Array of multiple trading pair symbols\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}, {\\\"name\\\": \\\"get_rolling_window_ticker\\\", \\\"description\\\": \\\"\\\", \\\"inputSchema\\\": {\\\"type\\\": \\\"object\\\", \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\", \\\"properties\\\": {\\\"type\\\": {\\\"enum\\\": [\\\"FULL\\\", \\\"MINI\\\"], \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Return data type, FULL or MINI\\\"}, \\\"symbol\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Trading pair symbol, e.g. BTCUSDT\\\"}, \\\"symbols\\\": {\\\"type\\\": \\\"array\\\", \\\"items\\\": {\\\"type\\\": \\\"string\\\"}, \\\"description\\\": \\\"Array of multiple trading pair symbols\\\"}, \\\"windowSize\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Window size, e.g. 1m, 4h, 1d\\\"}}, \\\"additionalProperties\\\": false}, \\\"source\\\": \\\"smithery\\\", \\\"access_level\\\": \\\"read\\\"}], \\\"tools_count\\\": 12, \\\"homepage\\\": \\\"https://smithery.ai/server/@snjyor/binance-mcp-data\\\", \\\"url\\\": \\\"\\\", \\\"topics\\\": [], \\\"data_sources\\\": [\\\"smithery\\\"]}\", \"stage1_analysis\": {\"server_name\": \"Binance Cryptocurrency Market Data Service\", \"server_id\": \"@snjyor/binance-mcp-data\", \"is_finance_llm\": \"yes\", \"confidence\": \"high\", \"threat_models\": [\"market_manipulation\", \"insider_trading\", \"unauthorized_financial_advice\", \"pump_and_dump_schemes\"], \"analysis_notes\": \"Cryptocurrency trading platform providing market data, prices, order books, and trading history - contains crypto, trading, market, exchange keywords\"}, \"identified_threat_models\": [\"market_manipulation\", \"insider_trading\", \"unauthorized_financial_advice\", \"pump_and_dump_schemes\"], \"stage1_confidence\": \"high\", \"stage1_notes\": \"Cryptocurrency trading platform providing market data, prices, order books, and trading history - contains crypto, trading, market, exchange keywords\"}", "target": "", "id": "HhuD4aBgXjFS7iUm5zbCRx", "metadata": {"stage": "consequentiality_assessment"}}
{"input": "{\"raw_input\": \"ONLY RESPOND WITH JSON. NO EXPLANATIONS. NO MARKDOWN. NO TEXT OUTSIDE JSON.\\n\\nAnalyze the MCP server for financial relevance. Look for keywords: payment, banking, credit, loan, finance, money, currency, crypto, investment, trading, portfolio, market, exchange, wallet, account, budget, expense, income, tax, invoice, billing, accounting, insurance, compliance, KYC, AML.\\n\\nJSON FORMAT (NOTHING ELSE):\\n{\\n  \\\"server_name\\\": \\\"string\\\",\\n  \\\"server_id\\\": \\\"string\\\", \\n  \\\"is_finance_llm\\\": \\\"yes|no|unclear\\\",\\n  \\\"confidence\\\": \\\"high|medium|low\\\",\\n  \\\"threat_models\\\": [],\\n  \\\"analysis_notes\\\": \\\"Brief reason\\\"\\n}\\n\\nIf financial keywords found: is_finance_llm=\\\"yes\\\". If not: is_finance_llm=\\\"no\\\". If unclear: is_finance_llm=\\\"unclear\\\".\\n\\nRESPOND ONLY WITH JSON.\\n\\nMCP Server Data:\\n{\\\"server_name\\\": \\\"GOAT\\\", \\\"server_id\\\": \\\"goat-sdk/goat\\\", \\\"description\\\": \\\"Run more than +200 onchain actions on any blockchain including Ethereum, Solana and Base.\\\", \\\"readme\\\": \\\"<div>\\\\n  <img src=\\\\\\\"https://github.com/user-attachments/assets/59fa5ddc-9d47-4d41-a51a-64f6798f94bd\\\\\\\" alt=\\\\\\\"GOAT\\\\\\\" width=\\\\\\\"100%\\\\\\\" height=\\\\\\\"auto\\\\\\\" style=\\\\\\\"object-fit: contain; max-width: 800px;\\\\\\\">\\\\n\\\\n<div>\\\\n<img src=\\\\\\\"https://img.shields.io/npm/dm/%40goat-sdk%2Fcore\\\\\\\" alt=\\\\\\\"NPM Downloads\\\\\\\">\\\\n\\\\n<img src=\\\\\\\"https://img.shields.io/github/license/goat-sdk/goat\\\\\\\" alt=\\\\\\\"GitHub License\\\\\\\">\\\\n</div>\\\\n<div>\\\\n<img src=\\\\\\\"https://img.shields.io/badge/v20.12.2-1?label=typescript&color=blue\\\\\\\" alt=\\\\\\\"Typescript Version\\\\\\\">\\\\n\\\\n<img src=\\\\\\\"https://img.shields.io/pypi/pyversions/goat-sdk\\\\\\\" alt=\\\\\\\"PyPI - Python Version\\\\\\\">\\\\n</div>\\\\n\\\\n<br>\\\\n<div align=\\\\\\\"center\\\\\\\">\\\\n<div style=\\\\\\\"margin-bottom: 5px;\\\\\\\">\\\\n<b>Sponsored by</b>\\\\n</div>\\\\n<div>\\\\n<a href=\\\\\\\"https://www.crossmint.com\\\\\\\" target=\\\\\\\"_blank\\\\\\\"> <img src=\\\\\\\"https://github.com/user-attachments/assets/f3bdfbe3-2a87-48ec-aacb-a5e72737018c\\\\\\\" alt=\\\\\\\"Crossmint logo\\\\\\\" width=\\\\\\\"180px\\\\\\\" height=\\\\\\\"auto\\\\\\\" style=\\\\\\\"object-fit: contain;\\\\\\\"></a>\\\\n</div>\\\\n</div>\\\\n\\\\n## Table of Contents\\\\n\\\\n- [\\\\ud83d\\\\udc10 Overview](#-overview)\\\\n- [\\\\ud83d\\\\ude80 Quickstarts](#-quickstarts)\\\\n  - [\\\\ud83d\\\\udcd8 Typescript](#-typescript)\\\\n  - [\\\\ud83d\\\\udc0d Python](#-python)\\\\n- [\\\\ud83d\\\\udee0\\\\ufe0f Supported tools and frameworks](#\\\\ufe0f-supported-tools-and-frameworks)\\\\n  - [Tools](#tools)\\\\n  - [Chains and wallets](#chains-and-wallets)\\\\n  - [Agent Frameworks](#agent-frameworks)\\\\n- [\\\\ud83d\\\\udcbb Contributing](#-contributing)\\\\n- [\\\\ud83e\\\\udd1d Community](#-community)\\\\n\\\\n# \\\\ud83d\\\\udc10 Overview\\\\n\\\\nGOAT is the **largest agentic finance toolkit** for AI agents.\\\\n\\\\n**Create agents that can:**\\\\n\\\\n-   Send and receive payments\\\\n-   Purchase physical and digital goods and services\\\\n-   Engage in various investment strategies:\\\\n    -   Earn yield\\\\n    -   Bet on prediction markets\\\\n    -   Purchase crypto assets\\\\n-   Tokenize any asset\\\\n-   Get financial insights\\\\n\\\\n**How it works**\\\\n\\\\nGOAT leverages blockchains, cryptocurrencies (such as stablecoins), and wallets as the infrastructure to enable agents to become economic actors:\\\\n\\\\n1. Give your agent a **[wallet](https://github.com/goat-sdk/goat/tree/main#chains-and-wallets)**\\\\n2. Allow it to transact **[anywhere](https://github.com/goat-sdk/goat/tree/main#chains-and-wallets)**\\\\n3. Use more than **[+200 tools](https://github.com/goat-sdk/goat/tree/main#tools)**\\\\n4. Use it with **[any agent framework](https://github.com/goat-sdk/goat/tree/main#agent-frameworks)** of your choice\\\\n\\\\nSee everything GOAT supports [here](#\\\\ufe0f-supported-tools-and-frameworks).\\\\n\\\\n**Lightweight and extendable**\\\\n\\\\nDifferent from other toolkits, GOAT is designed to be lightweight and extendable by keeping its core minimal and allowing you to **install only the tools you need**.\\\\n\\\\nIf you don't find what you need on our more than 200 integrations you can easily:\\\\n\\\\n1. Create your own plugin\\\\n2. Integrate a new chain\\\\n3. Integrate a new wallet\\\\n4. Integrate a new agent framework\\\\n\\\\nSee how to do it [here](#-contributing).\\\\n\\\\n**License**\\\\n\\\\nGOAT is free software, MIT licensed.\\\\n\\\\n# \\\\ud83d\\\\ude80 Quickstarts\\\\n\\\\n***NOTE**: While a quickstart may be implemented for a specific chain, wallet and agent framework, GOAT's flexibility allows you to easily adapt it to any chain, wallet and agent framework without difficulty.*\\\\n\\\\n## \\\\ud83d\\\\udcd8 Typescript\\\\n\\\\n-   **By use case**\\\\n    -   **Money transmission**\\\\n        -   Send and receive payments [[EVM](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/evm-send-and-receive-tokens), [Solana](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/solana-send-and-receive-tokens), [Chromia](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/chromia-send-and-receive-tokens), [Cosmos](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/cosmos-send-and-receive-tokens), [Fuel](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/fuel-send-and-receive-tokens), [Radix](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/radix-send-and-receive-tokens), [Zetrix](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/zetrix-send-and-receive-tokens)]\\\\n    -   **Commerce**\\\\n        -   Purchase any item on Amazon [[EVM](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/evm-purchase-on-amazon), [Solana](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/solana-purchase-on-amazon)]\\\\n    -   **Investing**\\\\n        -   Earn yield [[EVM](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/evm-defi-agent), [Solana](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/solana-defi-agent)]\\\\n        -   Prediction markets [[EVM](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/evm-bet-on-polymarket)]\\\\n        -   Purchase crypto assets [[EVM](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/evm-swap-tokens), [Solana](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/solana-swap-tokens)]\\\\n    -   **Tokenization**\\\\n        -   Tokenize non-fungible assets [[EVM](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/evm-mint-nf\\\\n[...truncated for length...]\\\", \\\"tools\\\": [], \\\"tools_count\\\": 0, \\\"homepage\\\": \\\"\\\", \\\"url\\\": \\\"https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-framework/model-context-protocol\\\", \\\"topics\\\": [\\\"agents\\\", \\\"ai\\\", \\\"blockchain\\\", \\\"crypto\\\"], \\\"data_sources\\\": [\\\"official\\\"]}\", \"stage1_analysis\": {\"server_name\": \"GOAT\", \"server_id\": \"goat-sdk/goat\", \"is_finance_llm\": \"yes\", \"confidence\": \"high\", \"threat_models\": [\"payment_fraud\", \"cryptocurrency_theft\", \"investment_manipulation\", \"wallet_compromise\", \"unauthorized_transactions\"], \"analysis_notes\": \"Explicitly described as 'largest agentic finance toolkit' with capabilities for payments, investments, crypto trading, tokenization, and financial transactions across blockchains\"}, \"identified_threat_models\": [\"payment_fraud\", \"cryptocurrency_theft\", \"investment_manipulation\", \"wallet_compromise\", \"unauthorized_transactions\"], \"stage1_confidence\": \"high\", \"stage1_notes\": \"Explicitly described as 'largest agentic finance toolkit' with capabilities for payments, investments, crypto trading, tokenization, and financial transactions across blockchains\"}", "target": "", "id": "WWNuNXZ85784Y92X9urmrM", "metadata": {"stage": "consequentiality_assessment"}}
